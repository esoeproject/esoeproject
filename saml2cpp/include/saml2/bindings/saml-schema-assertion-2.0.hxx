// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SAML_SCHEMA_ASSERTION_2_0_HXX
#define CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SAML_SCHEMA_ASSERTION_2_0_HXX

// Begin prologue.
//
#include "saml2/SAML2Defs.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "saml2/xsd/xml-schema.hxx"

// Forward declarations.
//
namespace saml2
{
  namespace assertion
  {
    class BaseIDAbstractType;
    class NameIDType;
    class EncryptedElementType;
    class AssertionType;
    class SubjectType;
    class SubjectConfirmationType;
    class SubjectConfirmationDataType;
    class KeyInfoConfirmationDataType;
    class ConditionsType;
    class ConditionAbstractType;
    class AudienceRestrictionType;
    class OneTimeUseType;
    class ProxyRestrictionType;
    class AdviceType;
    class StatementAbstractType;
    class AuthnStatementType;
    class SubjectLocalityType;
    class AuthnContextType;
    class AuthzDecisionStatementType;
    class DecisionType;
    class ActionType;
    class EvidenceType;
    class AttributeStatementType;
    class AttributeType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "xmldsig-core-schema.hxx"

#include "xenc-schema.hxx"

namespace saml2
{
  namespace assertion
  {
    class BaseIDAbstractType: public ::xml_schema::type
    {
      public:
      // NameQualifier
      // 
      typedef ::xml_schema::string NameQualifier_type;
      typedef ::xsd::cxx::tree::optional< NameQualifier_type > NameQualifier_optional;
      typedef ::xsd::cxx::tree::traits< NameQualifier_type, wchar_t > NameQualifier_traits;

      const NameQualifier_optional&
      NameQualifier () const;

      NameQualifier_optional&
      NameQualifier ();

      void
      NameQualifier (const NameQualifier_type& x);

      void
      NameQualifier (const NameQualifier_optional& x);

      void
      NameQualifier (::std::auto_ptr< NameQualifier_type > p);

      // SPNameQualifier
      // 
      typedef ::xml_schema::string SPNameQualifier_type;
      typedef ::xsd::cxx::tree::optional< SPNameQualifier_type > SPNameQualifier_optional;
      typedef ::xsd::cxx::tree::traits< SPNameQualifier_type, wchar_t > SPNameQualifier_traits;

      const SPNameQualifier_optional&
      SPNameQualifier () const;

      SPNameQualifier_optional&
      SPNameQualifier ();

      void
      SPNameQualifier (const SPNameQualifier_type& x);

      void
      SPNameQualifier (const SPNameQualifier_optional& x);

      void
      SPNameQualifier (::std::auto_ptr< SPNameQualifier_type > p);

      // Constructors.
      //
      BaseIDAbstractType ();

      BaseIDAbstractType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      BaseIDAbstractType (const BaseIDAbstractType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual BaseIDAbstractType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~BaseIDAbstractType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      NameQualifier_optional NameQualifier_;
      SPNameQualifier_optional SPNameQualifier_;
    };

    class NameIDType: public ::xml_schema::string
    {
      public:
      // NameQualifier
      // 
      typedef ::xml_schema::string NameQualifier_type;
      typedef ::xsd::cxx::tree::optional< NameQualifier_type > NameQualifier_optional;
      typedef ::xsd::cxx::tree::traits< NameQualifier_type, wchar_t > NameQualifier_traits;

      const NameQualifier_optional&
      NameQualifier () const;

      NameQualifier_optional&
      NameQualifier ();

      void
      NameQualifier (const NameQualifier_type& x);

      void
      NameQualifier (const NameQualifier_optional& x);

      void
      NameQualifier (::std::auto_ptr< NameQualifier_type > p);

      // SPNameQualifier
      // 
      typedef ::xml_schema::string SPNameQualifier_type;
      typedef ::xsd::cxx::tree::optional< SPNameQualifier_type > SPNameQualifier_optional;
      typedef ::xsd::cxx::tree::traits< SPNameQualifier_type, wchar_t > SPNameQualifier_traits;

      const SPNameQualifier_optional&
      SPNameQualifier () const;

      SPNameQualifier_optional&
      SPNameQualifier ();

      void
      SPNameQualifier (const SPNameQualifier_type& x);

      void
      SPNameQualifier (const SPNameQualifier_optional& x);

      void
      SPNameQualifier (::std::auto_ptr< SPNameQualifier_type > p);

      // Format
      // 
      typedef ::xml_schema::uri Format_type;
      typedef ::xsd::cxx::tree::optional< Format_type > Format_optional;
      typedef ::xsd::cxx::tree::traits< Format_type, wchar_t > Format_traits;

      const Format_optional&
      Format () const;

      Format_optional&
      Format ();

      void
      Format (const Format_type& x);

      void
      Format (const Format_optional& x);

      void
      Format (::std::auto_ptr< Format_type > p);

      // SPProvidedID
      // 
      typedef ::xml_schema::string SPProvidedID_type;
      typedef ::xsd::cxx::tree::optional< SPProvidedID_type > SPProvidedID_optional;
      typedef ::xsd::cxx::tree::traits< SPProvidedID_type, wchar_t > SPProvidedID_traits;

      const SPProvidedID_optional&
      SPProvidedID () const;

      SPProvidedID_optional&
      SPProvidedID ();

      void
      SPProvidedID (const SPProvidedID_type& x);

      void
      SPProvidedID (const SPProvidedID_optional& x);

      void
      SPProvidedID (::std::auto_ptr< SPProvidedID_type > p);

      // Constructors.
      //
      NameIDType ();

      NameIDType (const wchar_t*);

      NameIDType (const ::std::wstring&);

      NameIDType (const ::xml_schema::string&);

      NameIDType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      NameIDType (const NameIDType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual NameIDType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~NameIDType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      NameQualifier_optional NameQualifier_;
      SPNameQualifier_optional SPNameQualifier_;
      Format_optional Format_;
      SPProvidedID_optional SPProvidedID_;
    };

    class EncryptedElementType: public ::xml_schema::type
    {
      public:
      // EncryptedData
      // 
      typedef ::w3::xmlenc::EncryptedDataType EncryptedData_type;
      typedef ::xsd::cxx::tree::traits< EncryptedData_type, wchar_t > EncryptedData_traits;

      const EncryptedData_type&
      EncryptedData () const;

      EncryptedData_type&
      EncryptedData ();

      void
      EncryptedData (const EncryptedData_type& x);

      void
      EncryptedData (::std::auto_ptr< EncryptedData_type > p);

      // EncryptedKey
      // 
      typedef ::w3::xmlenc::EncryptedKeyType EncryptedKey_type;
      typedef ::xsd::cxx::tree::sequence< EncryptedKey_type > EncryptedKey_sequence;
      typedef EncryptedKey_sequence::iterator EncryptedKey_iterator;
      typedef EncryptedKey_sequence::const_iterator EncryptedKey_const_iterator;
      typedef ::xsd::cxx::tree::traits< EncryptedKey_type, wchar_t > EncryptedKey_traits;

      const EncryptedKey_sequence&
      EncryptedKey () const;

      EncryptedKey_sequence&
      EncryptedKey ();

      void
      EncryptedKey (const EncryptedKey_sequence& s);

      // Constructors.
      //
      EncryptedElementType ();

      EncryptedElementType (const EncryptedData_type&);

      EncryptedElementType (::std::auto_ptr< EncryptedData_type >&);

      EncryptedElementType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      EncryptedElementType (const EncryptedElementType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual EncryptedElementType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~EncryptedElementType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< EncryptedData_type > EncryptedData_;
      EncryptedKey_sequence EncryptedKey_;
    };

    class AssertionType: public ::xml_schema::type
    {
      public:
      // Issuer
      // 
      typedef ::saml2::assertion::NameIDType Issuer_type;
      typedef ::xsd::cxx::tree::traits< Issuer_type, wchar_t > Issuer_traits;

      const Issuer_type&
      Issuer () const;

      Issuer_type&
      Issuer ();

      void
      Issuer (const Issuer_type& x);

      void
      Issuer (::std::auto_ptr< Issuer_type > p);

      // Signature
      // 
      typedef ::w3::xmldsig::SignatureType Signature_type;
      typedef ::xsd::cxx::tree::optional< Signature_type > Signature_optional;
      typedef ::xsd::cxx::tree::traits< Signature_type, wchar_t > Signature_traits;

      const Signature_optional&
      Signature () const;

      Signature_optional&
      Signature ();

      void
      Signature (const Signature_type& x);

      void
      Signature (const Signature_optional& x);

      void
      Signature (::std::auto_ptr< Signature_type > p);

      // Subject
      // 
      typedef ::saml2::assertion::SubjectType Subject_type;
      typedef ::xsd::cxx::tree::optional< Subject_type > Subject_optional;
      typedef ::xsd::cxx::tree::traits< Subject_type, wchar_t > Subject_traits;

      const Subject_optional&
      Subject () const;

      Subject_optional&
      Subject ();

      void
      Subject (const Subject_type& x);

      void
      Subject (const Subject_optional& x);

      void
      Subject (::std::auto_ptr< Subject_type > p);

      // Conditions
      // 
      typedef ::saml2::assertion::ConditionsType Conditions_type;
      typedef ::xsd::cxx::tree::optional< Conditions_type > Conditions_optional;
      typedef ::xsd::cxx::tree::traits< Conditions_type, wchar_t > Conditions_traits;

      const Conditions_optional&
      Conditions () const;

      Conditions_optional&
      Conditions ();

      void
      Conditions (const Conditions_type& x);

      void
      Conditions (const Conditions_optional& x);

      void
      Conditions (::std::auto_ptr< Conditions_type > p);

      // Advice
      // 
      typedef ::saml2::assertion::AdviceType Advice_type;
      typedef ::xsd::cxx::tree::optional< Advice_type > Advice_optional;
      typedef ::xsd::cxx::tree::traits< Advice_type, wchar_t > Advice_traits;

      const Advice_optional&
      Advice () const;

      Advice_optional&
      Advice ();

      void
      Advice (const Advice_type& x);

      void
      Advice (const Advice_optional& x);

      void
      Advice (::std::auto_ptr< Advice_type > p);

      // Statement
      // 
      typedef ::saml2::assertion::StatementAbstractType Statement_type;
      typedef ::xsd::cxx::tree::sequence< Statement_type > Statement_sequence;
      typedef Statement_sequence::iterator Statement_iterator;
      typedef Statement_sequence::const_iterator Statement_const_iterator;
      typedef ::xsd::cxx::tree::traits< Statement_type, wchar_t > Statement_traits;

      const Statement_sequence&
      Statement () const;

      Statement_sequence&
      Statement ();

      void
      Statement (const Statement_sequence& s);

      // AuthnStatement
      // 
      typedef ::saml2::assertion::AuthnStatementType AuthnStatement_type;
      typedef ::xsd::cxx::tree::sequence< AuthnStatement_type > AuthnStatement_sequence;
      typedef AuthnStatement_sequence::iterator AuthnStatement_iterator;
      typedef AuthnStatement_sequence::const_iterator AuthnStatement_const_iterator;
      typedef ::xsd::cxx::tree::traits< AuthnStatement_type, wchar_t > AuthnStatement_traits;

      const AuthnStatement_sequence&
      AuthnStatement () const;

      AuthnStatement_sequence&
      AuthnStatement ();

      void
      AuthnStatement (const AuthnStatement_sequence& s);

      // AuthzDecisionStatement
      // 
      typedef ::saml2::assertion::AuthzDecisionStatementType AuthzDecisionStatement_type;
      typedef ::xsd::cxx::tree::sequence< AuthzDecisionStatement_type > AuthzDecisionStatement_sequence;
      typedef AuthzDecisionStatement_sequence::iterator AuthzDecisionStatement_iterator;
      typedef AuthzDecisionStatement_sequence::const_iterator AuthzDecisionStatement_const_iterator;
      typedef ::xsd::cxx::tree::traits< AuthzDecisionStatement_type, wchar_t > AuthzDecisionStatement_traits;

      const AuthzDecisionStatement_sequence&
      AuthzDecisionStatement () const;

      AuthzDecisionStatement_sequence&
      AuthzDecisionStatement ();

      void
      AuthzDecisionStatement (const AuthzDecisionStatement_sequence& s);

      // AttributeStatement
      // 
      typedef ::saml2::assertion::AttributeStatementType AttributeStatement_type;
      typedef ::xsd::cxx::tree::sequence< AttributeStatement_type > AttributeStatement_sequence;
      typedef AttributeStatement_sequence::iterator AttributeStatement_iterator;
      typedef AttributeStatement_sequence::const_iterator AttributeStatement_const_iterator;
      typedef ::xsd::cxx::tree::traits< AttributeStatement_type, wchar_t > AttributeStatement_traits;

      const AttributeStatement_sequence&
      AttributeStatement () const;

      AttributeStatement_sequence&
      AttributeStatement ();

      void
      AttributeStatement (const AttributeStatement_sequence& s);

      // Version
      // 
      typedef ::xml_schema::string Version_type;
      typedef ::xsd::cxx::tree::traits< Version_type, wchar_t > Version_traits;

      const Version_type&
      Version () const;

      Version_type&
      Version ();

      void
      Version (const Version_type& x);

      void
      Version (::std::auto_ptr< Version_type > p);

      // ID
      // 
      typedef ::xml_schema::id ID_type;
      typedef ::xsd::cxx::tree::traits< ID_type, wchar_t > ID_traits;

      const ID_type&
      ID () const;

      ID_type&
      ID ();

      void
      ID (const ID_type& x);

      void
      ID (::std::auto_ptr< ID_type > p);

      // IssueInstant
      // 
      typedef ::xml_schema::date_time IssueInstant_type;
      typedef ::xsd::cxx::tree::traits< IssueInstant_type, wchar_t > IssueInstant_traits;

      const IssueInstant_type&
      IssueInstant () const;

      IssueInstant_type&
      IssueInstant ();

      void
      IssueInstant (const IssueInstant_type& x);

      void
      IssueInstant (::std::auto_ptr< IssueInstant_type > p);

      // Constructors.
      //
      AssertionType ();

      AssertionType (const Issuer_type&,
                     const Version_type&,
                     const ID_type&,
                     const IssueInstant_type&);

      AssertionType (::std::auto_ptr< Issuer_type >&,
                     const Version_type&,
                     const ID_type&,
                     const IssueInstant_type&);

      AssertionType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      AssertionType (const AssertionType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual AssertionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AssertionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Issuer_type > Issuer_;
      Signature_optional Signature_;
      Subject_optional Subject_;
      Conditions_optional Conditions_;
      Advice_optional Advice_;
      Statement_sequence Statement_;
      AuthnStatement_sequence AuthnStatement_;
      AuthzDecisionStatement_sequence AuthzDecisionStatement_;
      AttributeStatement_sequence AttributeStatement_;
      ::xsd::cxx::tree::one< Version_type > Version_;
      ::xsd::cxx::tree::one< ID_type > ID_;
      ::xsd::cxx::tree::one< IssueInstant_type > IssueInstant_;
    };

    class SubjectType: public ::xml_schema::type
    {
      public:
      // BaseID
      // 
      typedef ::saml2::assertion::BaseIDAbstractType BaseID_type;
      typedef ::xsd::cxx::tree::optional< BaseID_type > BaseID_optional;
      typedef ::xsd::cxx::tree::traits< BaseID_type, wchar_t > BaseID_traits;

      const BaseID_optional&
      BaseID () const;

      BaseID_optional&
      BaseID ();

      void
      BaseID (const BaseID_type& x);

      void
      BaseID (const BaseID_optional& x);

      void
      BaseID (::std::auto_ptr< BaseID_type > p);

      // NameID
      // 
      typedef ::saml2::assertion::NameIDType NameID_type;
      typedef ::xsd::cxx::tree::optional< NameID_type > NameID_optional;
      typedef ::xsd::cxx::tree::traits< NameID_type, wchar_t > NameID_traits;

      const NameID_optional&
      NameID () const;

      NameID_optional&
      NameID ();

      void
      NameID (const NameID_type& x);

      void
      NameID (const NameID_optional& x);

      void
      NameID (::std::auto_ptr< NameID_type > p);

      // EncryptedID
      // 
      typedef ::saml2::assertion::EncryptedElementType EncryptedID_type;
      typedef ::xsd::cxx::tree::optional< EncryptedID_type > EncryptedID_optional;
      typedef ::xsd::cxx::tree::traits< EncryptedID_type, wchar_t > EncryptedID_traits;

      const EncryptedID_optional&
      EncryptedID () const;

      EncryptedID_optional&
      EncryptedID ();

      void
      EncryptedID (const EncryptedID_type& x);

      void
      EncryptedID (const EncryptedID_optional& x);

      void
      EncryptedID (::std::auto_ptr< EncryptedID_type > p);

      // SubjectConfirmation
      // 
      typedef ::saml2::assertion::SubjectConfirmationType SubjectConfirmation_type;
      typedef ::xsd::cxx::tree::sequence< SubjectConfirmation_type > SubjectConfirmation_sequence;
      typedef SubjectConfirmation_sequence::iterator SubjectConfirmation_iterator;
      typedef SubjectConfirmation_sequence::const_iterator SubjectConfirmation_const_iterator;
      typedef ::xsd::cxx::tree::traits< SubjectConfirmation_type, wchar_t > SubjectConfirmation_traits;

      const SubjectConfirmation_sequence&
      SubjectConfirmation () const;

      SubjectConfirmation_sequence&
      SubjectConfirmation ();

      void
      SubjectConfirmation (const SubjectConfirmation_sequence& s);

      // Constructors.
      //
      SubjectType ();

      SubjectType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      SubjectType (const SubjectType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual SubjectType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SubjectType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      BaseID_optional BaseID_;
      NameID_optional NameID_;
      EncryptedID_optional EncryptedID_;
      SubjectConfirmation_sequence SubjectConfirmation_;
    };

    class SubjectConfirmationType: public ::xml_schema::type
    {
      public:
      // BaseID
      // 
      typedef ::saml2::assertion::BaseIDAbstractType BaseID_type;
      typedef ::xsd::cxx::tree::optional< BaseID_type > BaseID_optional;
      typedef ::xsd::cxx::tree::traits< BaseID_type, wchar_t > BaseID_traits;

      const BaseID_optional&
      BaseID () const;

      BaseID_optional&
      BaseID ();

      void
      BaseID (const BaseID_type& x);

      void
      BaseID (const BaseID_optional& x);

      void
      BaseID (::std::auto_ptr< BaseID_type > p);

      // NameID
      // 
      typedef ::saml2::assertion::NameIDType NameID_type;
      typedef ::xsd::cxx::tree::optional< NameID_type > NameID_optional;
      typedef ::xsd::cxx::tree::traits< NameID_type, wchar_t > NameID_traits;

      const NameID_optional&
      NameID () const;

      NameID_optional&
      NameID ();

      void
      NameID (const NameID_type& x);

      void
      NameID (const NameID_optional& x);

      void
      NameID (::std::auto_ptr< NameID_type > p);

      // EncryptedID
      // 
      typedef ::saml2::assertion::EncryptedElementType EncryptedID_type;
      typedef ::xsd::cxx::tree::optional< EncryptedID_type > EncryptedID_optional;
      typedef ::xsd::cxx::tree::traits< EncryptedID_type, wchar_t > EncryptedID_traits;

      const EncryptedID_optional&
      EncryptedID () const;

      EncryptedID_optional&
      EncryptedID ();

      void
      EncryptedID (const EncryptedID_type& x);

      void
      EncryptedID (const EncryptedID_optional& x);

      void
      EncryptedID (::std::auto_ptr< EncryptedID_type > p);

      // SubjectConfirmationData
      // 
      typedef ::saml2::assertion::SubjectConfirmationDataType SubjectConfirmationData_type;
      typedef ::xsd::cxx::tree::optional< SubjectConfirmationData_type > SubjectConfirmationData_optional;
      typedef ::xsd::cxx::tree::traits< SubjectConfirmationData_type, wchar_t > SubjectConfirmationData_traits;

      const SubjectConfirmationData_optional&
      SubjectConfirmationData () const;

      SubjectConfirmationData_optional&
      SubjectConfirmationData ();

      void
      SubjectConfirmationData (const SubjectConfirmationData_type& x);

      void
      SubjectConfirmationData (const SubjectConfirmationData_optional& x);

      void
      SubjectConfirmationData (::std::auto_ptr< SubjectConfirmationData_type > p);

      // Method
      // 
      typedef ::xml_schema::uri Method_type;
      typedef ::xsd::cxx::tree::traits< Method_type, wchar_t > Method_traits;

      const Method_type&
      Method () const;

      Method_type&
      Method ();

      void
      Method (const Method_type& x);

      void
      Method (::std::auto_ptr< Method_type > p);

      // Constructors.
      //
      SubjectConfirmationType ();

      SubjectConfirmationType (const Method_type&);

      SubjectConfirmationType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      SubjectConfirmationType (const SubjectConfirmationType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual SubjectConfirmationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SubjectConfirmationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      BaseID_optional BaseID_;
      NameID_optional NameID_;
      EncryptedID_optional EncryptedID_;
      SubjectConfirmationData_optional SubjectConfirmationData_;
      ::xsd::cxx::tree::one< Method_type > Method_;
    };

    class SubjectConfirmationDataType: public ::xml_schema::type
    {
      public:
      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // NotBefore
      // 
      typedef ::xml_schema::date_time NotBefore_type;
      typedef ::xsd::cxx::tree::optional< NotBefore_type > NotBefore_optional;
      typedef ::xsd::cxx::tree::traits< NotBefore_type, wchar_t > NotBefore_traits;

      const NotBefore_optional&
      NotBefore () const;

      NotBefore_optional&
      NotBefore ();

      void
      NotBefore (const NotBefore_type& x);

      void
      NotBefore (const NotBefore_optional& x);

      void
      NotBefore (::std::auto_ptr< NotBefore_type > p);

      // NotOnOrAfter
      // 
      typedef ::xml_schema::date_time NotOnOrAfter_type;
      typedef ::xsd::cxx::tree::optional< NotOnOrAfter_type > NotOnOrAfter_optional;
      typedef ::xsd::cxx::tree::traits< NotOnOrAfter_type, wchar_t > NotOnOrAfter_traits;

      const NotOnOrAfter_optional&
      NotOnOrAfter () const;

      NotOnOrAfter_optional&
      NotOnOrAfter ();

      void
      NotOnOrAfter (const NotOnOrAfter_type& x);

      void
      NotOnOrAfter (const NotOnOrAfter_optional& x);

      void
      NotOnOrAfter (::std::auto_ptr< NotOnOrAfter_type > p);

      // Recipient
      // 
      typedef ::xml_schema::uri Recipient_type;
      typedef ::xsd::cxx::tree::optional< Recipient_type > Recipient_optional;
      typedef ::xsd::cxx::tree::traits< Recipient_type, wchar_t > Recipient_traits;

      const Recipient_optional&
      Recipient () const;

      Recipient_optional&
      Recipient ();

      void
      Recipient (const Recipient_type& x);

      void
      Recipient (const Recipient_optional& x);

      void
      Recipient (::std::auto_ptr< Recipient_type > p);

      // InResponseTo
      // 
      typedef ::xml_schema::ncname InResponseTo_type;
      typedef ::xsd::cxx::tree::optional< InResponseTo_type > InResponseTo_optional;
      typedef ::xsd::cxx::tree::traits< InResponseTo_type, wchar_t > InResponseTo_traits;

      const InResponseTo_optional&
      InResponseTo () const;

      InResponseTo_optional&
      InResponseTo ();

      void
      InResponseTo (const InResponseTo_type& x);

      void
      InResponseTo (const InResponseTo_optional& x);

      void
      InResponseTo (::std::auto_ptr< InResponseTo_type > p);

      // Address
      // 
      typedef ::xml_schema::string Address_type;
      typedef ::xsd::cxx::tree::optional< Address_type > Address_optional;
      typedef ::xsd::cxx::tree::traits< Address_type, wchar_t > Address_traits;

      const Address_optional&
      Address () const;

      Address_optional&
      Address ();

      void
      Address (const Address_type& x);

      void
      Address (const Address_optional& x);

      void
      Address (::std::auto_ptr< Address_type > p);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      SubjectConfirmationDataType ();

      SubjectConfirmationDataType (const ::xml_schema::type&);

      SubjectConfirmationDataType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      SubjectConfirmationDataType (const SubjectConfirmationDataType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual SubjectConfirmationDataType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SubjectConfirmationDataType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
      NotBefore_optional NotBefore_;
      NotOnOrAfter_optional NotOnOrAfter_;
      Recipient_optional Recipient_;
      InResponseTo_optional InResponseTo_;
      Address_optional Address_;
      any_attribute_set any_attribute_;
    };

    class KeyInfoConfirmationDataType: public ::saml2::assertion::SubjectConfirmationDataType
    {
      public:
      // Constructors.
      //
      KeyInfoConfirmationDataType ();

      KeyInfoConfirmationDataType (const ::xml_schema::type&);

      KeyInfoConfirmationDataType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      KeyInfoConfirmationDataType (const KeyInfoConfirmationDataType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual KeyInfoConfirmationDataType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~KeyInfoConfirmationDataType ();
    };

    class ConditionsType: public ::xml_schema::type
    {
      public:
      // Condition
      // 
      typedef ::saml2::assertion::ConditionAbstractType Condition_type;
      typedef ::xsd::cxx::tree::sequence< Condition_type > Condition_sequence;
      typedef Condition_sequence::iterator Condition_iterator;
      typedef Condition_sequence::const_iterator Condition_const_iterator;
      typedef ::xsd::cxx::tree::traits< Condition_type, wchar_t > Condition_traits;

      const Condition_sequence&
      Condition () const;

      Condition_sequence&
      Condition ();

      void
      Condition (const Condition_sequence& s);

      // AudienceRestriction
      // 
      typedef ::saml2::assertion::AudienceRestrictionType AudienceRestriction_type;
      typedef ::xsd::cxx::tree::sequence< AudienceRestriction_type > AudienceRestriction_sequence;
      typedef AudienceRestriction_sequence::iterator AudienceRestriction_iterator;
      typedef AudienceRestriction_sequence::const_iterator AudienceRestriction_const_iterator;
      typedef ::xsd::cxx::tree::traits< AudienceRestriction_type, wchar_t > AudienceRestriction_traits;

      const AudienceRestriction_sequence&
      AudienceRestriction () const;

      AudienceRestriction_sequence&
      AudienceRestriction ();

      void
      AudienceRestriction (const AudienceRestriction_sequence& s);

      // OneTimeUse
      // 
      typedef ::saml2::assertion::OneTimeUseType OneTimeUse_type;
      typedef ::xsd::cxx::tree::sequence< OneTimeUse_type > OneTimeUse_sequence;
      typedef OneTimeUse_sequence::iterator OneTimeUse_iterator;
      typedef OneTimeUse_sequence::const_iterator OneTimeUse_const_iterator;
      typedef ::xsd::cxx::tree::traits< OneTimeUse_type, wchar_t > OneTimeUse_traits;

      const OneTimeUse_sequence&
      OneTimeUse () const;

      OneTimeUse_sequence&
      OneTimeUse ();

      void
      OneTimeUse (const OneTimeUse_sequence& s);

      // ProxyRestriction
      // 
      typedef ::saml2::assertion::ProxyRestrictionType ProxyRestriction_type;
      typedef ::xsd::cxx::tree::sequence< ProxyRestriction_type > ProxyRestriction_sequence;
      typedef ProxyRestriction_sequence::iterator ProxyRestriction_iterator;
      typedef ProxyRestriction_sequence::const_iterator ProxyRestriction_const_iterator;
      typedef ::xsd::cxx::tree::traits< ProxyRestriction_type, wchar_t > ProxyRestriction_traits;

      const ProxyRestriction_sequence&
      ProxyRestriction () const;

      ProxyRestriction_sequence&
      ProxyRestriction ();

      void
      ProxyRestriction (const ProxyRestriction_sequence& s);

      // NotBefore
      // 
      typedef ::xml_schema::date_time NotBefore_type;
      typedef ::xsd::cxx::tree::optional< NotBefore_type > NotBefore_optional;
      typedef ::xsd::cxx::tree::traits< NotBefore_type, wchar_t > NotBefore_traits;

      const NotBefore_optional&
      NotBefore () const;

      NotBefore_optional&
      NotBefore ();

      void
      NotBefore (const NotBefore_type& x);

      void
      NotBefore (const NotBefore_optional& x);

      void
      NotBefore (::std::auto_ptr< NotBefore_type > p);

      // NotOnOrAfter
      // 
      typedef ::xml_schema::date_time NotOnOrAfter_type;
      typedef ::xsd::cxx::tree::optional< NotOnOrAfter_type > NotOnOrAfter_optional;
      typedef ::xsd::cxx::tree::traits< NotOnOrAfter_type, wchar_t > NotOnOrAfter_traits;

      const NotOnOrAfter_optional&
      NotOnOrAfter () const;

      NotOnOrAfter_optional&
      NotOnOrAfter ();

      void
      NotOnOrAfter (const NotOnOrAfter_type& x);

      void
      NotOnOrAfter (const NotOnOrAfter_optional& x);

      void
      NotOnOrAfter (::std::auto_ptr< NotOnOrAfter_type > p);

      // Constructors.
      //
      ConditionsType ();

      ConditionsType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ConditionsType (const ConditionsType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ConditionsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ConditionsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Condition_sequence Condition_;
      AudienceRestriction_sequence AudienceRestriction_;
      OneTimeUse_sequence OneTimeUse_;
      ProxyRestriction_sequence ProxyRestriction_;
      NotBefore_optional NotBefore_;
      NotOnOrAfter_optional NotOnOrAfter_;
    };

    class ConditionAbstractType: public ::xml_schema::type
    {
      public:
      // Constructors.
      //
      ConditionAbstractType ();

      ConditionAbstractType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      ConditionAbstractType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      ConditionAbstractType (const ::std::wstring& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      ConditionAbstractType (const ConditionAbstractType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual ConditionAbstractType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ConditionAbstractType ();
    };

    class AudienceRestrictionType: public ::saml2::assertion::ConditionAbstractType
    {
      public:
      // Audience
      // 
      typedef ::xml_schema::uri Audience_type;
      typedef ::xsd::cxx::tree::sequence< Audience_type > Audience_sequence;
      typedef Audience_sequence::iterator Audience_iterator;
      typedef Audience_sequence::const_iterator Audience_const_iterator;
      typedef ::xsd::cxx::tree::traits< Audience_type, wchar_t > Audience_traits;

      const Audience_sequence&
      Audience () const;

      Audience_sequence&
      Audience ();

      void
      Audience (const Audience_sequence& s);

      // Constructors.
      //
      AudienceRestrictionType ();

      AudienceRestrictionType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      AudienceRestrictionType (const AudienceRestrictionType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual AudienceRestrictionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AudienceRestrictionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Audience_sequence Audience_;
    };

    class OneTimeUseType: public ::saml2::assertion::ConditionAbstractType
    {
      public:
      // Constructors.
      //
      OneTimeUseType ();

      OneTimeUseType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      OneTimeUseType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      OneTimeUseType (const ::std::wstring& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      OneTimeUseType (const OneTimeUseType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual OneTimeUseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~OneTimeUseType ();
    };

    class ProxyRestrictionType: public ::saml2::assertion::ConditionAbstractType
    {
      public:
      // Audience
      // 
      typedef ::xml_schema::uri Audience_type;
      typedef ::xsd::cxx::tree::sequence< Audience_type > Audience_sequence;
      typedef Audience_sequence::iterator Audience_iterator;
      typedef Audience_sequence::const_iterator Audience_const_iterator;
      typedef ::xsd::cxx::tree::traits< Audience_type, wchar_t > Audience_traits;

      const Audience_sequence&
      Audience () const;

      Audience_sequence&
      Audience ();

      void
      Audience (const Audience_sequence& s);

      // Count
      // 
      typedef ::xml_schema::non_negative_integer Count_type;
      typedef ::xsd::cxx::tree::optional< Count_type > Count_optional;
      typedef ::xsd::cxx::tree::traits< Count_type, wchar_t > Count_traits;

      const Count_optional&
      Count () const;

      Count_optional&
      Count ();

      void
      Count (const Count_type& x);

      void
      Count (const Count_optional& x);

      // Constructors.
      //
      ProxyRestrictionType ();

      ProxyRestrictionType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ProxyRestrictionType (const ProxyRestrictionType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual ProxyRestrictionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ProxyRestrictionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Audience_sequence Audience_;
      Count_optional Count_;
    };

    class AdviceType: public ::xml_schema::type
    {
      public:
      // AssertionIDRef
      // 
      typedef ::xml_schema::ncname AssertionIDRef_type;
      typedef ::xsd::cxx::tree::sequence< AssertionIDRef_type > AssertionIDRef_sequence;
      typedef AssertionIDRef_sequence::iterator AssertionIDRef_iterator;
      typedef AssertionIDRef_sequence::const_iterator AssertionIDRef_const_iterator;
      typedef ::xsd::cxx::tree::traits< AssertionIDRef_type, wchar_t > AssertionIDRef_traits;

      const AssertionIDRef_sequence&
      AssertionIDRef () const;

      AssertionIDRef_sequence&
      AssertionIDRef ();

      void
      AssertionIDRef (const AssertionIDRef_sequence& s);

      // AssertionURIRef
      // 
      typedef ::xml_schema::uri AssertionURIRef_type;
      typedef ::xsd::cxx::tree::sequence< AssertionURIRef_type > AssertionURIRef_sequence;
      typedef AssertionURIRef_sequence::iterator AssertionURIRef_iterator;
      typedef AssertionURIRef_sequence::const_iterator AssertionURIRef_const_iterator;
      typedef ::xsd::cxx::tree::traits< AssertionURIRef_type, wchar_t > AssertionURIRef_traits;

      const AssertionURIRef_sequence&
      AssertionURIRef () const;

      AssertionURIRef_sequence&
      AssertionURIRef ();

      void
      AssertionURIRef (const AssertionURIRef_sequence& s);

      // Assertion
      // 
      typedef ::saml2::assertion::AssertionType Assertion_type;
      typedef ::xsd::cxx::tree::sequence< Assertion_type > Assertion_sequence;
      typedef Assertion_sequence::iterator Assertion_iterator;
      typedef Assertion_sequence::const_iterator Assertion_const_iterator;
      typedef ::xsd::cxx::tree::traits< Assertion_type, wchar_t > Assertion_traits;

      const Assertion_sequence&
      Assertion () const;

      Assertion_sequence&
      Assertion ();

      void
      Assertion (const Assertion_sequence& s);

      // EncryptedAssertion
      // 
      typedef ::saml2::assertion::EncryptedElementType EncryptedAssertion_type;
      typedef ::xsd::cxx::tree::sequence< EncryptedAssertion_type > EncryptedAssertion_sequence;
      typedef EncryptedAssertion_sequence::iterator EncryptedAssertion_iterator;
      typedef EncryptedAssertion_sequence::const_iterator EncryptedAssertion_const_iterator;
      typedef ::xsd::cxx::tree::traits< EncryptedAssertion_type, wchar_t > EncryptedAssertion_traits;

      const EncryptedAssertion_sequence&
      EncryptedAssertion () const;

      EncryptedAssertion_sequence&
      EncryptedAssertion ();

      void
      EncryptedAssertion (const EncryptedAssertion_sequence& s);

      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      AdviceType ();

      AdviceType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      AdviceType (const AdviceType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual AdviceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AdviceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      AssertionIDRef_sequence AssertionIDRef_;
      AssertionURIRef_sequence AssertionURIRef_;
      Assertion_sequence Assertion_;
      EncryptedAssertion_sequence EncryptedAssertion_;
      any_sequence any_;
    };

    class StatementAbstractType: public ::xml_schema::type
    {
      public:
      // Constructors.
      //
      StatementAbstractType ();

      StatementAbstractType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      StatementAbstractType (const ::xercesc::DOMAttr& a,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      StatementAbstractType (const ::std::wstring& s,
                             const ::xercesc::DOMElement* e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      StatementAbstractType (const StatementAbstractType& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

      virtual StatementAbstractType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~StatementAbstractType ();
    };

    class AuthnStatementType: public ::saml2::assertion::StatementAbstractType
    {
      public:
      // SubjectLocality
      // 
      typedef ::saml2::assertion::SubjectLocalityType SubjectLocality_type;
      typedef ::xsd::cxx::tree::optional< SubjectLocality_type > SubjectLocality_optional;
      typedef ::xsd::cxx::tree::traits< SubjectLocality_type, wchar_t > SubjectLocality_traits;

      const SubjectLocality_optional&
      SubjectLocality () const;

      SubjectLocality_optional&
      SubjectLocality ();

      void
      SubjectLocality (const SubjectLocality_type& x);

      void
      SubjectLocality (const SubjectLocality_optional& x);

      void
      SubjectLocality (::std::auto_ptr< SubjectLocality_type > p);

      // AuthnContext
      // 
      typedef ::saml2::assertion::AuthnContextType AuthnContext_type;
      typedef ::xsd::cxx::tree::traits< AuthnContext_type, wchar_t > AuthnContext_traits;

      const AuthnContext_type&
      AuthnContext () const;

      AuthnContext_type&
      AuthnContext ();

      void
      AuthnContext (const AuthnContext_type& x);

      void
      AuthnContext (::std::auto_ptr< AuthnContext_type > p);

      // AuthnInstant
      // 
      typedef ::xml_schema::date_time AuthnInstant_type;
      typedef ::xsd::cxx::tree::traits< AuthnInstant_type, wchar_t > AuthnInstant_traits;

      const AuthnInstant_type&
      AuthnInstant () const;

      AuthnInstant_type&
      AuthnInstant ();

      void
      AuthnInstant (const AuthnInstant_type& x);

      void
      AuthnInstant (::std::auto_ptr< AuthnInstant_type > p);

      // SessionIndex
      // 
      typedef ::xml_schema::string SessionIndex_type;
      typedef ::xsd::cxx::tree::optional< SessionIndex_type > SessionIndex_optional;
      typedef ::xsd::cxx::tree::traits< SessionIndex_type, wchar_t > SessionIndex_traits;

      const SessionIndex_optional&
      SessionIndex () const;

      SessionIndex_optional&
      SessionIndex ();

      void
      SessionIndex (const SessionIndex_type& x);

      void
      SessionIndex (const SessionIndex_optional& x);

      void
      SessionIndex (::std::auto_ptr< SessionIndex_type > p);

      // SessionNotOnOrAfter
      // 
      typedef ::xml_schema::date_time SessionNotOnOrAfter_type;
      typedef ::xsd::cxx::tree::optional< SessionNotOnOrAfter_type > SessionNotOnOrAfter_optional;
      typedef ::xsd::cxx::tree::traits< SessionNotOnOrAfter_type, wchar_t > SessionNotOnOrAfter_traits;

      const SessionNotOnOrAfter_optional&
      SessionNotOnOrAfter () const;

      SessionNotOnOrAfter_optional&
      SessionNotOnOrAfter ();

      void
      SessionNotOnOrAfter (const SessionNotOnOrAfter_type& x);

      void
      SessionNotOnOrAfter (const SessionNotOnOrAfter_optional& x);

      void
      SessionNotOnOrAfter (::std::auto_ptr< SessionNotOnOrAfter_type > p);

      // Constructors.
      //
      AuthnStatementType ();

      AuthnStatementType (const AuthnContext_type&,
                          const AuthnInstant_type&);

      AuthnStatementType (::std::auto_ptr< AuthnContext_type >&,
                          const AuthnInstant_type&);

      AuthnStatementType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      AuthnStatementType (const AuthnStatementType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual AuthnStatementType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AuthnStatementType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      SubjectLocality_optional SubjectLocality_;
      ::xsd::cxx::tree::one< AuthnContext_type > AuthnContext_;
      ::xsd::cxx::tree::one< AuthnInstant_type > AuthnInstant_;
      SessionIndex_optional SessionIndex_;
      SessionNotOnOrAfter_optional SessionNotOnOrAfter_;
    };

    class SubjectLocalityType: public ::xml_schema::type
    {
      public:
      // Address
      // 
      typedef ::xml_schema::string Address_type;
      typedef ::xsd::cxx::tree::optional< Address_type > Address_optional;
      typedef ::xsd::cxx::tree::traits< Address_type, wchar_t > Address_traits;

      const Address_optional&
      Address () const;

      Address_optional&
      Address ();

      void
      Address (const Address_type& x);

      void
      Address (const Address_optional& x);

      void
      Address (::std::auto_ptr< Address_type > p);

      // DNSName
      // 
      typedef ::xml_schema::string DNSName_type;
      typedef ::xsd::cxx::tree::optional< DNSName_type > DNSName_optional;
      typedef ::xsd::cxx::tree::traits< DNSName_type, wchar_t > DNSName_traits;

      const DNSName_optional&
      DNSName () const;

      DNSName_optional&
      DNSName ();

      void
      DNSName (const DNSName_type& x);

      void
      DNSName (const DNSName_optional& x);

      void
      DNSName (::std::auto_ptr< DNSName_type > p);

      // Constructors.
      //
      SubjectLocalityType ();

      SubjectLocalityType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      SubjectLocalityType (const SubjectLocalityType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual SubjectLocalityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SubjectLocalityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Address_optional Address_;
      DNSName_optional DNSName_;
    };

    class AuthnContextType: public ::xml_schema::type
    {
      public:
      // AuthnContextClassRef
      // 
      typedef ::xml_schema::uri AuthnContextClassRef_type;
      typedef ::xsd::cxx::tree::optional< AuthnContextClassRef_type > AuthnContextClassRef_optional;
      typedef ::xsd::cxx::tree::traits< AuthnContextClassRef_type, wchar_t > AuthnContextClassRef_traits;

      const AuthnContextClassRef_optional&
      AuthnContextClassRef () const;

      AuthnContextClassRef_optional&
      AuthnContextClassRef ();

      void
      AuthnContextClassRef (const AuthnContextClassRef_type& x);

      void
      AuthnContextClassRef (const AuthnContextClassRef_optional& x);

      void
      AuthnContextClassRef (::std::auto_ptr< AuthnContextClassRef_type > p);

      // AuthnContextDecl
      // 
      typedef ::xml_schema::type AuthnContextDecl_type;
      typedef ::xsd::cxx::tree::optional< AuthnContextDecl_type > AuthnContextDecl_optional;
      typedef ::xsd::cxx::tree::traits< AuthnContextDecl_type, wchar_t > AuthnContextDecl_traits;

      const AuthnContextDecl_optional&
      AuthnContextDecl () const;

      AuthnContextDecl_optional&
      AuthnContextDecl ();

      void
      AuthnContextDecl (const AuthnContextDecl_type& x);

      void
      AuthnContextDecl (const AuthnContextDecl_optional& x);

      void
      AuthnContextDecl (::std::auto_ptr< AuthnContextDecl_type > p);

      // AuthnContextDeclRef
      // 
      typedef ::xml_schema::uri AuthnContextDeclRef_type;
      typedef ::xsd::cxx::tree::optional< AuthnContextDeclRef_type > AuthnContextDeclRef_optional;
      typedef ::xsd::cxx::tree::traits< AuthnContextDeclRef_type, wchar_t > AuthnContextDeclRef_traits;

      const AuthnContextDeclRef_optional&
      AuthnContextDeclRef () const;

      AuthnContextDeclRef_optional&
      AuthnContextDeclRef ();

      void
      AuthnContextDeclRef (const AuthnContextDeclRef_type& x);

      void
      AuthnContextDeclRef (const AuthnContextDeclRef_optional& x);

      void
      AuthnContextDeclRef (::std::auto_ptr< AuthnContextDeclRef_type > p);

      // AuthenticatingAuthority
      // 
      typedef ::xml_schema::uri AuthenticatingAuthority_type;
      typedef ::xsd::cxx::tree::sequence< AuthenticatingAuthority_type > AuthenticatingAuthority_sequence;
      typedef AuthenticatingAuthority_sequence::iterator AuthenticatingAuthority_iterator;
      typedef AuthenticatingAuthority_sequence::const_iterator AuthenticatingAuthority_const_iterator;
      typedef ::xsd::cxx::tree::traits< AuthenticatingAuthority_type, wchar_t > AuthenticatingAuthority_traits;

      const AuthenticatingAuthority_sequence&
      AuthenticatingAuthority () const;

      AuthenticatingAuthority_sequence&
      AuthenticatingAuthority ();

      void
      AuthenticatingAuthority (const AuthenticatingAuthority_sequence& s);

      // Constructors.
      //
      AuthnContextType ();

      AuthnContextType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      AuthnContextType (const AuthnContextType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual AuthnContextType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AuthnContextType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      AuthnContextClassRef_optional AuthnContextClassRef_;
      AuthnContextDecl_optional AuthnContextDecl_;
      AuthnContextDeclRef_optional AuthnContextDeclRef_;
      AuthenticatingAuthority_sequence AuthenticatingAuthority_;
    };

    class AuthzDecisionStatementType: public ::saml2::assertion::StatementAbstractType
    {
      public:
      // Action
      // 
      typedef ::saml2::assertion::ActionType Action_type;
      typedef ::xsd::cxx::tree::sequence< Action_type > Action_sequence;
      typedef Action_sequence::iterator Action_iterator;
      typedef Action_sequence::const_iterator Action_const_iterator;
      typedef ::xsd::cxx::tree::traits< Action_type, wchar_t > Action_traits;

      const Action_sequence&
      Action () const;

      Action_sequence&
      Action ();

      void
      Action (const Action_sequence& s);

      // Evidence
      // 
      typedef ::saml2::assertion::EvidenceType Evidence_type;
      typedef ::xsd::cxx::tree::optional< Evidence_type > Evidence_optional;
      typedef ::xsd::cxx::tree::traits< Evidence_type, wchar_t > Evidence_traits;

      const Evidence_optional&
      Evidence () const;

      Evidence_optional&
      Evidence ();

      void
      Evidence (const Evidence_type& x);

      void
      Evidence (const Evidence_optional& x);

      void
      Evidence (::std::auto_ptr< Evidence_type > p);

      // Resource
      // 
      typedef ::xml_schema::uri Resource_type;
      typedef ::xsd::cxx::tree::traits< Resource_type, wchar_t > Resource_traits;

      const Resource_type&
      Resource () const;

      Resource_type&
      Resource ();

      void
      Resource (const Resource_type& x);

      void
      Resource (::std::auto_ptr< Resource_type > p);

      // Decision
      // 
      typedef ::saml2::assertion::DecisionType Decision_type;
      typedef ::xsd::cxx::tree::traits< Decision_type, wchar_t > Decision_traits;

      const Decision_type&
      Decision () const;

      Decision_type&
      Decision ();

      void
      Decision (const Decision_type& x);

      void
      Decision (::std::auto_ptr< Decision_type > p);

      // Constructors.
      //
      AuthzDecisionStatementType ();

      AuthzDecisionStatementType (const Resource_type&,
                                  const Decision_type&);

      AuthzDecisionStatementType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      AuthzDecisionStatementType (const AuthzDecisionStatementType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual AuthzDecisionStatementType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AuthzDecisionStatementType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Action_sequence Action_;
      Evidence_optional Evidence_;
      ::xsd::cxx::tree::one< Resource_type > Resource_;
      ::xsd::cxx::tree::one< Decision_type > Decision_;
    };

    class DecisionType: public ::xml_schema::string
    {
      public:
      enum value
      {
        Permit,
        Deny,
        Indeterminate
      };

      DecisionType ();

      DecisionType (value v);

      DecisionType (const wchar_t* v);

      DecisionType (const ::std::wstring& v);

      DecisionType (const ::xml_schema::string& v);

      DecisionType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      DecisionType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      DecisionType (const ::std::wstring& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      DecisionType (const DecisionType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual DecisionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DecisionType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_DecisionType_convert ();
      }

      protected:
      value
      _xsd_DecisionType_convert () const;

      public:
      static const wchar_t* const _xsd_DecisionType_literals_[3];
      static const value _xsd_DecisionType_indexes_[3];
    };

    class ActionType: public ::xml_schema::string
    {
      public:
      // Namespace
      // 
      typedef ::xml_schema::uri Namespace_type;
      typedef ::xsd::cxx::tree::traits< Namespace_type, wchar_t > Namespace_traits;

      const Namespace_type&
      Namespace () const;

      Namespace_type&
      Namespace ();

      void
      Namespace (const Namespace_type& x);

      void
      Namespace (::std::auto_ptr< Namespace_type > p);

      // Constructors.
      //
      ActionType ();

      ActionType (const Namespace_type&);

      ActionType (const wchar_t*,
                  const Namespace_type&);

      ActionType (const ::std::wstring&,
                  const Namespace_type&);

      ActionType (const ::xml_schema::string&,
                  const Namespace_type&);

      ActionType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      ActionType (const ActionType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual ActionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ActionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Namespace_type > Namespace_;
    };

    class EvidenceType: public ::xml_schema::type
    {
      public:
      // AssertionIDRef
      // 
      typedef ::xml_schema::ncname AssertionIDRef_type;
      typedef ::xsd::cxx::tree::sequence< AssertionIDRef_type > AssertionIDRef_sequence;
      typedef AssertionIDRef_sequence::iterator AssertionIDRef_iterator;
      typedef AssertionIDRef_sequence::const_iterator AssertionIDRef_const_iterator;
      typedef ::xsd::cxx::tree::traits< AssertionIDRef_type, wchar_t > AssertionIDRef_traits;

      const AssertionIDRef_sequence&
      AssertionIDRef () const;

      AssertionIDRef_sequence&
      AssertionIDRef ();

      void
      AssertionIDRef (const AssertionIDRef_sequence& s);

      // AssertionURIRef
      // 
      typedef ::xml_schema::uri AssertionURIRef_type;
      typedef ::xsd::cxx::tree::sequence< AssertionURIRef_type > AssertionURIRef_sequence;
      typedef AssertionURIRef_sequence::iterator AssertionURIRef_iterator;
      typedef AssertionURIRef_sequence::const_iterator AssertionURIRef_const_iterator;
      typedef ::xsd::cxx::tree::traits< AssertionURIRef_type, wchar_t > AssertionURIRef_traits;

      const AssertionURIRef_sequence&
      AssertionURIRef () const;

      AssertionURIRef_sequence&
      AssertionURIRef ();

      void
      AssertionURIRef (const AssertionURIRef_sequence& s);

      // Assertion
      // 
      typedef ::saml2::assertion::AssertionType Assertion_type;
      typedef ::xsd::cxx::tree::sequence< Assertion_type > Assertion_sequence;
      typedef Assertion_sequence::iterator Assertion_iterator;
      typedef Assertion_sequence::const_iterator Assertion_const_iterator;
      typedef ::xsd::cxx::tree::traits< Assertion_type, wchar_t > Assertion_traits;

      const Assertion_sequence&
      Assertion () const;

      Assertion_sequence&
      Assertion ();

      void
      Assertion (const Assertion_sequence& s);

      // EncryptedAssertion
      // 
      typedef ::saml2::assertion::EncryptedElementType EncryptedAssertion_type;
      typedef ::xsd::cxx::tree::sequence< EncryptedAssertion_type > EncryptedAssertion_sequence;
      typedef EncryptedAssertion_sequence::iterator EncryptedAssertion_iterator;
      typedef EncryptedAssertion_sequence::const_iterator EncryptedAssertion_const_iterator;
      typedef ::xsd::cxx::tree::traits< EncryptedAssertion_type, wchar_t > EncryptedAssertion_traits;

      const EncryptedAssertion_sequence&
      EncryptedAssertion () const;

      EncryptedAssertion_sequence&
      EncryptedAssertion ();

      void
      EncryptedAssertion (const EncryptedAssertion_sequence& s);

      // Constructors.
      //
      EvidenceType ();

      EvidenceType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      EvidenceType (const EvidenceType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual EvidenceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~EvidenceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      AssertionIDRef_sequence AssertionIDRef_;
      AssertionURIRef_sequence AssertionURIRef_;
      Assertion_sequence Assertion_;
      EncryptedAssertion_sequence EncryptedAssertion_;
    };

    class AttributeStatementType: public ::saml2::assertion::StatementAbstractType
    {
      public:
      // Attribute
      // 
      typedef ::saml2::assertion::AttributeType Attribute_type;
      typedef ::xsd::cxx::tree::sequence< Attribute_type > Attribute_sequence;
      typedef Attribute_sequence::iterator Attribute_iterator;
      typedef Attribute_sequence::const_iterator Attribute_const_iterator;
      typedef ::xsd::cxx::tree::traits< Attribute_type, wchar_t > Attribute_traits;

      const Attribute_sequence&
      Attribute () const;

      Attribute_sequence&
      Attribute ();

      void
      Attribute (const Attribute_sequence& s);

      // EncryptedAttribute
      // 
      typedef ::saml2::assertion::EncryptedElementType EncryptedAttribute_type;
      typedef ::xsd::cxx::tree::sequence< EncryptedAttribute_type > EncryptedAttribute_sequence;
      typedef EncryptedAttribute_sequence::iterator EncryptedAttribute_iterator;
      typedef EncryptedAttribute_sequence::const_iterator EncryptedAttribute_const_iterator;
      typedef ::xsd::cxx::tree::traits< EncryptedAttribute_type, wchar_t > EncryptedAttribute_traits;

      const EncryptedAttribute_sequence&
      EncryptedAttribute () const;

      EncryptedAttribute_sequence&
      EncryptedAttribute ();

      void
      EncryptedAttribute (const EncryptedAttribute_sequence& s);

      // Constructors.
      //
      AttributeStatementType ();

      AttributeStatementType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      AttributeStatementType (const AttributeStatementType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual AttributeStatementType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AttributeStatementType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Attribute_sequence Attribute_;
      EncryptedAttribute_sequence EncryptedAttribute_;
    };

    class AttributeType: public ::xml_schema::type
    {
      public:
      // AttributeValue
      // 
      typedef ::xml_schema::type AttributeValue_type;
      typedef ::xsd::cxx::tree::sequence< AttributeValue_type > AttributeValue_sequence;
      typedef AttributeValue_sequence::iterator AttributeValue_iterator;
      typedef AttributeValue_sequence::const_iterator AttributeValue_const_iterator;
      typedef ::xsd::cxx::tree::traits< AttributeValue_type, wchar_t > AttributeValue_traits;

      const AttributeValue_sequence&
      AttributeValue () const;

      AttributeValue_sequence&
      AttributeValue ();

      void
      AttributeValue (const AttributeValue_sequence& s);

      // Name
      // 
      typedef ::xml_schema::string Name_type;
      typedef ::xsd::cxx::tree::traits< Name_type, wchar_t > Name_traits;

      const Name_type&
      Name () const;

      Name_type&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (::std::auto_ptr< Name_type > p);

      // NameFormat
      // 
      typedef ::xml_schema::uri NameFormat_type;
      typedef ::xsd::cxx::tree::optional< NameFormat_type > NameFormat_optional;
      typedef ::xsd::cxx::tree::traits< NameFormat_type, wchar_t > NameFormat_traits;

      const NameFormat_optional&
      NameFormat () const;

      NameFormat_optional&
      NameFormat ();

      void
      NameFormat (const NameFormat_type& x);

      void
      NameFormat (const NameFormat_optional& x);

      void
      NameFormat (::std::auto_ptr< NameFormat_type > p);

      // FriendlyName
      // 
      typedef ::xml_schema::string FriendlyName_type;
      typedef ::xsd::cxx::tree::optional< FriendlyName_type > FriendlyName_optional;
      typedef ::xsd::cxx::tree::traits< FriendlyName_type, wchar_t > FriendlyName_traits;

      const FriendlyName_optional&
      FriendlyName () const;

      FriendlyName_optional&
      FriendlyName ();

      void
      FriendlyName (const FriendlyName_type& x);

      void
      FriendlyName (const FriendlyName_optional& x);

      void
      FriendlyName (::std::auto_ptr< FriendlyName_type > p);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      AttributeType ();

      AttributeType (const Name_type&);

      AttributeType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      AttributeType (const AttributeType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual AttributeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AttributeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      AttributeValue_sequence AttributeValue_;
      ::xsd::cxx::tree::one< Name_type > Name_;
      NameFormat_optional NameFormat_;
      FriendlyName_optional FriendlyName_;
      any_attribute_set any_attribute_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace saml2
{
  namespace assertion
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::BaseIDAbstractType >
    BaseID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    NameID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (const ::std::wstring& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (const ::std::wstring& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (const ::std::wstring& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::std::istream& is,
                 const ::std::wstring& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::NameIDType >
    Issuer (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (const ::std::wstring& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (const ::std::wstring& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (const ::std::wstring& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::std::istream& is,
                    const ::std::wstring& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::ncname >
    AssertionIDRef (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (const ::std::wstring& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (const ::std::wstring& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (const ::std::wstring& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::std::istream& is,
                     const ::std::wstring& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AssertionURIRef (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (const ::std::wstring& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (const ::std::wstring& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (const ::std::wstring& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::std::istream& is,
               const ::std::wstring& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AssertionType >
    Assertion (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (const ::std::wstring& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (const ::std::wstring& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (const ::std::wstring& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::std::istream& is,
             const ::std::wstring& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectType >
    Subject (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (const ::std::wstring& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (const ::std::wstring& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (const ::std::wstring& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::std::istream& is,
                         const ::std::wstring& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationType >
    SubjectConfirmation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (const ::std::wstring& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (const ::std::wstring& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (const ::std::wstring& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::std::istream& is,
                             const ::std::wstring& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::std::istream& is,
                             const ::std::wstring& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::std::istream& is,
                             const ::std::wstring& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectConfirmationDataType >
    SubjectConfirmationData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (const ::std::wstring& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (const ::std::wstring& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (const ::std::wstring& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::std::istream& is,
                const ::std::wstring& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionsType >
    Conditions (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (const ::std::wstring& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (const ::std::wstring& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (const ::std::wstring& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::std::istream& is,
               const ::std::wstring& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ConditionAbstractType >
    Condition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (const ::std::wstring& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (const ::std::wstring& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (const ::std::wstring& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::std::istream& is,
                         const ::std::wstring& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AudienceRestrictionType >
    AudienceRestriction (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (const ::std::wstring& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (const ::std::wstring& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (const ::std::wstring& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::std::istream& is,
              const ::std::wstring& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    Audience (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (const ::std::wstring& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (const ::std::wstring& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (const ::std::wstring& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::std::istream& is,
                const ::std::wstring& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::OneTimeUseType >
    OneTimeUse (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (const ::std::wstring& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (const ::std::wstring& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (const ::std::wstring& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::std::istream& is,
                      const ::std::wstring& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ProxyRestrictionType >
    ProxyRestriction (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AdviceType >
    Advice (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (const ::std::wstring& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (const ::std::wstring& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (const ::std::wstring& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::std::istream& is,
                        const ::std::wstring& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAssertion (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (const ::std::wstring& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (const ::std::wstring& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (const ::std::wstring& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::std::istream& is,
               const ::std::wstring& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::StatementAbstractType >
    Statement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (const ::std::wstring& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (const ::std::wstring& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (const ::std::wstring& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::std::istream& is,
                    const ::std::wstring& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnStatementType >
    AuthnStatement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (const ::std::wstring& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (const ::std::wstring& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (const ::std::wstring& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::std::istream& is,
                     const ::std::wstring& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::SubjectLocalityType >
    SubjectLocality (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (const ::std::wstring& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (const ::std::wstring& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (const ::std::wstring& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::std::istream& is,
                  const ::std::wstring& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthnContextType >
    AuthnContext (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (const ::std::wstring& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (const ::std::wstring& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (const ::std::wstring& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::std::istream& is,
                          const ::std::wstring& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::std::istream& is,
                          const ::std::wstring& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::std::istream& is,
                          const ::std::wstring& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextClassRef (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (const ::std::wstring& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (const ::std::wstring& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (const ::std::wstring& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::std::istream& is,
                         const ::std::wstring& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthnContextDeclRef (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (const ::std::wstring& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (const ::std::wstring& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (const ::std::wstring& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::std::istream& is,
                      const ::std::wstring& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AuthnContextDecl (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (const ::std::wstring& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (const ::std::wstring& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (const ::std::wstring& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::std::istream& is,
                             const ::std::wstring& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::std::istream& is,
                             const ::std::wstring& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::std::istream& is,
                             const ::std::wstring& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AuthenticatingAuthority (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (const ::std::wstring& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (const ::std::wstring& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (const ::std::wstring& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::std::istream& is,
                            const ::std::wstring& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::std::istream& is,
                            const ::std::wstring& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::std::istream& is,
                            const ::std::wstring& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AuthzDecisionStatementType >
    AuthzDecisionStatement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::ActionType >
    Action (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (const ::std::wstring& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (const ::std::wstring& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (const ::std::wstring& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::std::istream& is,
              const ::std::wstring& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EvidenceType >
    Evidence (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (const ::std::wstring& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (const ::std::wstring& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (const ::std::wstring& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::std::istream& is,
                        const ::std::wstring& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeStatementType >
    AttributeStatement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (const ::std::wstring& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (const ::std::wstring& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (const ::std::wstring& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::std::istream& is,
               const ::std::wstring& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::AttributeType >
    Attribute (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (const ::std::wstring& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (const ::std::wstring& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (const ::std::wstring& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::type >
    AttributeValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (const ::std::wstring& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (const ::std::wstring& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (const ::std::wstring& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::std::istream& is,
                        const ::std::wstring& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    EncryptedAttribute (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace saml2
{
  namespace assertion
  {
    // Serialize to std::ostream.
    //

    void
    BaseID (::std::ostream& os,
            const ::saml2::assertion::BaseIDAbstractType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    BaseID (::std::ostream& os,
            const ::saml2::assertion::BaseIDAbstractType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    BaseID (::std::ostream& os,
            const ::saml2::assertion::BaseIDAbstractType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    BaseID (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::BaseIDAbstractType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    BaseID (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::BaseIDAbstractType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    BaseID (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::BaseIDAbstractType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    BaseID (::xercesc::DOMDocument& d,
            const ::saml2::assertion::BaseIDAbstractType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    BaseID (const ::saml2::assertion::BaseIDAbstractType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const BaseIDAbstractType&);

    // Serialize to std::ostream.
    //

    void
    NameID (::std::ostream& os,
            const ::saml2::assertion::NameIDType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    NameID (::std::ostream& os,
            const ::saml2::assertion::NameIDType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    NameID (::std::ostream& os,
            const ::saml2::assertion::NameIDType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    NameID (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::NameIDType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    NameID (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::NameIDType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    NameID (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::NameIDType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    NameID (::xercesc::DOMDocument& d,
            const ::saml2::assertion::NameIDType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    NameID (const ::saml2::assertion::NameIDType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const NameIDType&);

    void
    operator<< (::xercesc::DOMElement&, const EncryptedElementType&);

    // Serialize to std::ostream.
    //

    void
    EncryptedID (::std::ostream& os,
                 const ::saml2::assertion::EncryptedElementType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    EncryptedID (::std::ostream& os,
                 const ::saml2::assertion::EncryptedElementType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    EncryptedID (::std::ostream& os,
                 const ::saml2::assertion::EncryptedElementType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EncryptedID (::xercesc::XMLFormatTarget& ft,
                 const ::saml2::assertion::EncryptedElementType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    EncryptedID (::xercesc::XMLFormatTarget& ft,
                 const ::saml2::assertion::EncryptedElementType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    EncryptedID (::xercesc::XMLFormatTarget& ft,
                 const ::saml2::assertion::EncryptedElementType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EncryptedID (::xercesc::DOMDocument& d,
                 const ::saml2::assertion::EncryptedElementType& x,
                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptedID (const ::saml2::assertion::EncryptedElementType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Issuer (::std::ostream& os,
            const ::saml2::assertion::NameIDType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Issuer (::std::ostream& os,
            const ::saml2::assertion::NameIDType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Issuer (::std::ostream& os,
            const ::saml2::assertion::NameIDType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Issuer (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::NameIDType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Issuer (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::NameIDType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Issuer (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::NameIDType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Issuer (::xercesc::DOMDocument& d,
            const ::saml2::assertion::NameIDType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Issuer (const ::saml2::assertion::NameIDType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AssertionIDRef (::std::ostream& os,
                    const ::xml_schema::ncname& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AssertionIDRef (::std::ostream& os,
                    const ::xml_schema::ncname& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AssertionIDRef (::std::ostream& os,
                    const ::xml_schema::ncname& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AssertionIDRef (::xercesc::XMLFormatTarget& ft,
                    const ::xml_schema::ncname& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AssertionIDRef (::xercesc::XMLFormatTarget& ft,
                    const ::xml_schema::ncname& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AssertionIDRef (::xercesc::XMLFormatTarget& ft,
                    const ::xml_schema::ncname& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AssertionIDRef (::xercesc::DOMDocument& d,
                    const ::xml_schema::ncname& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AssertionIDRef (const ::xml_schema::ncname& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AssertionURIRef (::std::ostream& os,
                     const ::xml_schema::uri& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AssertionURIRef (::std::ostream& os,
                     const ::xml_schema::uri& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AssertionURIRef (::std::ostream& os,
                     const ::xml_schema::uri& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AssertionURIRef (::xercesc::XMLFormatTarget& ft,
                     const ::xml_schema::uri& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AssertionURIRef (::xercesc::XMLFormatTarget& ft,
                     const ::xml_schema::uri& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AssertionURIRef (::xercesc::XMLFormatTarget& ft,
                     const ::xml_schema::uri& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AssertionURIRef (::xercesc::DOMDocument& d,
                     const ::xml_schema::uri& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AssertionURIRef (const ::xml_schema::uri& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Assertion (::std::ostream& os,
               const ::saml2::assertion::AssertionType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Assertion (::std::ostream& os,
               const ::saml2::assertion::AssertionType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Assertion (::std::ostream& os,
               const ::saml2::assertion::AssertionType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Assertion (::xercesc::XMLFormatTarget& ft,
               const ::saml2::assertion::AssertionType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Assertion (::xercesc::XMLFormatTarget& ft,
               const ::saml2::assertion::AssertionType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Assertion (::xercesc::XMLFormatTarget& ft,
               const ::saml2::assertion::AssertionType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Assertion (::xercesc::DOMDocument& d,
               const ::saml2::assertion::AssertionType& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Assertion (const ::saml2::assertion::AssertionType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AssertionType&);

    // Serialize to std::ostream.
    //

    void
    Subject (::std::ostream& os,
             const ::saml2::assertion::SubjectType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Subject (::std::ostream& os,
             const ::saml2::assertion::SubjectType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Subject (::std::ostream& os,
             const ::saml2::assertion::SubjectType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Subject (::xercesc::XMLFormatTarget& ft,
             const ::saml2::assertion::SubjectType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Subject (::xercesc::XMLFormatTarget& ft,
             const ::saml2::assertion::SubjectType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Subject (::xercesc::XMLFormatTarget& ft,
             const ::saml2::assertion::SubjectType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Subject (::xercesc::DOMDocument& d,
             const ::saml2::assertion::SubjectType& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Subject (const ::saml2::assertion::SubjectType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SubjectType&);

    // Serialize to std::ostream.
    //

    void
    SubjectConfirmation (::std::ostream& os,
                         const ::saml2::assertion::SubjectConfirmationType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SubjectConfirmation (::std::ostream& os,
                         const ::saml2::assertion::SubjectConfirmationType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SubjectConfirmation (::std::ostream& os,
                         const ::saml2::assertion::SubjectConfirmationType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SubjectConfirmation (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::assertion::SubjectConfirmationType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SubjectConfirmation (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::assertion::SubjectConfirmationType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SubjectConfirmation (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::assertion::SubjectConfirmationType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SubjectConfirmation (::xercesc::DOMDocument& d,
                         const ::saml2::assertion::SubjectConfirmationType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SubjectConfirmation (const ::saml2::assertion::SubjectConfirmationType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SubjectConfirmationType&);

    // Serialize to std::ostream.
    //

    void
    SubjectConfirmationData (::std::ostream& os,
                             const ::saml2::assertion::SubjectConfirmationDataType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    SubjectConfirmationData (::std::ostream& os,
                             const ::saml2::assertion::SubjectConfirmationDataType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    SubjectConfirmationData (::std::ostream& os,
                             const ::saml2::assertion::SubjectConfirmationDataType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SubjectConfirmationData (::xercesc::XMLFormatTarget& ft,
                             const ::saml2::assertion::SubjectConfirmationDataType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    SubjectConfirmationData (::xercesc::XMLFormatTarget& ft,
                             const ::saml2::assertion::SubjectConfirmationDataType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    SubjectConfirmationData (::xercesc::XMLFormatTarget& ft,
                             const ::saml2::assertion::SubjectConfirmationDataType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SubjectConfirmationData (::xercesc::DOMDocument& d,
                             const ::saml2::assertion::SubjectConfirmationDataType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SubjectConfirmationData (const ::saml2::assertion::SubjectConfirmationDataType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SubjectConfirmationDataType&);

    void
    operator<< (::xercesc::DOMElement&, const KeyInfoConfirmationDataType&);

    // Serialize to std::ostream.
    //

    void
    Conditions (::std::ostream& os,
                const ::saml2::assertion::ConditionsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Conditions (::std::ostream& os,
                const ::saml2::assertion::ConditionsType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Conditions (::std::ostream& os,
                const ::saml2::assertion::ConditionsType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Conditions (::xercesc::XMLFormatTarget& ft,
                const ::saml2::assertion::ConditionsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Conditions (::xercesc::XMLFormatTarget& ft,
                const ::saml2::assertion::ConditionsType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Conditions (::xercesc::XMLFormatTarget& ft,
                const ::saml2::assertion::ConditionsType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Conditions (::xercesc::DOMDocument& d,
                const ::saml2::assertion::ConditionsType& x,
                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Conditions (const ::saml2::assertion::ConditionsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ConditionsType&);

    // Serialize to std::ostream.
    //

    void
    Condition (::std::ostream& os,
               const ::saml2::assertion::ConditionAbstractType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Condition (::std::ostream& os,
               const ::saml2::assertion::ConditionAbstractType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Condition (::std::ostream& os,
               const ::saml2::assertion::ConditionAbstractType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Condition (::xercesc::XMLFormatTarget& ft,
               const ::saml2::assertion::ConditionAbstractType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Condition (::xercesc::XMLFormatTarget& ft,
               const ::saml2::assertion::ConditionAbstractType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Condition (::xercesc::XMLFormatTarget& ft,
               const ::saml2::assertion::ConditionAbstractType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Condition (::xercesc::DOMDocument& d,
               const ::saml2::assertion::ConditionAbstractType& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Condition (const ::saml2::assertion::ConditionAbstractType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ConditionAbstractType&);

    void
    operator<< (::xercesc::DOMAttr&, const ConditionAbstractType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ConditionAbstractType&);

    // Serialize to std::ostream.
    //

    void
    AudienceRestriction (::std::ostream& os,
                         const ::saml2::assertion::AudienceRestrictionType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    AudienceRestriction (::std::ostream& os,
                         const ::saml2::assertion::AudienceRestrictionType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    AudienceRestriction (::std::ostream& os,
                         const ::saml2::assertion::AudienceRestrictionType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AudienceRestriction (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::assertion::AudienceRestrictionType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    AudienceRestriction (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::assertion::AudienceRestrictionType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    AudienceRestriction (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::assertion::AudienceRestrictionType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AudienceRestriction (::xercesc::DOMDocument& d,
                         const ::saml2::assertion::AudienceRestrictionType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AudienceRestriction (const ::saml2::assertion::AudienceRestrictionType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AudienceRestrictionType&);

    // Serialize to std::ostream.
    //

    void
    Audience (::std::ostream& os,
              const ::xml_schema::uri& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Audience (::std::ostream& os,
              const ::xml_schema::uri& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Audience (::std::ostream& os,
              const ::xml_schema::uri& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Audience (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::uri& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Audience (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::uri& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Audience (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::uri& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Audience (::xercesc::DOMDocument& d,
              const ::xml_schema::uri& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Audience (const ::xml_schema::uri& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OneTimeUse (::std::ostream& os,
                const ::saml2::assertion::OneTimeUseType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    OneTimeUse (::std::ostream& os,
                const ::saml2::assertion::OneTimeUseType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    OneTimeUse (::std::ostream& os,
                const ::saml2::assertion::OneTimeUseType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OneTimeUse (::xercesc::XMLFormatTarget& ft,
                const ::saml2::assertion::OneTimeUseType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    OneTimeUse (::xercesc::XMLFormatTarget& ft,
                const ::saml2::assertion::OneTimeUseType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    OneTimeUse (::xercesc::XMLFormatTarget& ft,
                const ::saml2::assertion::OneTimeUseType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OneTimeUse (::xercesc::DOMDocument& d,
                const ::saml2::assertion::OneTimeUseType& x,
                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OneTimeUse (const ::saml2::assertion::OneTimeUseType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const OneTimeUseType&);

    void
    operator<< (::xercesc::DOMAttr&, const OneTimeUseType&);

    void
    operator<< (::xml_schema::list_stream&,
                const OneTimeUseType&);

    // Serialize to std::ostream.
    //

    void
    ProxyRestriction (::std::ostream& os,
                      const ::saml2::assertion::ProxyRestrictionType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ProxyRestriction (::std::ostream& os,
                      const ::saml2::assertion::ProxyRestrictionType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ProxyRestriction (::std::ostream& os,
                      const ::saml2::assertion::ProxyRestrictionType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ProxyRestriction (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::assertion::ProxyRestrictionType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ProxyRestriction (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::assertion::ProxyRestrictionType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ProxyRestriction (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::assertion::ProxyRestrictionType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ProxyRestriction (::xercesc::DOMDocument& d,
                      const ::saml2::assertion::ProxyRestrictionType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ProxyRestriction (const ::saml2::assertion::ProxyRestrictionType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ProxyRestrictionType&);

    // Serialize to std::ostream.
    //

    void
    Advice (::std::ostream& os,
            const ::saml2::assertion::AdviceType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Advice (::std::ostream& os,
            const ::saml2::assertion::AdviceType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Advice (::std::ostream& os,
            const ::saml2::assertion::AdviceType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Advice (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::AdviceType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Advice (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::AdviceType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Advice (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::AdviceType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Advice (::xercesc::DOMDocument& d,
            const ::saml2::assertion::AdviceType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Advice (const ::saml2::assertion::AdviceType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AdviceType&);

    // Serialize to std::ostream.
    //

    void
    EncryptedAssertion (::std::ostream& os,
                        const ::saml2::assertion::EncryptedElementType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EncryptedAssertion (::std::ostream& os,
                        const ::saml2::assertion::EncryptedElementType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EncryptedAssertion (::std::ostream& os,
                        const ::saml2::assertion::EncryptedElementType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EncryptedAssertion (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::assertion::EncryptedElementType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EncryptedAssertion (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::assertion::EncryptedElementType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EncryptedAssertion (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::assertion::EncryptedElementType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EncryptedAssertion (::xercesc::DOMDocument& d,
                        const ::saml2::assertion::EncryptedElementType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptedAssertion (const ::saml2::assertion::EncryptedElementType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Statement (::std::ostream& os,
               const ::saml2::assertion::StatementAbstractType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Statement (::std::ostream& os,
               const ::saml2::assertion::StatementAbstractType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Statement (::std::ostream& os,
               const ::saml2::assertion::StatementAbstractType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Statement (::xercesc::XMLFormatTarget& ft,
               const ::saml2::assertion::StatementAbstractType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Statement (::xercesc::XMLFormatTarget& ft,
               const ::saml2::assertion::StatementAbstractType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Statement (::xercesc::XMLFormatTarget& ft,
               const ::saml2::assertion::StatementAbstractType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Statement (::xercesc::DOMDocument& d,
               const ::saml2::assertion::StatementAbstractType& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Statement (const ::saml2::assertion::StatementAbstractType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const StatementAbstractType&);

    void
    operator<< (::xercesc::DOMAttr&, const StatementAbstractType&);

    void
    operator<< (::xml_schema::list_stream&,
                const StatementAbstractType&);

    // Serialize to std::ostream.
    //

    void
    AuthnStatement (::std::ostream& os,
                    const ::saml2::assertion::AuthnStatementType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AuthnStatement (::std::ostream& os,
                    const ::saml2::assertion::AuthnStatementType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AuthnStatement (::std::ostream& os,
                    const ::saml2::assertion::AuthnStatementType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AuthnStatement (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::assertion::AuthnStatementType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AuthnStatement (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::assertion::AuthnStatementType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AuthnStatement (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::assertion::AuthnStatementType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AuthnStatement (::xercesc::DOMDocument& d,
                    const ::saml2::assertion::AuthnStatementType& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnStatement (const ::saml2::assertion::AuthnStatementType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AuthnStatementType&);

    // Serialize to std::ostream.
    //

    void
    SubjectLocality (::std::ostream& os,
                     const ::saml2::assertion::SubjectLocalityType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SubjectLocality (::std::ostream& os,
                     const ::saml2::assertion::SubjectLocalityType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SubjectLocality (::std::ostream& os,
                     const ::saml2::assertion::SubjectLocalityType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SubjectLocality (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::assertion::SubjectLocalityType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SubjectLocality (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::assertion::SubjectLocalityType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SubjectLocality (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::assertion::SubjectLocalityType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SubjectLocality (::xercesc::DOMDocument& d,
                     const ::saml2::assertion::SubjectLocalityType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SubjectLocality (const ::saml2::assertion::SubjectLocalityType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SubjectLocalityType&);

    // Serialize to std::ostream.
    //

    void
    AuthnContext (::std::ostream& os,
                  const ::saml2::assertion::AuthnContextType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    AuthnContext (::std::ostream& os,
                  const ::saml2::assertion::AuthnContextType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    AuthnContext (::std::ostream& os,
                  const ::saml2::assertion::AuthnContextType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AuthnContext (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::assertion::AuthnContextType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    AuthnContext (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::assertion::AuthnContextType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    AuthnContext (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::assertion::AuthnContextType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AuthnContext (::xercesc::DOMDocument& d,
                  const ::saml2::assertion::AuthnContextType& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnContext (const ::saml2::assertion::AuthnContextType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AuthnContextType&);

    // Serialize to std::ostream.
    //

    void
    AuthnContextClassRef (::std::ostream& os,
                          const ::xml_schema::uri& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    AuthnContextClassRef (::std::ostream& os,
                          const ::xml_schema::uri& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    AuthnContextClassRef (::std::ostream& os,
                          const ::xml_schema::uri& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AuthnContextClassRef (::xercesc::XMLFormatTarget& ft,
                          const ::xml_schema::uri& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    AuthnContextClassRef (::xercesc::XMLFormatTarget& ft,
                          const ::xml_schema::uri& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    AuthnContextClassRef (::xercesc::XMLFormatTarget& ft,
                          const ::xml_schema::uri& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AuthnContextClassRef (::xercesc::DOMDocument& d,
                          const ::xml_schema::uri& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnContextClassRef (const ::xml_schema::uri& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AuthnContextDeclRef (::std::ostream& os,
                         const ::xml_schema::uri& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    AuthnContextDeclRef (::std::ostream& os,
                         const ::xml_schema::uri& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    AuthnContextDeclRef (::std::ostream& os,
                         const ::xml_schema::uri& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AuthnContextDeclRef (::xercesc::XMLFormatTarget& ft,
                         const ::xml_schema::uri& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    AuthnContextDeclRef (::xercesc::XMLFormatTarget& ft,
                         const ::xml_schema::uri& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    AuthnContextDeclRef (::xercesc::XMLFormatTarget& ft,
                         const ::xml_schema::uri& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AuthnContextDeclRef (::xercesc::DOMDocument& d,
                         const ::xml_schema::uri& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnContextDeclRef (const ::xml_schema::uri& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AuthnContextDecl (::std::ostream& os,
                      const ::xml_schema::type& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    AuthnContextDecl (::std::ostream& os,
                      const ::xml_schema::type& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    AuthnContextDecl (::std::ostream& os,
                      const ::xml_schema::type& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AuthnContextDecl (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::type& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    AuthnContextDecl (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::type& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    AuthnContextDecl (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::type& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AuthnContextDecl (::xercesc::DOMDocument& d,
                      const ::xml_schema::type& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnContextDecl (const ::xml_schema::type& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AuthenticatingAuthority (::std::ostream& os,
                             const ::xml_schema::uri& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    AuthenticatingAuthority (::std::ostream& os,
                             const ::xml_schema::uri& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    AuthenticatingAuthority (::std::ostream& os,
                             const ::xml_schema::uri& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AuthenticatingAuthority (::xercesc::XMLFormatTarget& ft,
                             const ::xml_schema::uri& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    AuthenticatingAuthority (::xercesc::XMLFormatTarget& ft,
                             const ::xml_schema::uri& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    AuthenticatingAuthority (::xercesc::XMLFormatTarget& ft,
                             const ::xml_schema::uri& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AuthenticatingAuthority (::xercesc::DOMDocument& d,
                             const ::xml_schema::uri& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthenticatingAuthority (const ::xml_schema::uri& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AuthzDecisionStatement (::std::ostream& os,
                            const ::saml2::assertion::AuthzDecisionStatementType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    void
    AuthzDecisionStatement (::std::ostream& os,
                            const ::saml2::assertion::AuthzDecisionStatementType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    void
    AuthzDecisionStatement (::std::ostream& os,
                            const ::saml2::assertion::AuthzDecisionStatementType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AuthzDecisionStatement (::xercesc::XMLFormatTarget& ft,
                            const ::saml2::assertion::AuthzDecisionStatementType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    void
    AuthzDecisionStatement (::xercesc::XMLFormatTarget& ft,
                            const ::saml2::assertion::AuthzDecisionStatementType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    void
    AuthzDecisionStatement (::xercesc::XMLFormatTarget& ft,
                            const ::saml2::assertion::AuthzDecisionStatementType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AuthzDecisionStatement (::xercesc::DOMDocument& d,
                            const ::saml2::assertion::AuthzDecisionStatementType& x,
                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthzDecisionStatement (const ::saml2::assertion::AuthzDecisionStatementType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AuthzDecisionStatementType&);

    void
    operator<< (::xercesc::DOMElement&, const DecisionType&);

    void
    operator<< (::xercesc::DOMAttr&, const DecisionType&);

    void
    operator<< (::xml_schema::list_stream&,
                const DecisionType&);

    // Serialize to std::ostream.
    //

    void
    Action (::std::ostream& os,
            const ::saml2::assertion::ActionType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Action (::std::ostream& os,
            const ::saml2::assertion::ActionType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Action (::std::ostream& os,
            const ::saml2::assertion::ActionType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Action (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::ActionType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Action (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::ActionType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Action (::xercesc::XMLFormatTarget& ft,
            const ::saml2::assertion::ActionType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Action (::xercesc::DOMDocument& d,
            const ::saml2::assertion::ActionType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Action (const ::saml2::assertion::ActionType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ActionType&);

    // Serialize to std::ostream.
    //

    void
    Evidence (::std::ostream& os,
              const ::saml2::assertion::EvidenceType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Evidence (::std::ostream& os,
              const ::saml2::assertion::EvidenceType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Evidence (::std::ostream& os,
              const ::saml2::assertion::EvidenceType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Evidence (::xercesc::XMLFormatTarget& ft,
              const ::saml2::assertion::EvidenceType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Evidence (::xercesc::XMLFormatTarget& ft,
              const ::saml2::assertion::EvidenceType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Evidence (::xercesc::XMLFormatTarget& ft,
              const ::saml2::assertion::EvidenceType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Evidence (::xercesc::DOMDocument& d,
              const ::saml2::assertion::EvidenceType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Evidence (const ::saml2::assertion::EvidenceType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const EvidenceType&);

    // Serialize to std::ostream.
    //

    void
    AttributeStatement (::std::ostream& os,
                        const ::saml2::assertion::AttributeStatementType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    AttributeStatement (::std::ostream& os,
                        const ::saml2::assertion::AttributeStatementType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    AttributeStatement (::std::ostream& os,
                        const ::saml2::assertion::AttributeStatementType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AttributeStatement (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::assertion::AttributeStatementType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    AttributeStatement (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::assertion::AttributeStatementType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    AttributeStatement (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::assertion::AttributeStatementType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AttributeStatement (::xercesc::DOMDocument& d,
                        const ::saml2::assertion::AttributeStatementType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeStatement (const ::saml2::assertion::AttributeStatementType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AttributeStatementType&);

    // Serialize to std::ostream.
    //

    void
    Attribute (::std::ostream& os,
               const ::saml2::assertion::AttributeType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Attribute (::std::ostream& os,
               const ::saml2::assertion::AttributeType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Attribute (::std::ostream& os,
               const ::saml2::assertion::AttributeType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Attribute (::xercesc::XMLFormatTarget& ft,
               const ::saml2::assertion::AttributeType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Attribute (::xercesc::XMLFormatTarget& ft,
               const ::saml2::assertion::AttributeType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Attribute (::xercesc::XMLFormatTarget& ft,
               const ::saml2::assertion::AttributeType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Attribute (::xercesc::DOMDocument& d,
               const ::saml2::assertion::AttributeType& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Attribute (const ::saml2::assertion::AttributeType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AttributeType&);

    // Serialize to std::ostream.
    //

    void
    AttributeValue (::std::ostream& os,
                    const ::xml_schema::type& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeValue (::std::ostream& os,
                    const ::xml_schema::type& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeValue (::std::ostream& os,
                    const ::xml_schema::type& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AttributeValue (::xercesc::XMLFormatTarget& ft,
                    const ::xml_schema::type& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeValue (::xercesc::XMLFormatTarget& ft,
                    const ::xml_schema::type& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeValue (::xercesc::XMLFormatTarget& ft,
                    const ::xml_schema::type& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AttributeValue (::xercesc::DOMDocument& d,
                    const ::xml_schema::type& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeValue (const ::xml_schema::type& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EncryptedAttribute (::std::ostream& os,
                        const ::saml2::assertion::EncryptedElementType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EncryptedAttribute (::std::ostream& os,
                        const ::saml2::assertion::EncryptedElementType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EncryptedAttribute (::std::ostream& os,
                        const ::saml2::assertion::EncryptedElementType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EncryptedAttribute (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::assertion::EncryptedElementType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EncryptedAttribute (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::assertion::EncryptedElementType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EncryptedAttribute (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::assertion::EncryptedElementType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EncryptedAttribute (::xercesc::DOMDocument& d,
                        const ::saml2::assertion::EncryptedElementType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptedAttribute (const ::saml2::assertion::EncryptedElementType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SAML_SCHEMA_ASSERTION_2_0_HXX
