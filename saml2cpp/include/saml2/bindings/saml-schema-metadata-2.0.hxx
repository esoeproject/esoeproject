// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SAML_SCHEMA_METADATA_2_0_HXX
#define CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SAML_SCHEMA_METADATA_2_0_HXX

// Begin prologue.
//
#include "saml2/SAML2Defs.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "saml2/xsd/xml-schema.hxx"

// Forward declarations.
//
namespace saml2
{
  namespace metadata
  {
    class entityIDType;
    class localizedNameType;
    class localizedURIType;
    class ExtensionsType;
    class EndpointType;
    class IndexedEndpointType;
    class EntitiesDescriptorType;
    class EntityDescriptorType;
    class OrganizationType;
    class ContactType;
    class ContactTypeType;
    class AdditionalMetadataLocationType;
    class RoleDescriptorType;
    class anyURIListType;
    class KeyDescriptorType;
    class KeyTypes;
    class SSODescriptorType;
    class IDPSSODescriptorType;
    class SPSSODescriptorType;
    class AttributeConsumingServiceType;
    class RequestedAttributeType;
    class AuthnAuthorityDescriptorType;
    class PDPDescriptorType;
    class AttributeAuthorityDescriptorType;
    class AffiliationDescriptorType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "xmldsig-core-schema.hxx"

#include "xenc-schema.hxx"

#include "saml-schema-assertion-2.0.hxx"

#include "xml.hxx"

namespace saml2
{
  namespace metadata
  {
    class entityIDType: public ::xml_schema::uri
    {
      public:
      // Constructors.
      //
      entityIDType ();

      entityIDType (const ::xml_schema::uri&);

      entityIDType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      entityIDType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      entityIDType (const ::std::wstring& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      entityIDType (const entityIDType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual entityIDType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~entityIDType ();
    };

    class localizedNameType: public ::xml_schema::string
    {
      public:
      // lang
      // 
      typedef ::namespace_::lang lang_type;
      typedef ::xsd::cxx::tree::traits< lang_type, wchar_t > lang_traits;

      const lang_type&
      lang () const;

      lang_type&
      lang ();

      void
      lang (const lang_type& x);

      void
      lang (::std::auto_ptr< lang_type > p);

      // Constructors.
      //
      localizedNameType ();

      localizedNameType (const lang_type&);

      localizedNameType (const wchar_t*,
                         const lang_type&);

      localizedNameType (const ::std::wstring&,
                         const lang_type&);

      localizedNameType (const ::xml_schema::string&,
                         const lang_type&);

      localizedNameType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      localizedNameType (const localizedNameType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual localizedNameType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~localizedNameType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< lang_type > lang_;
    };

    class localizedURIType: public ::xml_schema::uri
    {
      public:
      // lang
      // 
      typedef ::namespace_::lang lang_type;
      typedef ::xsd::cxx::tree::traits< lang_type, wchar_t > lang_traits;

      const lang_type&
      lang () const;

      lang_type&
      lang ();

      void
      lang (const lang_type& x);

      void
      lang (::std::auto_ptr< lang_type > p);

      // Constructors.
      //
      localizedURIType ();

      localizedURIType (const ::xml_schema::uri&,
                        const lang_type&);

      localizedURIType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      localizedURIType (const localizedURIType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual localizedURIType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~localizedURIType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< lang_type > lang_;
    };

    class ExtensionsType: public ::xml_schema::type
    {
      public:
      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      ExtensionsType ();

      ExtensionsType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ExtensionsType (const ExtensionsType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ExtensionsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ExtensionsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
    };

    class EndpointType: public ::xml_schema::type
    {
      public:
      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // Binding
      // 
      typedef ::xml_schema::uri Binding_type;
      typedef ::xsd::cxx::tree::traits< Binding_type, wchar_t > Binding_traits;

      const Binding_type&
      Binding () const;

      Binding_type&
      Binding ();

      void
      Binding (const Binding_type& x);

      void
      Binding (::std::auto_ptr< Binding_type > p);

      // Location
      // 
      typedef ::xml_schema::uri Location_type;
      typedef ::xsd::cxx::tree::traits< Location_type, wchar_t > Location_traits;

      const Location_type&
      Location () const;

      Location_type&
      Location ();

      void
      Location (const Location_type& x);

      void
      Location (::std::auto_ptr< Location_type > p);

      // ResponseLocation
      // 
      typedef ::xml_schema::uri ResponseLocation_type;
      typedef ::xsd::cxx::tree::optional< ResponseLocation_type > ResponseLocation_optional;
      typedef ::xsd::cxx::tree::traits< ResponseLocation_type, wchar_t > ResponseLocation_traits;

      const ResponseLocation_optional&
      ResponseLocation () const;

      ResponseLocation_optional&
      ResponseLocation ();

      void
      ResponseLocation (const ResponseLocation_type& x);

      void
      ResponseLocation (const ResponseLocation_optional& x);

      void
      ResponseLocation (::std::auto_ptr< ResponseLocation_type > p);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      EndpointType ();

      EndpointType (const Binding_type&,
                    const Location_type&);

      EndpointType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      EndpointType (const EndpointType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual EndpointType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~EndpointType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
      ::xsd::cxx::tree::one< Binding_type > Binding_;
      ::xsd::cxx::tree::one< Location_type > Location_;
      ResponseLocation_optional ResponseLocation_;
      any_attribute_set any_attribute_;
    };

    class IndexedEndpointType: public ::saml2::metadata::EndpointType
    {
      public:
      // index
      // 
      typedef ::xml_schema::unsigned_short index_type;
      typedef ::xsd::cxx::tree::traits< index_type, wchar_t > index_traits;

      const index_type&
      index () const;

      index_type&
      index ();

      void
      index (const index_type& x);

      // isDefault
      // 
      typedef ::xml_schema::boolean isDefault_type;
      typedef ::xsd::cxx::tree::optional< isDefault_type > isDefault_optional;
      typedef ::xsd::cxx::tree::traits< isDefault_type, wchar_t > isDefault_traits;

      const isDefault_optional&
      isDefault () const;

      isDefault_optional&
      isDefault ();

      void
      isDefault (const isDefault_type& x);

      void
      isDefault (const isDefault_optional& x);

      // Constructors.
      //
      IndexedEndpointType ();

      IndexedEndpointType (const Binding_type&,
                           const Location_type&,
                           const index_type&);

      IndexedEndpointType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      IndexedEndpointType (const IndexedEndpointType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual IndexedEndpointType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~IndexedEndpointType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< index_type > index_;
      isDefault_optional isDefault_;
    };

    class EntitiesDescriptorType: public ::xml_schema::type
    {
      public:
      // Signature
      // 
      typedef ::w3::xmldsig::SignatureType Signature_type;
      typedef ::xsd::cxx::tree::optional< Signature_type > Signature_optional;
      typedef ::xsd::cxx::tree::traits< Signature_type, wchar_t > Signature_traits;

      const Signature_optional&
      Signature () const;

      Signature_optional&
      Signature ();

      void
      Signature (const Signature_type& x);

      void
      Signature (const Signature_optional& x);

      void
      Signature (::std::auto_ptr< Signature_type > p);

      // Extensions
      // 
      typedef ::saml2::metadata::ExtensionsType Extensions_type;
      typedef ::xsd::cxx::tree::optional< Extensions_type > Extensions_optional;
      typedef ::xsd::cxx::tree::traits< Extensions_type, wchar_t > Extensions_traits;

      const Extensions_optional&
      Extensions () const;

      Extensions_optional&
      Extensions ();

      void
      Extensions (const Extensions_type& x);

      void
      Extensions (const Extensions_optional& x);

      void
      Extensions (::std::auto_ptr< Extensions_type > p);

      // EntityDescriptor
      // 
      typedef ::saml2::metadata::EntityDescriptorType EntityDescriptor_type;
      typedef ::xsd::cxx::tree::sequence< EntityDescriptor_type > EntityDescriptor_sequence;
      typedef EntityDescriptor_sequence::iterator EntityDescriptor_iterator;
      typedef EntityDescriptor_sequence::const_iterator EntityDescriptor_const_iterator;
      typedef ::xsd::cxx::tree::traits< EntityDescriptor_type, wchar_t > EntityDescriptor_traits;

      const EntityDescriptor_sequence&
      EntityDescriptor () const;

      EntityDescriptor_sequence&
      EntityDescriptor ();

      void
      EntityDescriptor (const EntityDescriptor_sequence& s);

      // EntitiesDescriptor
      // 
      typedef ::saml2::metadata::EntitiesDescriptorType EntitiesDescriptor_type;
      typedef ::xsd::cxx::tree::sequence< EntitiesDescriptor_type > EntitiesDescriptor_sequence;
      typedef EntitiesDescriptor_sequence::iterator EntitiesDescriptor_iterator;
      typedef EntitiesDescriptor_sequence::const_iterator EntitiesDescriptor_const_iterator;
      typedef ::xsd::cxx::tree::traits< EntitiesDescriptor_type, wchar_t > EntitiesDescriptor_traits;

      const EntitiesDescriptor_sequence&
      EntitiesDescriptor () const;

      EntitiesDescriptor_sequence&
      EntitiesDescriptor ();

      void
      EntitiesDescriptor (const EntitiesDescriptor_sequence& s);

      // validUntil
      // 
      typedef ::xml_schema::date_time validUntil_type;
      typedef ::xsd::cxx::tree::optional< validUntil_type > validUntil_optional;
      typedef ::xsd::cxx::tree::traits< validUntil_type, wchar_t > validUntil_traits;

      const validUntil_optional&
      validUntil () const;

      validUntil_optional&
      validUntil ();

      void
      validUntil (const validUntil_type& x);

      void
      validUntil (const validUntil_optional& x);

      void
      validUntil (::std::auto_ptr< validUntil_type > p);

      // cacheDuration
      // 
      typedef ::xml_schema::duration cacheDuration_type;
      typedef ::xsd::cxx::tree::optional< cacheDuration_type > cacheDuration_optional;
      typedef ::xsd::cxx::tree::traits< cacheDuration_type, wchar_t > cacheDuration_traits;

      const cacheDuration_optional&
      cacheDuration () const;

      cacheDuration_optional&
      cacheDuration ();

      void
      cacheDuration (const cacheDuration_type& x);

      void
      cacheDuration (const cacheDuration_optional& x);

      void
      cacheDuration (::std::auto_ptr< cacheDuration_type > p);

      // ID
      // 
      typedef ::xml_schema::id ID_type;
      typedef ::xsd::cxx::tree::optional< ID_type > ID_optional;
      typedef ::xsd::cxx::tree::traits< ID_type, wchar_t > ID_traits;

      const ID_optional&
      ID () const;

      ID_optional&
      ID ();

      void
      ID (const ID_type& x);

      void
      ID (const ID_optional& x);

      void
      ID (::std::auto_ptr< ID_type > p);

      // Name
      // 
      typedef ::xml_schema::string Name_type;
      typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
      typedef ::xsd::cxx::tree::traits< Name_type, wchar_t > Name_traits;

      const Name_optional&
      Name () const;

      Name_optional&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (const Name_optional& x);

      void
      Name (::std::auto_ptr< Name_type > p);

      // Constructors.
      //
      EntitiesDescriptorType ();

      EntitiesDescriptorType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      EntitiesDescriptorType (const EntitiesDescriptorType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual EntitiesDescriptorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~EntitiesDescriptorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Signature_optional Signature_;
      Extensions_optional Extensions_;
      EntityDescriptor_sequence EntityDescriptor_;
      EntitiesDescriptor_sequence EntitiesDescriptor_;
      validUntil_optional validUntil_;
      cacheDuration_optional cacheDuration_;
      ID_optional ID_;
      Name_optional Name_;
    };

    class EntityDescriptorType: public ::xml_schema::type
    {
      public:
      // Signature
      // 
      typedef ::w3::xmldsig::SignatureType Signature_type;
      typedef ::xsd::cxx::tree::optional< Signature_type > Signature_optional;
      typedef ::xsd::cxx::tree::traits< Signature_type, wchar_t > Signature_traits;

      const Signature_optional&
      Signature () const;

      Signature_optional&
      Signature ();

      void
      Signature (const Signature_type& x);

      void
      Signature (const Signature_optional& x);

      void
      Signature (::std::auto_ptr< Signature_type > p);

      // Extensions
      // 
      typedef ::saml2::metadata::ExtensionsType Extensions_type;
      typedef ::xsd::cxx::tree::optional< Extensions_type > Extensions_optional;
      typedef ::xsd::cxx::tree::traits< Extensions_type, wchar_t > Extensions_traits;

      const Extensions_optional&
      Extensions () const;

      Extensions_optional&
      Extensions ();

      void
      Extensions (const Extensions_type& x);

      void
      Extensions (const Extensions_optional& x);

      void
      Extensions (::std::auto_ptr< Extensions_type > p);

      // RoleDescriptor
      // 
      typedef ::saml2::metadata::RoleDescriptorType RoleDescriptor_type;
      typedef ::xsd::cxx::tree::sequence< RoleDescriptor_type > RoleDescriptor_sequence;
      typedef RoleDescriptor_sequence::iterator RoleDescriptor_iterator;
      typedef RoleDescriptor_sequence::const_iterator RoleDescriptor_const_iterator;
      typedef ::xsd::cxx::tree::traits< RoleDescriptor_type, wchar_t > RoleDescriptor_traits;

      const RoleDescriptor_sequence&
      RoleDescriptor () const;

      RoleDescriptor_sequence&
      RoleDescriptor ();

      void
      RoleDescriptor (const RoleDescriptor_sequence& s);

      // IDPSSODescriptor
      // 
      typedef ::saml2::metadata::IDPSSODescriptorType IDPSSODescriptor_type;
      typedef ::xsd::cxx::tree::sequence< IDPSSODescriptor_type > IDPSSODescriptor_sequence;
      typedef IDPSSODescriptor_sequence::iterator IDPSSODescriptor_iterator;
      typedef IDPSSODescriptor_sequence::const_iterator IDPSSODescriptor_const_iterator;
      typedef ::xsd::cxx::tree::traits< IDPSSODescriptor_type, wchar_t > IDPSSODescriptor_traits;

      const IDPSSODescriptor_sequence&
      IDPSSODescriptor () const;

      IDPSSODescriptor_sequence&
      IDPSSODescriptor ();

      void
      IDPSSODescriptor (const IDPSSODescriptor_sequence& s);

      // SPSSODescriptor
      // 
      typedef ::saml2::metadata::SPSSODescriptorType SPSSODescriptor_type;
      typedef ::xsd::cxx::tree::sequence< SPSSODescriptor_type > SPSSODescriptor_sequence;
      typedef SPSSODescriptor_sequence::iterator SPSSODescriptor_iterator;
      typedef SPSSODescriptor_sequence::const_iterator SPSSODescriptor_const_iterator;
      typedef ::xsd::cxx::tree::traits< SPSSODescriptor_type, wchar_t > SPSSODescriptor_traits;

      const SPSSODescriptor_sequence&
      SPSSODescriptor () const;

      SPSSODescriptor_sequence&
      SPSSODescriptor ();

      void
      SPSSODescriptor (const SPSSODescriptor_sequence& s);

      // AuthnAuthorityDescriptor
      // 
      typedef ::saml2::metadata::AuthnAuthorityDescriptorType AuthnAuthorityDescriptor_type;
      typedef ::xsd::cxx::tree::sequence< AuthnAuthorityDescriptor_type > AuthnAuthorityDescriptor_sequence;
      typedef AuthnAuthorityDescriptor_sequence::iterator AuthnAuthorityDescriptor_iterator;
      typedef AuthnAuthorityDescriptor_sequence::const_iterator AuthnAuthorityDescriptor_const_iterator;
      typedef ::xsd::cxx::tree::traits< AuthnAuthorityDescriptor_type, wchar_t > AuthnAuthorityDescriptor_traits;

      const AuthnAuthorityDescriptor_sequence&
      AuthnAuthorityDescriptor () const;

      AuthnAuthorityDescriptor_sequence&
      AuthnAuthorityDescriptor ();

      void
      AuthnAuthorityDescriptor (const AuthnAuthorityDescriptor_sequence& s);

      // AttributeAuthorityDescriptor
      // 
      typedef ::saml2::metadata::AttributeAuthorityDescriptorType AttributeAuthorityDescriptor_type;
      typedef ::xsd::cxx::tree::sequence< AttributeAuthorityDescriptor_type > AttributeAuthorityDescriptor_sequence;
      typedef AttributeAuthorityDescriptor_sequence::iterator AttributeAuthorityDescriptor_iterator;
      typedef AttributeAuthorityDescriptor_sequence::const_iterator AttributeAuthorityDescriptor_const_iterator;
      typedef ::xsd::cxx::tree::traits< AttributeAuthorityDescriptor_type, wchar_t > AttributeAuthorityDescriptor_traits;

      const AttributeAuthorityDescriptor_sequence&
      AttributeAuthorityDescriptor () const;

      AttributeAuthorityDescriptor_sequence&
      AttributeAuthorityDescriptor ();

      void
      AttributeAuthorityDescriptor (const AttributeAuthorityDescriptor_sequence& s);

      // PDPDescriptor
      // 
      typedef ::saml2::metadata::PDPDescriptorType PDPDescriptor_type;
      typedef ::xsd::cxx::tree::sequence< PDPDescriptor_type > PDPDescriptor_sequence;
      typedef PDPDescriptor_sequence::iterator PDPDescriptor_iterator;
      typedef PDPDescriptor_sequence::const_iterator PDPDescriptor_const_iterator;
      typedef ::xsd::cxx::tree::traits< PDPDescriptor_type, wchar_t > PDPDescriptor_traits;

      const PDPDescriptor_sequence&
      PDPDescriptor () const;

      PDPDescriptor_sequence&
      PDPDescriptor ();

      void
      PDPDescriptor (const PDPDescriptor_sequence& s);

      // AffiliationDescriptor
      // 
      typedef ::saml2::metadata::AffiliationDescriptorType AffiliationDescriptor_type;
      typedef ::xsd::cxx::tree::optional< AffiliationDescriptor_type > AffiliationDescriptor_optional;
      typedef ::xsd::cxx::tree::traits< AffiliationDescriptor_type, wchar_t > AffiliationDescriptor_traits;

      const AffiliationDescriptor_optional&
      AffiliationDescriptor () const;

      AffiliationDescriptor_optional&
      AffiliationDescriptor ();

      void
      AffiliationDescriptor (const AffiliationDescriptor_type& x);

      void
      AffiliationDescriptor (const AffiliationDescriptor_optional& x);

      void
      AffiliationDescriptor (::std::auto_ptr< AffiliationDescriptor_type > p);

      // Organization
      // 
      typedef ::saml2::metadata::OrganizationType Organization_type;
      typedef ::xsd::cxx::tree::optional< Organization_type > Organization_optional;
      typedef ::xsd::cxx::tree::traits< Organization_type, wchar_t > Organization_traits;

      const Organization_optional&
      Organization () const;

      Organization_optional&
      Organization ();

      void
      Organization (const Organization_type& x);

      void
      Organization (const Organization_optional& x);

      void
      Organization (::std::auto_ptr< Organization_type > p);

      // ContactPerson
      // 
      typedef ::saml2::metadata::ContactType ContactPerson_type;
      typedef ::xsd::cxx::tree::sequence< ContactPerson_type > ContactPerson_sequence;
      typedef ContactPerson_sequence::iterator ContactPerson_iterator;
      typedef ContactPerson_sequence::const_iterator ContactPerson_const_iterator;
      typedef ::xsd::cxx::tree::traits< ContactPerson_type, wchar_t > ContactPerson_traits;

      const ContactPerson_sequence&
      ContactPerson () const;

      ContactPerson_sequence&
      ContactPerson ();

      void
      ContactPerson (const ContactPerson_sequence& s);

      // AdditionalMetadataLocation
      // 
      typedef ::saml2::metadata::AdditionalMetadataLocationType AdditionalMetadataLocation_type;
      typedef ::xsd::cxx::tree::sequence< AdditionalMetadataLocation_type > AdditionalMetadataLocation_sequence;
      typedef AdditionalMetadataLocation_sequence::iterator AdditionalMetadataLocation_iterator;
      typedef AdditionalMetadataLocation_sequence::const_iterator AdditionalMetadataLocation_const_iterator;
      typedef ::xsd::cxx::tree::traits< AdditionalMetadataLocation_type, wchar_t > AdditionalMetadataLocation_traits;

      const AdditionalMetadataLocation_sequence&
      AdditionalMetadataLocation () const;

      AdditionalMetadataLocation_sequence&
      AdditionalMetadataLocation ();

      void
      AdditionalMetadataLocation (const AdditionalMetadataLocation_sequence& s);

      // entityID
      // 
      typedef ::saml2::metadata::entityIDType entityID_type;
      typedef ::xsd::cxx::tree::traits< entityID_type, wchar_t > entityID_traits;

      const entityID_type&
      entityID () const;

      entityID_type&
      entityID ();

      void
      entityID (const entityID_type& x);

      void
      entityID (::std::auto_ptr< entityID_type > p);

      // validUntil
      // 
      typedef ::xml_schema::date_time validUntil_type;
      typedef ::xsd::cxx::tree::optional< validUntil_type > validUntil_optional;
      typedef ::xsd::cxx::tree::traits< validUntil_type, wchar_t > validUntil_traits;

      const validUntil_optional&
      validUntil () const;

      validUntil_optional&
      validUntil ();

      void
      validUntil (const validUntil_type& x);

      void
      validUntil (const validUntil_optional& x);

      void
      validUntil (::std::auto_ptr< validUntil_type > p);

      // cacheDuration
      // 
      typedef ::xml_schema::duration cacheDuration_type;
      typedef ::xsd::cxx::tree::optional< cacheDuration_type > cacheDuration_optional;
      typedef ::xsd::cxx::tree::traits< cacheDuration_type, wchar_t > cacheDuration_traits;

      const cacheDuration_optional&
      cacheDuration () const;

      cacheDuration_optional&
      cacheDuration ();

      void
      cacheDuration (const cacheDuration_type& x);

      void
      cacheDuration (const cacheDuration_optional& x);

      void
      cacheDuration (::std::auto_ptr< cacheDuration_type > p);

      // ID
      // 
      typedef ::xml_schema::id ID_type;
      typedef ::xsd::cxx::tree::optional< ID_type > ID_optional;
      typedef ::xsd::cxx::tree::traits< ID_type, wchar_t > ID_traits;

      const ID_optional&
      ID () const;

      ID_optional&
      ID ();

      void
      ID (const ID_type& x);

      void
      ID (const ID_optional& x);

      void
      ID (::std::auto_ptr< ID_type > p);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      EntityDescriptorType ();

      EntityDescriptorType (const entityID_type&);

      EntityDescriptorType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      EntityDescriptorType (const EntityDescriptorType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual EntityDescriptorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~EntityDescriptorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      Signature_optional Signature_;
      Extensions_optional Extensions_;
      RoleDescriptor_sequence RoleDescriptor_;
      IDPSSODescriptor_sequence IDPSSODescriptor_;
      SPSSODescriptor_sequence SPSSODescriptor_;
      AuthnAuthorityDescriptor_sequence AuthnAuthorityDescriptor_;
      AttributeAuthorityDescriptor_sequence AttributeAuthorityDescriptor_;
      PDPDescriptor_sequence PDPDescriptor_;
      AffiliationDescriptor_optional AffiliationDescriptor_;
      Organization_optional Organization_;
      ContactPerson_sequence ContactPerson_;
      AdditionalMetadataLocation_sequence AdditionalMetadataLocation_;
      ::xsd::cxx::tree::one< entityID_type > entityID_;
      validUntil_optional validUntil_;
      cacheDuration_optional cacheDuration_;
      ID_optional ID_;
      any_attribute_set any_attribute_;
    };

    class OrganizationType: public ::xml_schema::type
    {
      public:
      // Extensions
      // 
      typedef ::saml2::metadata::ExtensionsType Extensions_type;
      typedef ::xsd::cxx::tree::optional< Extensions_type > Extensions_optional;
      typedef ::xsd::cxx::tree::traits< Extensions_type, wchar_t > Extensions_traits;

      const Extensions_optional&
      Extensions () const;

      Extensions_optional&
      Extensions ();

      void
      Extensions (const Extensions_type& x);

      void
      Extensions (const Extensions_optional& x);

      void
      Extensions (::std::auto_ptr< Extensions_type > p);

      // OrganizationName
      // 
      typedef ::saml2::metadata::localizedNameType OrganizationName_type;
      typedef ::xsd::cxx::tree::sequence< OrganizationName_type > OrganizationName_sequence;
      typedef OrganizationName_sequence::iterator OrganizationName_iterator;
      typedef OrganizationName_sequence::const_iterator OrganizationName_const_iterator;
      typedef ::xsd::cxx::tree::traits< OrganizationName_type, wchar_t > OrganizationName_traits;

      const OrganizationName_sequence&
      OrganizationName () const;

      OrganizationName_sequence&
      OrganizationName ();

      void
      OrganizationName (const OrganizationName_sequence& s);

      // OrganizationDisplayName
      // 
      typedef ::saml2::metadata::localizedNameType OrganizationDisplayName_type;
      typedef ::xsd::cxx::tree::sequence< OrganizationDisplayName_type > OrganizationDisplayName_sequence;
      typedef OrganizationDisplayName_sequence::iterator OrganizationDisplayName_iterator;
      typedef OrganizationDisplayName_sequence::const_iterator OrganizationDisplayName_const_iterator;
      typedef ::xsd::cxx::tree::traits< OrganizationDisplayName_type, wchar_t > OrganizationDisplayName_traits;

      const OrganizationDisplayName_sequence&
      OrganizationDisplayName () const;

      OrganizationDisplayName_sequence&
      OrganizationDisplayName ();

      void
      OrganizationDisplayName (const OrganizationDisplayName_sequence& s);

      // OrganizationURL
      // 
      typedef ::saml2::metadata::localizedURIType OrganizationURL_type;
      typedef ::xsd::cxx::tree::sequence< OrganizationURL_type > OrganizationURL_sequence;
      typedef OrganizationURL_sequence::iterator OrganizationURL_iterator;
      typedef OrganizationURL_sequence::const_iterator OrganizationURL_const_iterator;
      typedef ::xsd::cxx::tree::traits< OrganizationURL_type, wchar_t > OrganizationURL_traits;

      const OrganizationURL_sequence&
      OrganizationURL () const;

      OrganizationURL_sequence&
      OrganizationURL ();

      void
      OrganizationURL (const OrganizationURL_sequence& s);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      OrganizationType ();

      OrganizationType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      OrganizationType (const OrganizationType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual OrganizationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~OrganizationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      Extensions_optional Extensions_;
      OrganizationName_sequence OrganizationName_;
      OrganizationDisplayName_sequence OrganizationDisplayName_;
      OrganizationURL_sequence OrganizationURL_;
      any_attribute_set any_attribute_;
    };

    class ContactType: public ::xml_schema::type
    {
      public:
      // Extensions
      // 
      typedef ::saml2::metadata::ExtensionsType Extensions_type;
      typedef ::xsd::cxx::tree::optional< Extensions_type > Extensions_optional;
      typedef ::xsd::cxx::tree::traits< Extensions_type, wchar_t > Extensions_traits;

      const Extensions_optional&
      Extensions () const;

      Extensions_optional&
      Extensions ();

      void
      Extensions (const Extensions_type& x);

      void
      Extensions (const Extensions_optional& x);

      void
      Extensions (::std::auto_ptr< Extensions_type > p);

      // Company
      // 
      typedef ::xml_schema::string Company_type;
      typedef ::xsd::cxx::tree::optional< Company_type > Company_optional;
      typedef ::xsd::cxx::tree::traits< Company_type, wchar_t > Company_traits;

      const Company_optional&
      Company () const;

      Company_optional&
      Company ();

      void
      Company (const Company_type& x);

      void
      Company (const Company_optional& x);

      void
      Company (::std::auto_ptr< Company_type > p);

      // GivenName
      // 
      typedef ::xml_schema::string GivenName_type;
      typedef ::xsd::cxx::tree::optional< GivenName_type > GivenName_optional;
      typedef ::xsd::cxx::tree::traits< GivenName_type, wchar_t > GivenName_traits;

      const GivenName_optional&
      GivenName () const;

      GivenName_optional&
      GivenName ();

      void
      GivenName (const GivenName_type& x);

      void
      GivenName (const GivenName_optional& x);

      void
      GivenName (::std::auto_ptr< GivenName_type > p);

      // SurName
      // 
      typedef ::xml_schema::string SurName_type;
      typedef ::xsd::cxx::tree::optional< SurName_type > SurName_optional;
      typedef ::xsd::cxx::tree::traits< SurName_type, wchar_t > SurName_traits;

      const SurName_optional&
      SurName () const;

      SurName_optional&
      SurName ();

      void
      SurName (const SurName_type& x);

      void
      SurName (const SurName_optional& x);

      void
      SurName (::std::auto_ptr< SurName_type > p);

      // EmailAddress
      // 
      typedef ::xml_schema::uri EmailAddress_type;
      typedef ::xsd::cxx::tree::sequence< EmailAddress_type > EmailAddress_sequence;
      typedef EmailAddress_sequence::iterator EmailAddress_iterator;
      typedef EmailAddress_sequence::const_iterator EmailAddress_const_iterator;
      typedef ::xsd::cxx::tree::traits< EmailAddress_type, wchar_t > EmailAddress_traits;

      const EmailAddress_sequence&
      EmailAddress () const;

      EmailAddress_sequence&
      EmailAddress ();

      void
      EmailAddress (const EmailAddress_sequence& s);

      // TelephoneNumber
      // 
      typedef ::xml_schema::string TelephoneNumber_type;
      typedef ::xsd::cxx::tree::sequence< TelephoneNumber_type > TelephoneNumber_sequence;
      typedef TelephoneNumber_sequence::iterator TelephoneNumber_iterator;
      typedef TelephoneNumber_sequence::const_iterator TelephoneNumber_const_iterator;
      typedef ::xsd::cxx::tree::traits< TelephoneNumber_type, wchar_t > TelephoneNumber_traits;

      const TelephoneNumber_sequence&
      TelephoneNumber () const;

      TelephoneNumber_sequence&
      TelephoneNumber ();

      void
      TelephoneNumber (const TelephoneNumber_sequence& s);

      // contactType
      // 
      typedef ::saml2::metadata::ContactTypeType contactType_type;
      typedef ::xsd::cxx::tree::traits< contactType_type, wchar_t > contactType_traits;

      const contactType_type&
      contactType () const;

      contactType_type&
      contactType ();

      void
      contactType (const contactType_type& x);

      void
      contactType (::std::auto_ptr< contactType_type > p);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      ContactType ();

      ContactType (const contactType_type&);

      ContactType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      ContactType (const ContactType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual ContactType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ContactType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      Extensions_optional Extensions_;
      Company_optional Company_;
      GivenName_optional GivenName_;
      SurName_optional SurName_;
      EmailAddress_sequence EmailAddress_;
      TelephoneNumber_sequence TelephoneNumber_;
      ::xsd::cxx::tree::one< contactType_type > contactType_;
      any_attribute_set any_attribute_;
    };

    class ContactTypeType: public ::xml_schema::string
    {
      public:
      enum value
      {
        technical,
        support,
        administrative,
        billing,
        other
      };

      ContactTypeType ();

      ContactTypeType (value v);

      ContactTypeType (const wchar_t* v);

      ContactTypeType (const ::std::wstring& v);

      ContactTypeType (const ::xml_schema::string& v);

      ContactTypeType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      ContactTypeType (const ::xercesc::DOMAttr& a,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      ContactTypeType (const ::std::wstring& s,
                       const ::xercesc::DOMElement* e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      ContactTypeType (const ContactTypeType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual ContactTypeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      ContactTypeType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_ContactTypeType_convert ();
      }

      protected:
      value
      _xsd_ContactTypeType_convert () const;

      public:
      static const wchar_t* const _xsd_ContactTypeType_literals_[5];
      static const value _xsd_ContactTypeType_indexes_[5];
    };

    class AdditionalMetadataLocationType: public ::xml_schema::uri
    {
      public:
      // namespace
      // 
      typedef ::xml_schema::uri namespace_type;
      typedef ::xsd::cxx::tree::traits< namespace_type, wchar_t > namespace_traits;

      const namespace_type&
      namespace_ () const;

      namespace_type&
      namespace_ ();

      void
      namespace_ (const namespace_type& x);

      void
      namespace_ (::std::auto_ptr< namespace_type > p);

      // Constructors.
      //
      AdditionalMetadataLocationType ();

      AdditionalMetadataLocationType (const ::xml_schema::uri&,
                                      const namespace_type&);

      AdditionalMetadataLocationType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      AdditionalMetadataLocationType (const AdditionalMetadataLocationType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual AdditionalMetadataLocationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AdditionalMetadataLocationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< namespace_type > namespace__;
    };

    class RoleDescriptorType: public ::xml_schema::type
    {
      public:
      // Signature
      // 
      typedef ::w3::xmldsig::SignatureType Signature_type;
      typedef ::xsd::cxx::tree::optional< Signature_type > Signature_optional;
      typedef ::xsd::cxx::tree::traits< Signature_type, wchar_t > Signature_traits;

      const Signature_optional&
      Signature () const;

      Signature_optional&
      Signature ();

      void
      Signature (const Signature_type& x);

      void
      Signature (const Signature_optional& x);

      void
      Signature (::std::auto_ptr< Signature_type > p);

      // Extensions
      // 
      typedef ::saml2::metadata::ExtensionsType Extensions_type;
      typedef ::xsd::cxx::tree::optional< Extensions_type > Extensions_optional;
      typedef ::xsd::cxx::tree::traits< Extensions_type, wchar_t > Extensions_traits;

      const Extensions_optional&
      Extensions () const;

      Extensions_optional&
      Extensions ();

      void
      Extensions (const Extensions_type& x);

      void
      Extensions (const Extensions_optional& x);

      void
      Extensions (::std::auto_ptr< Extensions_type > p);

      // KeyDescriptor
      // 
      typedef ::saml2::metadata::KeyDescriptorType KeyDescriptor_type;
      typedef ::xsd::cxx::tree::sequence< KeyDescriptor_type > KeyDescriptor_sequence;
      typedef KeyDescriptor_sequence::iterator KeyDescriptor_iterator;
      typedef KeyDescriptor_sequence::const_iterator KeyDescriptor_const_iterator;
      typedef ::xsd::cxx::tree::traits< KeyDescriptor_type, wchar_t > KeyDescriptor_traits;

      const KeyDescriptor_sequence&
      KeyDescriptor () const;

      KeyDescriptor_sequence&
      KeyDescriptor ();

      void
      KeyDescriptor (const KeyDescriptor_sequence& s);

      // Organization
      // 
      typedef ::saml2::metadata::OrganizationType Organization_type;
      typedef ::xsd::cxx::tree::optional< Organization_type > Organization_optional;
      typedef ::xsd::cxx::tree::traits< Organization_type, wchar_t > Organization_traits;

      const Organization_optional&
      Organization () const;

      Organization_optional&
      Organization ();

      void
      Organization (const Organization_type& x);

      void
      Organization (const Organization_optional& x);

      void
      Organization (::std::auto_ptr< Organization_type > p);

      // ContactPerson
      // 
      typedef ::saml2::metadata::ContactType ContactPerson_type;
      typedef ::xsd::cxx::tree::sequence< ContactPerson_type > ContactPerson_sequence;
      typedef ContactPerson_sequence::iterator ContactPerson_iterator;
      typedef ContactPerson_sequence::const_iterator ContactPerson_const_iterator;
      typedef ::xsd::cxx::tree::traits< ContactPerson_type, wchar_t > ContactPerson_traits;

      const ContactPerson_sequence&
      ContactPerson () const;

      ContactPerson_sequence&
      ContactPerson ();

      void
      ContactPerson (const ContactPerson_sequence& s);

      // ID
      // 
      typedef ::xml_schema::id ID_type;
      typedef ::xsd::cxx::tree::optional< ID_type > ID_optional;
      typedef ::xsd::cxx::tree::traits< ID_type, wchar_t > ID_traits;

      const ID_optional&
      ID () const;

      ID_optional&
      ID ();

      void
      ID (const ID_type& x);

      void
      ID (const ID_optional& x);

      void
      ID (::std::auto_ptr< ID_type > p);

      // validUntil
      // 
      typedef ::xml_schema::date_time validUntil_type;
      typedef ::xsd::cxx::tree::optional< validUntil_type > validUntil_optional;
      typedef ::xsd::cxx::tree::traits< validUntil_type, wchar_t > validUntil_traits;

      const validUntil_optional&
      validUntil () const;

      validUntil_optional&
      validUntil ();

      void
      validUntil (const validUntil_type& x);

      void
      validUntil (const validUntil_optional& x);

      void
      validUntil (::std::auto_ptr< validUntil_type > p);

      // cacheDuration
      // 
      typedef ::xml_schema::duration cacheDuration_type;
      typedef ::xsd::cxx::tree::optional< cacheDuration_type > cacheDuration_optional;
      typedef ::xsd::cxx::tree::traits< cacheDuration_type, wchar_t > cacheDuration_traits;

      const cacheDuration_optional&
      cacheDuration () const;

      cacheDuration_optional&
      cacheDuration ();

      void
      cacheDuration (const cacheDuration_type& x);

      void
      cacheDuration (const cacheDuration_optional& x);

      void
      cacheDuration (::std::auto_ptr< cacheDuration_type > p);

      // protocolSupportEnumeration
      // 
      typedef ::saml2::metadata::anyURIListType protocolSupportEnumeration_type;
      typedef ::xsd::cxx::tree::traits< protocolSupportEnumeration_type, wchar_t > protocolSupportEnumeration_traits;

      const protocolSupportEnumeration_type&
      protocolSupportEnumeration () const;

      protocolSupportEnumeration_type&
      protocolSupportEnumeration ();

      void
      protocolSupportEnumeration (const protocolSupportEnumeration_type& x);

      void
      protocolSupportEnumeration (::std::auto_ptr< protocolSupportEnumeration_type > p);

      // errorURL
      // 
      typedef ::xml_schema::uri errorURL_type;
      typedef ::xsd::cxx::tree::optional< errorURL_type > errorURL_optional;
      typedef ::xsd::cxx::tree::traits< errorURL_type, wchar_t > errorURL_traits;

      const errorURL_optional&
      errorURL () const;

      errorURL_optional&
      errorURL ();

      void
      errorURL (const errorURL_type& x);

      void
      errorURL (const errorURL_optional& x);

      void
      errorURL (::std::auto_ptr< errorURL_type > p);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      RoleDescriptorType ();

      RoleDescriptorType (const protocolSupportEnumeration_type&);

      RoleDescriptorType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      RoleDescriptorType (const RoleDescriptorType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual RoleDescriptorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RoleDescriptorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      Signature_optional Signature_;
      Extensions_optional Extensions_;
      KeyDescriptor_sequence KeyDescriptor_;
      Organization_optional Organization_;
      ContactPerson_sequence ContactPerson_;
      ID_optional ID_;
      validUntil_optional validUntil_;
      cacheDuration_optional cacheDuration_;
      ::xsd::cxx::tree::one< protocolSupportEnumeration_type > protocolSupportEnumeration_;
      errorURL_optional errorURL_;
      any_attribute_set any_attribute_;
    };

    class anyURIListType: public ::xml_schema::simple_type,
      public ::xsd::cxx::tree::list< ::xml_schema::uri, wchar_t >
    {
      public:
      anyURIListType ();

      anyURIListType (size_type n, const ::xml_schema::uri& x);

      template < typename I >
      anyURIListType (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xml_schema::uri, wchar_t > (begin, end)
      {
      }

      anyURIListType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      anyURIListType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      anyURIListType (const ::std::wstring& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      anyURIListType (const anyURIListType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual anyURIListType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~anyURIListType ();
    };

    class KeyDescriptorType: public ::xml_schema::type
    {
      public:
      // KeyInfo
      // 
      typedef ::w3::xmldsig::KeyInfoType KeyInfo_type;
      typedef ::xsd::cxx::tree::traits< KeyInfo_type, wchar_t > KeyInfo_traits;

      const KeyInfo_type&
      KeyInfo () const;

      KeyInfo_type&
      KeyInfo ();

      void
      KeyInfo (const KeyInfo_type& x);

      void
      KeyInfo (::std::auto_ptr< KeyInfo_type > p);

      // EncryptionMethod
      // 
      typedef ::w3::xmlenc::EncryptionMethodType EncryptionMethod_type;
      typedef ::xsd::cxx::tree::sequence< EncryptionMethod_type > EncryptionMethod_sequence;
      typedef EncryptionMethod_sequence::iterator EncryptionMethod_iterator;
      typedef EncryptionMethod_sequence::const_iterator EncryptionMethod_const_iterator;
      typedef ::xsd::cxx::tree::traits< EncryptionMethod_type, wchar_t > EncryptionMethod_traits;

      const EncryptionMethod_sequence&
      EncryptionMethod () const;

      EncryptionMethod_sequence&
      EncryptionMethod ();

      void
      EncryptionMethod (const EncryptionMethod_sequence& s);

      // use
      // 
      typedef ::saml2::metadata::KeyTypes use_type;
      typedef ::xsd::cxx::tree::optional< use_type > use_optional;
      typedef ::xsd::cxx::tree::traits< use_type, wchar_t > use_traits;

      const use_optional&
      use () const;

      use_optional&
      use ();

      void
      use (const use_type& x);

      void
      use (const use_optional& x);

      void
      use (::std::auto_ptr< use_type > p);

      // Constructors.
      //
      KeyDescriptorType ();

      KeyDescriptorType (const KeyInfo_type&);

      KeyDescriptorType (::std::auto_ptr< KeyInfo_type >&);

      KeyDescriptorType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      KeyDescriptorType (const KeyDescriptorType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual KeyDescriptorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~KeyDescriptorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< KeyInfo_type > KeyInfo_;
      EncryptionMethod_sequence EncryptionMethod_;
      use_optional use_;
    };

    class KeyTypes: public ::xml_schema::string
    {
      public:
      enum value
      {
        encryption,
        signing
      };

      KeyTypes ();

      KeyTypes (value v);

      KeyTypes (const wchar_t* v);

      KeyTypes (const ::std::wstring& v);

      KeyTypes (const ::xml_schema::string& v);

      KeyTypes (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      KeyTypes (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      KeyTypes (const ::std::wstring& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      KeyTypes (const KeyTypes& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual KeyTypes*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      KeyTypes&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_KeyTypes_convert ();
      }

      protected:
      value
      _xsd_KeyTypes_convert () const;

      public:
      static const wchar_t* const _xsd_KeyTypes_literals_[2];
      static const value _xsd_KeyTypes_indexes_[2];
    };

    class SSODescriptorType: public ::saml2::metadata::RoleDescriptorType
    {
      public:
      // ArtifactResolutionService
      // 
      typedef ::saml2::metadata::IndexedEndpointType ArtifactResolutionService_type;
      typedef ::xsd::cxx::tree::sequence< ArtifactResolutionService_type > ArtifactResolutionService_sequence;
      typedef ArtifactResolutionService_sequence::iterator ArtifactResolutionService_iterator;
      typedef ArtifactResolutionService_sequence::const_iterator ArtifactResolutionService_const_iterator;
      typedef ::xsd::cxx::tree::traits< ArtifactResolutionService_type, wchar_t > ArtifactResolutionService_traits;

      const ArtifactResolutionService_sequence&
      ArtifactResolutionService () const;

      ArtifactResolutionService_sequence&
      ArtifactResolutionService ();

      void
      ArtifactResolutionService (const ArtifactResolutionService_sequence& s);

      // SingleLogoutService
      // 
      typedef ::saml2::metadata::EndpointType SingleLogoutService_type;
      typedef ::xsd::cxx::tree::sequence< SingleLogoutService_type > SingleLogoutService_sequence;
      typedef SingleLogoutService_sequence::iterator SingleLogoutService_iterator;
      typedef SingleLogoutService_sequence::const_iterator SingleLogoutService_const_iterator;
      typedef ::xsd::cxx::tree::traits< SingleLogoutService_type, wchar_t > SingleLogoutService_traits;

      const SingleLogoutService_sequence&
      SingleLogoutService () const;

      SingleLogoutService_sequence&
      SingleLogoutService ();

      void
      SingleLogoutService (const SingleLogoutService_sequence& s);

      // ManageNameIDService
      // 
      typedef ::saml2::metadata::EndpointType ManageNameIDService_type;
      typedef ::xsd::cxx::tree::sequence< ManageNameIDService_type > ManageNameIDService_sequence;
      typedef ManageNameIDService_sequence::iterator ManageNameIDService_iterator;
      typedef ManageNameIDService_sequence::const_iterator ManageNameIDService_const_iterator;
      typedef ::xsd::cxx::tree::traits< ManageNameIDService_type, wchar_t > ManageNameIDService_traits;

      const ManageNameIDService_sequence&
      ManageNameIDService () const;

      ManageNameIDService_sequence&
      ManageNameIDService ();

      void
      ManageNameIDService (const ManageNameIDService_sequence& s);

      // NameIDFormat
      // 
      typedef ::xml_schema::uri NameIDFormat_type;
      typedef ::xsd::cxx::tree::sequence< NameIDFormat_type > NameIDFormat_sequence;
      typedef NameIDFormat_sequence::iterator NameIDFormat_iterator;
      typedef NameIDFormat_sequence::const_iterator NameIDFormat_const_iterator;
      typedef ::xsd::cxx::tree::traits< NameIDFormat_type, wchar_t > NameIDFormat_traits;

      const NameIDFormat_sequence&
      NameIDFormat () const;

      NameIDFormat_sequence&
      NameIDFormat ();

      void
      NameIDFormat (const NameIDFormat_sequence& s);

      // Constructors.
      //
      SSODescriptorType ();

      SSODescriptorType (const protocolSupportEnumeration_type&);

      SSODescriptorType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      SSODescriptorType (const SSODescriptorType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual SSODescriptorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SSODescriptorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ArtifactResolutionService_sequence ArtifactResolutionService_;
      SingleLogoutService_sequence SingleLogoutService_;
      ManageNameIDService_sequence ManageNameIDService_;
      NameIDFormat_sequence NameIDFormat_;
    };

    class IDPSSODescriptorType: public ::saml2::metadata::SSODescriptorType
    {
      public:
      // SingleSignOnService
      // 
      typedef ::saml2::metadata::EndpointType SingleSignOnService_type;
      typedef ::xsd::cxx::tree::sequence< SingleSignOnService_type > SingleSignOnService_sequence;
      typedef SingleSignOnService_sequence::iterator SingleSignOnService_iterator;
      typedef SingleSignOnService_sequence::const_iterator SingleSignOnService_const_iterator;
      typedef ::xsd::cxx::tree::traits< SingleSignOnService_type, wchar_t > SingleSignOnService_traits;

      const SingleSignOnService_sequence&
      SingleSignOnService () const;

      SingleSignOnService_sequence&
      SingleSignOnService ();

      void
      SingleSignOnService (const SingleSignOnService_sequence& s);

      // NameIDMappingService
      // 
      typedef ::saml2::metadata::EndpointType NameIDMappingService_type;
      typedef ::xsd::cxx::tree::sequence< NameIDMappingService_type > NameIDMappingService_sequence;
      typedef NameIDMappingService_sequence::iterator NameIDMappingService_iterator;
      typedef NameIDMappingService_sequence::const_iterator NameIDMappingService_const_iterator;
      typedef ::xsd::cxx::tree::traits< NameIDMappingService_type, wchar_t > NameIDMappingService_traits;

      const NameIDMappingService_sequence&
      NameIDMappingService () const;

      NameIDMappingService_sequence&
      NameIDMappingService ();

      void
      NameIDMappingService (const NameIDMappingService_sequence& s);

      // AssertionIDRequestService
      // 
      typedef ::saml2::metadata::EndpointType AssertionIDRequestService_type;
      typedef ::xsd::cxx::tree::sequence< AssertionIDRequestService_type > AssertionIDRequestService_sequence;
      typedef AssertionIDRequestService_sequence::iterator AssertionIDRequestService_iterator;
      typedef AssertionIDRequestService_sequence::const_iterator AssertionIDRequestService_const_iterator;
      typedef ::xsd::cxx::tree::traits< AssertionIDRequestService_type, wchar_t > AssertionIDRequestService_traits;

      const AssertionIDRequestService_sequence&
      AssertionIDRequestService () const;

      AssertionIDRequestService_sequence&
      AssertionIDRequestService ();

      void
      AssertionIDRequestService (const AssertionIDRequestService_sequence& s);

      // AttributeProfile
      // 
      typedef ::xml_schema::uri AttributeProfile_type;
      typedef ::xsd::cxx::tree::sequence< AttributeProfile_type > AttributeProfile_sequence;
      typedef AttributeProfile_sequence::iterator AttributeProfile_iterator;
      typedef AttributeProfile_sequence::const_iterator AttributeProfile_const_iterator;
      typedef ::xsd::cxx::tree::traits< AttributeProfile_type, wchar_t > AttributeProfile_traits;

      const AttributeProfile_sequence&
      AttributeProfile () const;

      AttributeProfile_sequence&
      AttributeProfile ();

      void
      AttributeProfile (const AttributeProfile_sequence& s);

      // Attribute
      // 
      typedef ::saml2::assertion::AttributeType Attribute_type;
      typedef ::xsd::cxx::tree::sequence< Attribute_type > Attribute_sequence;
      typedef Attribute_sequence::iterator Attribute_iterator;
      typedef Attribute_sequence::const_iterator Attribute_const_iterator;
      typedef ::xsd::cxx::tree::traits< Attribute_type, wchar_t > Attribute_traits;

      const Attribute_sequence&
      Attribute () const;

      Attribute_sequence&
      Attribute ();

      void
      Attribute (const Attribute_sequence& s);

      // WantAuthnRequestsSigned
      // 
      typedef ::xml_schema::boolean WantAuthnRequestsSigned_type;
      typedef ::xsd::cxx::tree::optional< WantAuthnRequestsSigned_type > WantAuthnRequestsSigned_optional;
      typedef ::xsd::cxx::tree::traits< WantAuthnRequestsSigned_type, wchar_t > WantAuthnRequestsSigned_traits;

      const WantAuthnRequestsSigned_optional&
      WantAuthnRequestsSigned () const;

      WantAuthnRequestsSigned_optional&
      WantAuthnRequestsSigned ();

      void
      WantAuthnRequestsSigned (const WantAuthnRequestsSigned_type& x);

      void
      WantAuthnRequestsSigned (const WantAuthnRequestsSigned_optional& x);

      // Constructors.
      //
      IDPSSODescriptorType ();

      IDPSSODescriptorType (const protocolSupportEnumeration_type&);

      IDPSSODescriptorType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      IDPSSODescriptorType (const IDPSSODescriptorType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual IDPSSODescriptorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~IDPSSODescriptorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      SingleSignOnService_sequence SingleSignOnService_;
      NameIDMappingService_sequence NameIDMappingService_;
      AssertionIDRequestService_sequence AssertionIDRequestService_;
      AttributeProfile_sequence AttributeProfile_;
      Attribute_sequence Attribute_;
      WantAuthnRequestsSigned_optional WantAuthnRequestsSigned_;
    };

    class SPSSODescriptorType: public ::saml2::metadata::SSODescriptorType
    {
      public:
      // AssertionConsumerService
      // 
      typedef ::saml2::metadata::IndexedEndpointType AssertionConsumerService_type;
      typedef ::xsd::cxx::tree::sequence< AssertionConsumerService_type > AssertionConsumerService_sequence;
      typedef AssertionConsumerService_sequence::iterator AssertionConsumerService_iterator;
      typedef AssertionConsumerService_sequence::const_iterator AssertionConsumerService_const_iterator;
      typedef ::xsd::cxx::tree::traits< AssertionConsumerService_type, wchar_t > AssertionConsumerService_traits;

      const AssertionConsumerService_sequence&
      AssertionConsumerService () const;

      AssertionConsumerService_sequence&
      AssertionConsumerService ();

      void
      AssertionConsumerService (const AssertionConsumerService_sequence& s);

      // AttributeConsumingService
      // 
      typedef ::saml2::metadata::AttributeConsumingServiceType AttributeConsumingService_type;
      typedef ::xsd::cxx::tree::sequence< AttributeConsumingService_type > AttributeConsumingService_sequence;
      typedef AttributeConsumingService_sequence::iterator AttributeConsumingService_iterator;
      typedef AttributeConsumingService_sequence::const_iterator AttributeConsumingService_const_iterator;
      typedef ::xsd::cxx::tree::traits< AttributeConsumingService_type, wchar_t > AttributeConsumingService_traits;

      const AttributeConsumingService_sequence&
      AttributeConsumingService () const;

      AttributeConsumingService_sequence&
      AttributeConsumingService ();

      void
      AttributeConsumingService (const AttributeConsumingService_sequence& s);

      // AuthnRequestsSigned
      // 
      typedef ::xml_schema::boolean AuthnRequestsSigned_type;
      typedef ::xsd::cxx::tree::optional< AuthnRequestsSigned_type > AuthnRequestsSigned_optional;
      typedef ::xsd::cxx::tree::traits< AuthnRequestsSigned_type, wchar_t > AuthnRequestsSigned_traits;

      const AuthnRequestsSigned_optional&
      AuthnRequestsSigned () const;

      AuthnRequestsSigned_optional&
      AuthnRequestsSigned ();

      void
      AuthnRequestsSigned (const AuthnRequestsSigned_type& x);

      void
      AuthnRequestsSigned (const AuthnRequestsSigned_optional& x);

      // WantAssertionsSigned
      // 
      typedef ::xml_schema::boolean WantAssertionsSigned_type;
      typedef ::xsd::cxx::tree::optional< WantAssertionsSigned_type > WantAssertionsSigned_optional;
      typedef ::xsd::cxx::tree::traits< WantAssertionsSigned_type, wchar_t > WantAssertionsSigned_traits;

      const WantAssertionsSigned_optional&
      WantAssertionsSigned () const;

      WantAssertionsSigned_optional&
      WantAssertionsSigned ();

      void
      WantAssertionsSigned (const WantAssertionsSigned_type& x);

      void
      WantAssertionsSigned (const WantAssertionsSigned_optional& x);

      // Constructors.
      //
      SPSSODescriptorType ();

      SPSSODescriptorType (const protocolSupportEnumeration_type&);

      SPSSODescriptorType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      SPSSODescriptorType (const SPSSODescriptorType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual SPSSODescriptorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SPSSODescriptorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      AssertionConsumerService_sequence AssertionConsumerService_;
      AttributeConsumingService_sequence AttributeConsumingService_;
      AuthnRequestsSigned_optional AuthnRequestsSigned_;
      WantAssertionsSigned_optional WantAssertionsSigned_;
    };

    class AttributeConsumingServiceType: public ::xml_schema::type
    {
      public:
      // ServiceName
      // 
      typedef ::saml2::metadata::localizedNameType ServiceName_type;
      typedef ::xsd::cxx::tree::sequence< ServiceName_type > ServiceName_sequence;
      typedef ServiceName_sequence::iterator ServiceName_iterator;
      typedef ServiceName_sequence::const_iterator ServiceName_const_iterator;
      typedef ::xsd::cxx::tree::traits< ServiceName_type, wchar_t > ServiceName_traits;

      const ServiceName_sequence&
      ServiceName () const;

      ServiceName_sequence&
      ServiceName ();

      void
      ServiceName (const ServiceName_sequence& s);

      // ServiceDescription
      // 
      typedef ::saml2::metadata::localizedNameType ServiceDescription_type;
      typedef ::xsd::cxx::tree::sequence< ServiceDescription_type > ServiceDescription_sequence;
      typedef ServiceDescription_sequence::iterator ServiceDescription_iterator;
      typedef ServiceDescription_sequence::const_iterator ServiceDescription_const_iterator;
      typedef ::xsd::cxx::tree::traits< ServiceDescription_type, wchar_t > ServiceDescription_traits;

      const ServiceDescription_sequence&
      ServiceDescription () const;

      ServiceDescription_sequence&
      ServiceDescription ();

      void
      ServiceDescription (const ServiceDescription_sequence& s);

      // RequestedAttribute
      // 
      typedef ::saml2::metadata::RequestedAttributeType RequestedAttribute_type;
      typedef ::xsd::cxx::tree::sequence< RequestedAttribute_type > RequestedAttribute_sequence;
      typedef RequestedAttribute_sequence::iterator RequestedAttribute_iterator;
      typedef RequestedAttribute_sequence::const_iterator RequestedAttribute_const_iterator;
      typedef ::xsd::cxx::tree::traits< RequestedAttribute_type, wchar_t > RequestedAttribute_traits;

      const RequestedAttribute_sequence&
      RequestedAttribute () const;

      RequestedAttribute_sequence&
      RequestedAttribute ();

      void
      RequestedAttribute (const RequestedAttribute_sequence& s);

      // index
      // 
      typedef ::xml_schema::unsigned_short index_type;
      typedef ::xsd::cxx::tree::traits< index_type, wchar_t > index_traits;

      const index_type&
      index () const;

      index_type&
      index ();

      void
      index (const index_type& x);

      // isDefault
      // 
      typedef ::xml_schema::boolean isDefault_type;
      typedef ::xsd::cxx::tree::optional< isDefault_type > isDefault_optional;
      typedef ::xsd::cxx::tree::traits< isDefault_type, wchar_t > isDefault_traits;

      const isDefault_optional&
      isDefault () const;

      isDefault_optional&
      isDefault ();

      void
      isDefault (const isDefault_type& x);

      void
      isDefault (const isDefault_optional& x);

      // Constructors.
      //
      AttributeConsumingServiceType ();

      AttributeConsumingServiceType (const index_type&);

      AttributeConsumingServiceType (const ::xercesc::DOMElement& e,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      AttributeConsumingServiceType (const AttributeConsumingServiceType& x,
                                     ::xml_schema::flags f = 0,
                                     ::xml_schema::container* c = 0);

      virtual AttributeConsumingServiceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AttributeConsumingServiceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ServiceName_sequence ServiceName_;
      ServiceDescription_sequence ServiceDescription_;
      RequestedAttribute_sequence RequestedAttribute_;
      ::xsd::cxx::tree::one< index_type > index_;
      isDefault_optional isDefault_;
    };

    class RequestedAttributeType: public ::saml2::assertion::AttributeType
    {
      public:
      // isRequired
      // 
      typedef ::xml_schema::boolean isRequired_type;
      typedef ::xsd::cxx::tree::optional< isRequired_type > isRequired_optional;
      typedef ::xsd::cxx::tree::traits< isRequired_type, wchar_t > isRequired_traits;

      const isRequired_optional&
      isRequired () const;

      isRequired_optional&
      isRequired ();

      void
      isRequired (const isRequired_type& x);

      void
      isRequired (const isRequired_optional& x);

      // Constructors.
      //
      RequestedAttributeType ();

      RequestedAttributeType (const Name_type&);

      RequestedAttributeType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      RequestedAttributeType (const RequestedAttributeType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual RequestedAttributeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RequestedAttributeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      isRequired_optional isRequired_;
    };

    class AuthnAuthorityDescriptorType: public ::saml2::metadata::RoleDescriptorType
    {
      public:
      // AuthnQueryService
      // 
      typedef ::saml2::metadata::EndpointType AuthnQueryService_type;
      typedef ::xsd::cxx::tree::sequence< AuthnQueryService_type > AuthnQueryService_sequence;
      typedef AuthnQueryService_sequence::iterator AuthnQueryService_iterator;
      typedef AuthnQueryService_sequence::const_iterator AuthnQueryService_const_iterator;
      typedef ::xsd::cxx::tree::traits< AuthnQueryService_type, wchar_t > AuthnQueryService_traits;

      const AuthnQueryService_sequence&
      AuthnQueryService () const;

      AuthnQueryService_sequence&
      AuthnQueryService ();

      void
      AuthnQueryService (const AuthnQueryService_sequence& s);

      // AssertionIDRequestService
      // 
      typedef ::saml2::metadata::EndpointType AssertionIDRequestService_type;
      typedef ::xsd::cxx::tree::sequence< AssertionIDRequestService_type > AssertionIDRequestService_sequence;
      typedef AssertionIDRequestService_sequence::iterator AssertionIDRequestService_iterator;
      typedef AssertionIDRequestService_sequence::const_iterator AssertionIDRequestService_const_iterator;
      typedef ::xsd::cxx::tree::traits< AssertionIDRequestService_type, wchar_t > AssertionIDRequestService_traits;

      const AssertionIDRequestService_sequence&
      AssertionIDRequestService () const;

      AssertionIDRequestService_sequence&
      AssertionIDRequestService ();

      void
      AssertionIDRequestService (const AssertionIDRequestService_sequence& s);

      // NameIDFormat
      // 
      typedef ::xml_schema::uri NameIDFormat_type;
      typedef ::xsd::cxx::tree::sequence< NameIDFormat_type > NameIDFormat_sequence;
      typedef NameIDFormat_sequence::iterator NameIDFormat_iterator;
      typedef NameIDFormat_sequence::const_iterator NameIDFormat_const_iterator;
      typedef ::xsd::cxx::tree::traits< NameIDFormat_type, wchar_t > NameIDFormat_traits;

      const NameIDFormat_sequence&
      NameIDFormat () const;

      NameIDFormat_sequence&
      NameIDFormat ();

      void
      NameIDFormat (const NameIDFormat_sequence& s);

      // Constructors.
      //
      AuthnAuthorityDescriptorType ();

      AuthnAuthorityDescriptorType (const protocolSupportEnumeration_type&);

      AuthnAuthorityDescriptorType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      AuthnAuthorityDescriptorType (const AuthnAuthorityDescriptorType& x,
                                    ::xml_schema::flags f = 0,
                                    ::xml_schema::container* c = 0);

      virtual AuthnAuthorityDescriptorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AuthnAuthorityDescriptorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      AuthnQueryService_sequence AuthnQueryService_;
      AssertionIDRequestService_sequence AssertionIDRequestService_;
      NameIDFormat_sequence NameIDFormat_;
    };

    class PDPDescriptorType: public ::saml2::metadata::RoleDescriptorType
    {
      public:
      // AuthzService
      // 
      typedef ::saml2::metadata::EndpointType AuthzService_type;
      typedef ::xsd::cxx::tree::sequence< AuthzService_type > AuthzService_sequence;
      typedef AuthzService_sequence::iterator AuthzService_iterator;
      typedef AuthzService_sequence::const_iterator AuthzService_const_iterator;
      typedef ::xsd::cxx::tree::traits< AuthzService_type, wchar_t > AuthzService_traits;

      const AuthzService_sequence&
      AuthzService () const;

      AuthzService_sequence&
      AuthzService ();

      void
      AuthzService (const AuthzService_sequence& s);

      // AssertionIDRequestService
      // 
      typedef ::saml2::metadata::EndpointType AssertionIDRequestService_type;
      typedef ::xsd::cxx::tree::sequence< AssertionIDRequestService_type > AssertionIDRequestService_sequence;
      typedef AssertionIDRequestService_sequence::iterator AssertionIDRequestService_iterator;
      typedef AssertionIDRequestService_sequence::const_iterator AssertionIDRequestService_const_iterator;
      typedef ::xsd::cxx::tree::traits< AssertionIDRequestService_type, wchar_t > AssertionIDRequestService_traits;

      const AssertionIDRequestService_sequence&
      AssertionIDRequestService () const;

      AssertionIDRequestService_sequence&
      AssertionIDRequestService ();

      void
      AssertionIDRequestService (const AssertionIDRequestService_sequence& s);

      // NameIDFormat
      // 
      typedef ::xml_schema::uri NameIDFormat_type;
      typedef ::xsd::cxx::tree::sequence< NameIDFormat_type > NameIDFormat_sequence;
      typedef NameIDFormat_sequence::iterator NameIDFormat_iterator;
      typedef NameIDFormat_sequence::const_iterator NameIDFormat_const_iterator;
      typedef ::xsd::cxx::tree::traits< NameIDFormat_type, wchar_t > NameIDFormat_traits;

      const NameIDFormat_sequence&
      NameIDFormat () const;

      NameIDFormat_sequence&
      NameIDFormat ();

      void
      NameIDFormat (const NameIDFormat_sequence& s);

      // Constructors.
      //
      PDPDescriptorType ();

      PDPDescriptorType (const protocolSupportEnumeration_type&);

      PDPDescriptorType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      PDPDescriptorType (const PDPDescriptorType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual PDPDescriptorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PDPDescriptorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      AuthzService_sequence AuthzService_;
      AssertionIDRequestService_sequence AssertionIDRequestService_;
      NameIDFormat_sequence NameIDFormat_;
    };

    class AttributeAuthorityDescriptorType: public ::saml2::metadata::RoleDescriptorType
    {
      public:
      // AttributeService
      // 
      typedef ::saml2::metadata::EndpointType AttributeService_type;
      typedef ::xsd::cxx::tree::sequence< AttributeService_type > AttributeService_sequence;
      typedef AttributeService_sequence::iterator AttributeService_iterator;
      typedef AttributeService_sequence::const_iterator AttributeService_const_iterator;
      typedef ::xsd::cxx::tree::traits< AttributeService_type, wchar_t > AttributeService_traits;

      const AttributeService_sequence&
      AttributeService () const;

      AttributeService_sequence&
      AttributeService ();

      void
      AttributeService (const AttributeService_sequence& s);

      // AssertionIDRequestService
      // 
      typedef ::saml2::metadata::EndpointType AssertionIDRequestService_type;
      typedef ::xsd::cxx::tree::sequence< AssertionIDRequestService_type > AssertionIDRequestService_sequence;
      typedef AssertionIDRequestService_sequence::iterator AssertionIDRequestService_iterator;
      typedef AssertionIDRequestService_sequence::const_iterator AssertionIDRequestService_const_iterator;
      typedef ::xsd::cxx::tree::traits< AssertionIDRequestService_type, wchar_t > AssertionIDRequestService_traits;

      const AssertionIDRequestService_sequence&
      AssertionIDRequestService () const;

      AssertionIDRequestService_sequence&
      AssertionIDRequestService ();

      void
      AssertionIDRequestService (const AssertionIDRequestService_sequence& s);

      // NameIDFormat
      // 
      typedef ::xml_schema::uri NameIDFormat_type;
      typedef ::xsd::cxx::tree::sequence< NameIDFormat_type > NameIDFormat_sequence;
      typedef NameIDFormat_sequence::iterator NameIDFormat_iterator;
      typedef NameIDFormat_sequence::const_iterator NameIDFormat_const_iterator;
      typedef ::xsd::cxx::tree::traits< NameIDFormat_type, wchar_t > NameIDFormat_traits;

      const NameIDFormat_sequence&
      NameIDFormat () const;

      NameIDFormat_sequence&
      NameIDFormat ();

      void
      NameIDFormat (const NameIDFormat_sequence& s);

      // AttributeProfile
      // 
      typedef ::xml_schema::uri AttributeProfile_type;
      typedef ::xsd::cxx::tree::sequence< AttributeProfile_type > AttributeProfile_sequence;
      typedef AttributeProfile_sequence::iterator AttributeProfile_iterator;
      typedef AttributeProfile_sequence::const_iterator AttributeProfile_const_iterator;
      typedef ::xsd::cxx::tree::traits< AttributeProfile_type, wchar_t > AttributeProfile_traits;

      const AttributeProfile_sequence&
      AttributeProfile () const;

      AttributeProfile_sequence&
      AttributeProfile ();

      void
      AttributeProfile (const AttributeProfile_sequence& s);

      // Attribute
      // 
      typedef ::saml2::assertion::AttributeType Attribute_type;
      typedef ::xsd::cxx::tree::sequence< Attribute_type > Attribute_sequence;
      typedef Attribute_sequence::iterator Attribute_iterator;
      typedef Attribute_sequence::const_iterator Attribute_const_iterator;
      typedef ::xsd::cxx::tree::traits< Attribute_type, wchar_t > Attribute_traits;

      const Attribute_sequence&
      Attribute () const;

      Attribute_sequence&
      Attribute ();

      void
      Attribute (const Attribute_sequence& s);

      // Constructors.
      //
      AttributeAuthorityDescriptorType ();

      AttributeAuthorityDescriptorType (const protocolSupportEnumeration_type&);

      AttributeAuthorityDescriptorType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      AttributeAuthorityDescriptorType (const AttributeAuthorityDescriptorType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual AttributeAuthorityDescriptorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AttributeAuthorityDescriptorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      AttributeService_sequence AttributeService_;
      AssertionIDRequestService_sequence AssertionIDRequestService_;
      NameIDFormat_sequence NameIDFormat_;
      AttributeProfile_sequence AttributeProfile_;
      Attribute_sequence Attribute_;
    };

    class AffiliationDescriptorType: public ::xml_schema::type
    {
      public:
      // Signature
      // 
      typedef ::w3::xmldsig::SignatureType Signature_type;
      typedef ::xsd::cxx::tree::optional< Signature_type > Signature_optional;
      typedef ::xsd::cxx::tree::traits< Signature_type, wchar_t > Signature_traits;

      const Signature_optional&
      Signature () const;

      Signature_optional&
      Signature ();

      void
      Signature (const Signature_type& x);

      void
      Signature (const Signature_optional& x);

      void
      Signature (::std::auto_ptr< Signature_type > p);

      // Extensions
      // 
      typedef ::saml2::metadata::ExtensionsType Extensions_type;
      typedef ::xsd::cxx::tree::optional< Extensions_type > Extensions_optional;
      typedef ::xsd::cxx::tree::traits< Extensions_type, wchar_t > Extensions_traits;

      const Extensions_optional&
      Extensions () const;

      Extensions_optional&
      Extensions ();

      void
      Extensions (const Extensions_type& x);

      void
      Extensions (const Extensions_optional& x);

      void
      Extensions (::std::auto_ptr< Extensions_type > p);

      // AffiliateMember
      // 
      typedef ::saml2::metadata::entityIDType AffiliateMember_type;
      typedef ::xsd::cxx::tree::sequence< AffiliateMember_type > AffiliateMember_sequence;
      typedef AffiliateMember_sequence::iterator AffiliateMember_iterator;
      typedef AffiliateMember_sequence::const_iterator AffiliateMember_const_iterator;
      typedef ::xsd::cxx::tree::traits< AffiliateMember_type, wchar_t > AffiliateMember_traits;

      const AffiliateMember_sequence&
      AffiliateMember () const;

      AffiliateMember_sequence&
      AffiliateMember ();

      void
      AffiliateMember (const AffiliateMember_sequence& s);

      // KeyDescriptor
      // 
      typedef ::saml2::metadata::KeyDescriptorType KeyDescriptor_type;
      typedef ::xsd::cxx::tree::sequence< KeyDescriptor_type > KeyDescriptor_sequence;
      typedef KeyDescriptor_sequence::iterator KeyDescriptor_iterator;
      typedef KeyDescriptor_sequence::const_iterator KeyDescriptor_const_iterator;
      typedef ::xsd::cxx::tree::traits< KeyDescriptor_type, wchar_t > KeyDescriptor_traits;

      const KeyDescriptor_sequence&
      KeyDescriptor () const;

      KeyDescriptor_sequence&
      KeyDescriptor ();

      void
      KeyDescriptor (const KeyDescriptor_sequence& s);

      // affiliationOwnerID
      // 
      typedef ::saml2::metadata::entityIDType affiliationOwnerID_type;
      typedef ::xsd::cxx::tree::traits< affiliationOwnerID_type, wchar_t > affiliationOwnerID_traits;

      const affiliationOwnerID_type&
      affiliationOwnerID () const;

      affiliationOwnerID_type&
      affiliationOwnerID ();

      void
      affiliationOwnerID (const affiliationOwnerID_type& x);

      void
      affiliationOwnerID (::std::auto_ptr< affiliationOwnerID_type > p);

      // validUntil
      // 
      typedef ::xml_schema::date_time validUntil_type;
      typedef ::xsd::cxx::tree::optional< validUntil_type > validUntil_optional;
      typedef ::xsd::cxx::tree::traits< validUntil_type, wchar_t > validUntil_traits;

      const validUntil_optional&
      validUntil () const;

      validUntil_optional&
      validUntil ();

      void
      validUntil (const validUntil_type& x);

      void
      validUntil (const validUntil_optional& x);

      void
      validUntil (::std::auto_ptr< validUntil_type > p);

      // cacheDuration
      // 
      typedef ::xml_schema::duration cacheDuration_type;
      typedef ::xsd::cxx::tree::optional< cacheDuration_type > cacheDuration_optional;
      typedef ::xsd::cxx::tree::traits< cacheDuration_type, wchar_t > cacheDuration_traits;

      const cacheDuration_optional&
      cacheDuration () const;

      cacheDuration_optional&
      cacheDuration ();

      void
      cacheDuration (const cacheDuration_type& x);

      void
      cacheDuration (const cacheDuration_optional& x);

      void
      cacheDuration (::std::auto_ptr< cacheDuration_type > p);

      // ID
      // 
      typedef ::xml_schema::id ID_type;
      typedef ::xsd::cxx::tree::optional< ID_type > ID_optional;
      typedef ::xsd::cxx::tree::traits< ID_type, wchar_t > ID_traits;

      const ID_optional&
      ID () const;

      ID_optional&
      ID ();

      void
      ID (const ID_type& x);

      void
      ID (const ID_optional& x);

      void
      ID (::std::auto_ptr< ID_type > p);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      AffiliationDescriptorType ();

      AffiliationDescriptorType (const affiliationOwnerID_type&);

      AffiliationDescriptorType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      AffiliationDescriptorType (const AffiliationDescriptorType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual AffiliationDescriptorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AffiliationDescriptorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      Signature_optional Signature_;
      Extensions_optional Extensions_;
      AffiliateMember_sequence AffiliateMember_;
      KeyDescriptor_sequence KeyDescriptor_;
      ::xsd::cxx::tree::one< affiliationOwnerID_type > affiliationOwnerID_;
      validUntil_optional validUntil_;
      cacheDuration_optional cacheDuration_;
      ID_optional ID_;
      any_attribute_set any_attribute_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace saml2
{
  namespace metadata
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::std::wstring& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::std::wstring& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::std::wstring& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::std::istream& is,
                const ::std::wstring& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ExtensionsType >
    Extensions (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::std::wstring& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::std::wstring& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::std::wstring& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::std::istream& is,
                        const ::std::wstring& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntitiesDescriptorType >
    EntitiesDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::std::wstring& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::std::wstring& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::std::wstring& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::std::istream& is,
                      const ::std::wstring& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EntityDescriptorType >
    EntityDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::std::wstring& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::std::wstring& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::std::wstring& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::std::istream& is,
                  const ::std::wstring& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::OrganizationType >
    Organization (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::std::wstring& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::std::wstring& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::std::wstring& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::std::istream& is,
                      const ::std::wstring& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::std::wstring& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::std::wstring& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::std::wstring& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream& is,
                             const ::std::wstring& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream& is,
                             const ::std::wstring& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::std::istream& is,
                             const ::std::wstring& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    OrganizationDisplayName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::std::wstring& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::std::wstring& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::std::wstring& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::std::istream& is,
                     const ::std::wstring& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedURIType >
    OrganizationURL (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::std::wstring& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::std::wstring& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::std::wstring& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::std::istream& is,
                   const ::std::wstring& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::ContactType >
    ContactPerson (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::std::wstring& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::std::wstring& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::std::wstring& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (::std::istream& is,
             const ::std::wstring& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Company (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Company (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Company (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::std::wstring& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::std::wstring& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::std::wstring& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::std::istream& is,
               const ::std::wstring& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    GivenName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::std::wstring& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::std::wstring& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::std::wstring& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::std::istream& is,
             const ::std::wstring& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SurName (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SurName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::std::wstring& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::std::wstring& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::std::wstring& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::std::istream& is,
                  const ::std::wstring& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    EmailAddress (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::std::wstring& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::std::wstring& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::std::wstring& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::std::istream& is,
                     const ::std::wstring& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    TelephoneNumber (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::std::wstring& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::std::wstring& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::std::wstring& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream& is,
                                const ::std::wstring& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream& is,
                                const ::std::wstring& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::std::istream& is,
                                const ::std::wstring& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AdditionalMetadataLocationType >
    AdditionalMetadataLocation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::std::wstring& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::std::wstring& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::std::wstring& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::std::istream& is,
                    const ::std::wstring& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RoleDescriptorType >
    RoleDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::std::wstring& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::std::wstring& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::std::wstring& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::std::istream& is,
                   const ::std::wstring& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::KeyDescriptorType >
    KeyDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::std::wstring& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::std::wstring& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::std::wstring& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::std::istream& is,
                      const ::std::wstring& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionMethodType >
    EncryptionMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::std::wstring& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::std::wstring& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::std::wstring& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream& is,
                               const ::std::wstring& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream& is,
                               const ::std::wstring& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::std::istream& is,
                               const ::std::wstring& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    ArtifactResolutionService (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::std::wstring& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::std::wstring& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::std::wstring& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::std::istream& is,
                         const ::std::wstring& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleLogoutService (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::std::wstring& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::std::wstring& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::std::wstring& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::std::istream& is,
                         const ::std::wstring& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    ManageNameIDService (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::std::wstring& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::std::wstring& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::std::wstring& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::std::istream& is,
                  const ::std::wstring& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    NameIDFormat (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::std::wstring& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::std::wstring& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::std::wstring& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::std::istream& is,
                      const ::std::wstring& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IDPSSODescriptorType >
    IDPSSODescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::std::wstring& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::std::wstring& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::std::wstring& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::std::istream& is,
                         const ::std::wstring& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    SingleSignOnService (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::std::wstring& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::std::wstring& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::std::wstring& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream& is,
                          const ::std::wstring& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream& is,
                          const ::std::wstring& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::std::istream& is,
                          const ::std::wstring& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    NameIDMappingService (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::std::wstring& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::std::wstring& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::std::wstring& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream& is,
                               const ::std::wstring& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream& is,
                               const ::std::wstring& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::std::istream& is,
                               const ::std::wstring& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AssertionIDRequestService (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::std::wstring& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::std::wstring& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::std::wstring& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::std::istream& is,
                      const ::std::wstring& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    AttributeProfile (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::std::wstring& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::std::wstring& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::std::wstring& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::std::istream& is,
                     const ::std::wstring& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::SPSSODescriptorType >
    SPSSODescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::std::wstring& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::std::wstring& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::std::wstring& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream& is,
                              const ::std::wstring& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream& is,
                              const ::std::wstring& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::std::istream& is,
                              const ::std::wstring& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::IndexedEndpointType >
    AssertionConsumerService (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::std::wstring& uri,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::std::wstring& uri,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::std::wstring& uri,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream& is,
                               const ::std::wstring& id,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream& is,
                               const ::std::wstring& id,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::std::istream& is,
                               const ::std::wstring& id,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::xercesc::InputSource& is,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::xercesc::InputSource& is,
                               ::xml_schema::error_handler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::xercesc::InputSource& is,
                               ::xercesc::DOMErrorHandler& eh,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeConsumingServiceType >
    AttributeConsumingService (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f = 0,
                               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::std::wstring& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::std::wstring& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::std::wstring& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::std::istream& is,
                 const ::std::wstring& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceName (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::std::wstring& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::std::wstring& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::std::wstring& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::std::istream& is,
                        const ::std::wstring& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::localizedNameType >
    ServiceDescription (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::std::wstring& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::std::wstring& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::std::wstring& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::std::istream& is,
                        const ::std::wstring& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::RequestedAttributeType >
    RequestedAttribute (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::std::wstring& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::std::wstring& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::std::wstring& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream& is,
                              const ::std::wstring& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream& is,
                              const ::std::wstring& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::std::istream& is,
                              const ::std::wstring& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AuthnAuthorityDescriptorType >
    AuthnAuthorityDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::std::wstring& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::std::wstring& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::std::wstring& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream& is,
                       const ::std::wstring& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream& is,
                       const ::std::wstring& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::std::istream& is,
                       const ::std::wstring& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthnQueryService (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::std::wstring& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::std::wstring& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::std::wstring& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::std::istream& is,
                   const ::std::wstring& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::PDPDescriptorType >
    PDPDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::std::wstring& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::std::wstring& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::std::wstring& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::std::istream& is,
                  const ::std::wstring& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AuthzService (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::std::wstring& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::std::wstring& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::std::wstring& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream& is,
                                  const ::std::wstring& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream& is,
                                  const ::std::wstring& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::std::istream& is,
                                  const ::std::wstring& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AttributeAuthorityDescriptorType >
    AttributeAuthorityDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::std::wstring& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::std::wstring& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::std::wstring& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::std::istream& is,
                      const ::std::wstring& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::EndpointType >
    AttributeService (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::std::wstring& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::std::wstring& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::std::wstring& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream& is,
                           const ::std::wstring& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream& is,
                           const ::std::wstring& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::std::istream& is,
                           const ::std::wstring& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::AffiliationDescriptorType >
    AffiliationDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::std::wstring& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::std::wstring& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::std::wstring& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::std::istream& is,
                     const ::std::wstring& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::metadata::entityIDType >
    AffiliateMember (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace saml2
{
  namespace metadata
  {
    void
    operator<< (::xercesc::DOMElement&, const entityIDType&);

    void
    operator<< (::xercesc::DOMAttr&, const entityIDType&);

    void
    operator<< (::xml_schema::list_stream&,
                const entityIDType&);

    void
    operator<< (::xercesc::DOMElement&, const localizedNameType&);

    void
    operator<< (::xercesc::DOMElement&, const localizedURIType&);

    // Serialize to std::ostream.
    //

    void
    Extensions (::std::ostream& os,
                const ::saml2::metadata::ExtensionsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Extensions (::std::ostream& os,
                const ::saml2::metadata::ExtensionsType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Extensions (::std::ostream& os,
                const ::saml2::metadata::ExtensionsType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Extensions (::xercesc::XMLFormatTarget& ft,
                const ::saml2::metadata::ExtensionsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Extensions (::xercesc::XMLFormatTarget& ft,
                const ::saml2::metadata::ExtensionsType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Extensions (::xercesc::XMLFormatTarget& ft,
                const ::saml2::metadata::ExtensionsType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Extensions (::xercesc::DOMDocument& d,
                const ::saml2::metadata::ExtensionsType& x,
                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Extensions (const ::saml2::metadata::ExtensionsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ExtensionsType&);

    void
    operator<< (::xercesc::DOMElement&, const EndpointType&);

    void
    operator<< (::xercesc::DOMElement&, const IndexedEndpointType&);

    // Serialize to std::ostream.
    //

    void
    EntitiesDescriptor (::std::ostream& os,
                        const ::saml2::metadata::EntitiesDescriptorType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EntitiesDescriptor (::std::ostream& os,
                        const ::saml2::metadata::EntitiesDescriptorType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EntitiesDescriptor (::std::ostream& os,
                        const ::saml2::metadata::EntitiesDescriptorType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EntitiesDescriptor (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::metadata::EntitiesDescriptorType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EntitiesDescriptor (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::metadata::EntitiesDescriptorType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EntitiesDescriptor (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::metadata::EntitiesDescriptorType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EntitiesDescriptor (::xercesc::DOMDocument& d,
                        const ::saml2::metadata::EntitiesDescriptorType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EntitiesDescriptor (const ::saml2::metadata::EntitiesDescriptorType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const EntitiesDescriptorType&);

    // Serialize to std::ostream.
    //

    void
    EntityDescriptor (::std::ostream& os,
                      const ::saml2::metadata::EntityDescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    EntityDescriptor (::std::ostream& os,
                      const ::saml2::metadata::EntityDescriptorType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    EntityDescriptor (::std::ostream& os,
                      const ::saml2::metadata::EntityDescriptorType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EntityDescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::metadata::EntityDescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    EntityDescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::metadata::EntityDescriptorType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    EntityDescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::metadata::EntityDescriptorType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EntityDescriptor (::xercesc::DOMDocument& d,
                      const ::saml2::metadata::EntityDescriptorType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EntityDescriptor (const ::saml2::metadata::EntityDescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const EntityDescriptorType&);

    // Serialize to std::ostream.
    //

    void
    Organization (::std::ostream& os,
                  const ::saml2::metadata::OrganizationType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    Organization (::std::ostream& os,
                  const ::saml2::metadata::OrganizationType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    Organization (::std::ostream& os,
                  const ::saml2::metadata::OrganizationType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Organization (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::metadata::OrganizationType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    Organization (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::metadata::OrganizationType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    Organization (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::metadata::OrganizationType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Organization (::xercesc::DOMDocument& d,
                  const ::saml2::metadata::OrganizationType& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Organization (const ::saml2::metadata::OrganizationType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const OrganizationType&);

    // Serialize to std::ostream.
    //

    void
    OrganizationName (::std::ostream& os,
                      const ::saml2::metadata::localizedNameType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    OrganizationName (::std::ostream& os,
                      const ::saml2::metadata::localizedNameType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    OrganizationName (::std::ostream& os,
                      const ::saml2::metadata::localizedNameType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OrganizationName (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::metadata::localizedNameType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    OrganizationName (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::metadata::localizedNameType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    OrganizationName (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::metadata::localizedNameType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OrganizationName (::xercesc::DOMDocument& d,
                      const ::saml2::metadata::localizedNameType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OrganizationName (const ::saml2::metadata::localizedNameType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OrganizationDisplayName (::std::ostream& os,
                             const ::saml2::metadata::localizedNameType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    OrganizationDisplayName (::std::ostream& os,
                             const ::saml2::metadata::localizedNameType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    OrganizationDisplayName (::std::ostream& os,
                             const ::saml2::metadata::localizedNameType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OrganizationDisplayName (::xercesc::XMLFormatTarget& ft,
                             const ::saml2::metadata::localizedNameType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    OrganizationDisplayName (::xercesc::XMLFormatTarget& ft,
                             const ::saml2::metadata::localizedNameType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    OrganizationDisplayName (::xercesc::XMLFormatTarget& ft,
                             const ::saml2::metadata::localizedNameType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OrganizationDisplayName (::xercesc::DOMDocument& d,
                             const ::saml2::metadata::localizedNameType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OrganizationDisplayName (const ::saml2::metadata::localizedNameType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    OrganizationURL (::std::ostream& os,
                     const ::saml2::metadata::localizedURIType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    OrganizationURL (::std::ostream& os,
                     const ::saml2::metadata::localizedURIType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    OrganizationURL (::std::ostream& os,
                     const ::saml2::metadata::localizedURIType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    OrganizationURL (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::metadata::localizedURIType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    OrganizationURL (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::metadata::localizedURIType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    OrganizationURL (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::metadata::localizedURIType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    OrganizationURL (::xercesc::DOMDocument& d,
                     const ::saml2::metadata::localizedURIType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    OrganizationURL (const ::saml2::metadata::localizedURIType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ContactPerson (::std::ostream& os,
                   const ::saml2::metadata::ContactType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    ContactPerson (::std::ostream& os,
                   const ::saml2::metadata::ContactType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    ContactPerson (::std::ostream& os,
                   const ::saml2::metadata::ContactType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ContactPerson (::xercesc::XMLFormatTarget& ft,
                   const ::saml2::metadata::ContactType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    ContactPerson (::xercesc::XMLFormatTarget& ft,
                   const ::saml2::metadata::ContactType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    ContactPerson (::xercesc::XMLFormatTarget& ft,
                   const ::saml2::metadata::ContactType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ContactPerson (::xercesc::DOMDocument& d,
                   const ::saml2::metadata::ContactType& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ContactPerson (const ::saml2::metadata::ContactType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ContactType&);

    // Serialize to std::ostream.
    //

    void
    Company (::std::ostream& os,
             const ::xml_schema::string& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Company (::std::ostream& os,
             const ::xml_schema::string& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Company (::std::ostream& os,
             const ::xml_schema::string& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Company (::xercesc::XMLFormatTarget& ft,
             const ::xml_schema::string& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Company (::xercesc::XMLFormatTarget& ft,
             const ::xml_schema::string& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Company (::xercesc::XMLFormatTarget& ft,
             const ::xml_schema::string& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Company (::xercesc::DOMDocument& d,
             const ::xml_schema::string& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Company (const ::xml_schema::string& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    GivenName (::std::ostream& os,
               const ::xml_schema::string& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    GivenName (::std::ostream& os,
               const ::xml_schema::string& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    GivenName (::std::ostream& os,
               const ::xml_schema::string& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    GivenName (::xercesc::XMLFormatTarget& ft,
               const ::xml_schema::string& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    GivenName (::xercesc::XMLFormatTarget& ft,
               const ::xml_schema::string& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    GivenName (::xercesc::XMLFormatTarget& ft,
               const ::xml_schema::string& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    GivenName (::xercesc::DOMDocument& d,
               const ::xml_schema::string& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    GivenName (const ::xml_schema::string& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SurName (::std::ostream& os,
             const ::xml_schema::string& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    SurName (::std::ostream& os,
             const ::xml_schema::string& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    SurName (::std::ostream& os,
             const ::xml_schema::string& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SurName (::xercesc::XMLFormatTarget& ft,
             const ::xml_schema::string& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    SurName (::xercesc::XMLFormatTarget& ft,
             const ::xml_schema::string& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    SurName (::xercesc::XMLFormatTarget& ft,
             const ::xml_schema::string& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SurName (::xercesc::DOMDocument& d,
             const ::xml_schema::string& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SurName (const ::xml_schema::string& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    EmailAddress (::std::ostream& os,
                  const ::xml_schema::uri& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    EmailAddress (::std::ostream& os,
                  const ::xml_schema::uri& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    EmailAddress (::std::ostream& os,
                  const ::xml_schema::uri& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EmailAddress (::xercesc::XMLFormatTarget& ft,
                  const ::xml_schema::uri& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    EmailAddress (::xercesc::XMLFormatTarget& ft,
                  const ::xml_schema::uri& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    EmailAddress (::xercesc::XMLFormatTarget& ft,
                  const ::xml_schema::uri& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EmailAddress (::xercesc::DOMDocument& d,
                  const ::xml_schema::uri& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EmailAddress (const ::xml_schema::uri& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    TelephoneNumber (::std::ostream& os,
                     const ::xml_schema::string& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    TelephoneNumber (::std::ostream& os,
                     const ::xml_schema::string& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    TelephoneNumber (::std::ostream& os,
                     const ::xml_schema::string& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    TelephoneNumber (::xercesc::XMLFormatTarget& ft,
                     const ::xml_schema::string& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    TelephoneNumber (::xercesc::XMLFormatTarget& ft,
                     const ::xml_schema::string& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    TelephoneNumber (::xercesc::XMLFormatTarget& ft,
                     const ::xml_schema::string& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    TelephoneNumber (::xercesc::DOMDocument& d,
                     const ::xml_schema::string& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    TelephoneNumber (const ::xml_schema::string& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ContactTypeType&);

    void
    operator<< (::xercesc::DOMAttr&, const ContactTypeType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ContactTypeType&);

    // Serialize to std::ostream.
    //

    void
    AdditionalMetadataLocation (::std::ostream& os,
                                const ::saml2::metadata::AdditionalMetadataLocationType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::wstring& e = L"UTF-8",
                                ::xml_schema::flags f = 0);

    void
    AdditionalMetadataLocation (::std::ostream& os,
                                const ::saml2::metadata::AdditionalMetadataLocationType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::wstring& e = L"UTF-8",
                                ::xml_schema::flags f = 0);

    void
    AdditionalMetadataLocation (::std::ostream& os,
                                const ::saml2::metadata::AdditionalMetadataLocationType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::wstring& e = L"UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AdditionalMetadataLocation (::xercesc::XMLFormatTarget& ft,
                                const ::saml2::metadata::AdditionalMetadataLocationType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::wstring& e = L"UTF-8",
                                ::xml_schema::flags f = 0);

    void
    AdditionalMetadataLocation (::xercesc::XMLFormatTarget& ft,
                                const ::saml2::metadata::AdditionalMetadataLocationType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::wstring& e = L"UTF-8",
                                ::xml_schema::flags f = 0);

    void
    AdditionalMetadataLocation (::xercesc::XMLFormatTarget& ft,
                                const ::saml2::metadata::AdditionalMetadataLocationType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::wstring& e = L"UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AdditionalMetadataLocation (::xercesc::DOMDocument& d,
                                const ::saml2::metadata::AdditionalMetadataLocationType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AdditionalMetadataLocation (const ::saml2::metadata::AdditionalMetadataLocationType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AdditionalMetadataLocationType&);

    // Serialize to std::ostream.
    //

    void
    RoleDescriptor (::std::ostream& os,
                    const ::saml2::metadata::RoleDescriptorType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    RoleDescriptor (::std::ostream& os,
                    const ::saml2::metadata::RoleDescriptorType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    RoleDescriptor (::std::ostream& os,
                    const ::saml2::metadata::RoleDescriptorType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RoleDescriptor (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::metadata::RoleDescriptorType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    RoleDescriptor (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::metadata::RoleDescriptorType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    RoleDescriptor (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::metadata::RoleDescriptorType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RoleDescriptor (::xercesc::DOMDocument& d,
                    const ::saml2::metadata::RoleDescriptorType& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RoleDescriptor (const ::saml2::metadata::RoleDescriptorType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const RoleDescriptorType&);

    void
    operator<< (::xercesc::DOMElement&, const anyURIListType&);

    void
    operator<< (::xercesc::DOMAttr&, const anyURIListType&);

    void
    operator<< (::xml_schema::list_stream&,
                const anyURIListType&);

    // Serialize to std::ostream.
    //

    void
    KeyDescriptor (::std::ostream& os,
                   const ::saml2::metadata::KeyDescriptorType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    KeyDescriptor (::std::ostream& os,
                   const ::saml2::metadata::KeyDescriptorType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    KeyDescriptor (::std::ostream& os,
                   const ::saml2::metadata::KeyDescriptorType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    KeyDescriptor (::xercesc::XMLFormatTarget& ft,
                   const ::saml2::metadata::KeyDescriptorType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    KeyDescriptor (::xercesc::XMLFormatTarget& ft,
                   const ::saml2::metadata::KeyDescriptorType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    KeyDescriptor (::xercesc::XMLFormatTarget& ft,
                   const ::saml2::metadata::KeyDescriptorType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    KeyDescriptor (::xercesc::DOMDocument& d,
                   const ::saml2::metadata::KeyDescriptorType& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    KeyDescriptor (const ::saml2::metadata::KeyDescriptorType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const KeyDescriptorType&);

    void
    operator<< (::xercesc::DOMElement&, const KeyTypes&);

    void
    operator<< (::xercesc::DOMAttr&, const KeyTypes&);

    void
    operator<< (::xml_schema::list_stream&,
                const KeyTypes&);

    // Serialize to std::ostream.
    //

    void
    EncryptionMethod (::std::ostream& os,
                      const ::w3::xmlenc::EncryptionMethodType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    EncryptionMethod (::std::ostream& os,
                      const ::w3::xmlenc::EncryptionMethodType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    EncryptionMethod (::std::ostream& os,
                      const ::w3::xmlenc::EncryptionMethodType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EncryptionMethod (::xercesc::XMLFormatTarget& ft,
                      const ::w3::xmlenc::EncryptionMethodType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    EncryptionMethod (::xercesc::XMLFormatTarget& ft,
                      const ::w3::xmlenc::EncryptionMethodType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    EncryptionMethod (::xercesc::XMLFormatTarget& ft,
                      const ::w3::xmlenc::EncryptionMethodType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EncryptionMethod (::xercesc::DOMDocument& d,
                      const ::w3::xmlenc::EncryptionMethodType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptionMethod (const ::w3::xmlenc::EncryptionMethodType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SSODescriptorType&);

    // Serialize to std::ostream.
    //

    void
    ArtifactResolutionService (::std::ostream& os,
                               const ::saml2::metadata::IndexedEndpointType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ArtifactResolutionService (::std::ostream& os,
                               const ::saml2::metadata::IndexedEndpointType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ArtifactResolutionService (::std::ostream& os,
                               const ::saml2::metadata::IndexedEndpointType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ArtifactResolutionService (::xercesc::XMLFormatTarget& ft,
                               const ::saml2::metadata::IndexedEndpointType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ArtifactResolutionService (::xercesc::XMLFormatTarget& ft,
                               const ::saml2::metadata::IndexedEndpointType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    void
    ArtifactResolutionService (::xercesc::XMLFormatTarget& ft,
                               const ::saml2::metadata::IndexedEndpointType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ArtifactResolutionService (::xercesc::DOMDocument& d,
                               const ::saml2::metadata::IndexedEndpointType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ArtifactResolutionService (const ::saml2::metadata::IndexedEndpointType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SingleLogoutService (::std::ostream& os,
                         const ::saml2::metadata::EndpointType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SingleLogoutService (::std::ostream& os,
                         const ::saml2::metadata::EndpointType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SingleLogoutService (::std::ostream& os,
                         const ::saml2::metadata::EndpointType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SingleLogoutService (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::metadata::EndpointType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SingleLogoutService (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::metadata::EndpointType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SingleLogoutService (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::metadata::EndpointType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SingleLogoutService (::xercesc::DOMDocument& d,
                         const ::saml2::metadata::EndpointType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SingleLogoutService (const ::saml2::metadata::EndpointType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ManageNameIDService (::std::ostream& os,
                         const ::saml2::metadata::EndpointType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ManageNameIDService (::std::ostream& os,
                         const ::saml2::metadata::EndpointType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ManageNameIDService (::std::ostream& os,
                         const ::saml2::metadata::EndpointType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ManageNameIDService (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::metadata::EndpointType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ManageNameIDService (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::metadata::EndpointType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ManageNameIDService (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::metadata::EndpointType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ManageNameIDService (::xercesc::DOMDocument& d,
                         const ::saml2::metadata::EndpointType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ManageNameIDService (const ::saml2::metadata::EndpointType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    NameIDFormat (::std::ostream& os,
                  const ::xml_schema::uri& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    NameIDFormat (::std::ostream& os,
                  const ::xml_schema::uri& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    NameIDFormat (::std::ostream& os,
                  const ::xml_schema::uri& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    NameIDFormat (::xercesc::XMLFormatTarget& ft,
                  const ::xml_schema::uri& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    NameIDFormat (::xercesc::XMLFormatTarget& ft,
                  const ::xml_schema::uri& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    NameIDFormat (::xercesc::XMLFormatTarget& ft,
                  const ::xml_schema::uri& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    NameIDFormat (::xercesc::DOMDocument& d,
                  const ::xml_schema::uri& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDFormat (const ::xml_schema::uri& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    IDPSSODescriptor (::std::ostream& os,
                      const ::saml2::metadata::IDPSSODescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    IDPSSODescriptor (::std::ostream& os,
                      const ::saml2::metadata::IDPSSODescriptorType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    IDPSSODescriptor (::std::ostream& os,
                      const ::saml2::metadata::IDPSSODescriptorType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    IDPSSODescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::metadata::IDPSSODescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    IDPSSODescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::metadata::IDPSSODescriptorType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    IDPSSODescriptor (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::metadata::IDPSSODescriptorType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    IDPSSODescriptor (::xercesc::DOMDocument& d,
                      const ::saml2::metadata::IDPSSODescriptorType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    IDPSSODescriptor (const ::saml2::metadata::IDPSSODescriptorType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const IDPSSODescriptorType&);

    // Serialize to std::ostream.
    //

    void
    SingleSignOnService (::std::ostream& os,
                         const ::saml2::metadata::EndpointType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SingleSignOnService (::std::ostream& os,
                         const ::saml2::metadata::EndpointType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SingleSignOnService (::std::ostream& os,
                         const ::saml2::metadata::EndpointType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SingleSignOnService (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::metadata::EndpointType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SingleSignOnService (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::metadata::EndpointType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    SingleSignOnService (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::metadata::EndpointType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SingleSignOnService (::xercesc::DOMDocument& d,
                         const ::saml2::metadata::EndpointType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SingleSignOnService (const ::saml2::metadata::EndpointType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    NameIDMappingService (::std::ostream& os,
                          const ::saml2::metadata::EndpointType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    NameIDMappingService (::std::ostream& os,
                          const ::saml2::metadata::EndpointType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    NameIDMappingService (::std::ostream& os,
                          const ::saml2::metadata::EndpointType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    NameIDMappingService (::xercesc::XMLFormatTarget& ft,
                          const ::saml2::metadata::EndpointType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    NameIDMappingService (::xercesc::XMLFormatTarget& ft,
                          const ::saml2::metadata::EndpointType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    NameIDMappingService (::xercesc::XMLFormatTarget& ft,
                          const ::saml2::metadata::EndpointType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    NameIDMappingService (::xercesc::DOMDocument& d,
                          const ::saml2::metadata::EndpointType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDMappingService (const ::saml2::metadata::EndpointType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AssertionIDRequestService (::std::ostream& os,
                               const ::saml2::metadata::EndpointType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    void
    AssertionIDRequestService (::std::ostream& os,
                               const ::saml2::metadata::EndpointType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    void
    AssertionIDRequestService (::std::ostream& os,
                               const ::saml2::metadata::EndpointType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AssertionIDRequestService (::xercesc::XMLFormatTarget& ft,
                               const ::saml2::metadata::EndpointType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    void
    AssertionIDRequestService (::xercesc::XMLFormatTarget& ft,
                               const ::saml2::metadata::EndpointType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    void
    AssertionIDRequestService (::xercesc::XMLFormatTarget& ft,
                               const ::saml2::metadata::EndpointType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AssertionIDRequestService (::xercesc::DOMDocument& d,
                               const ::saml2::metadata::EndpointType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AssertionIDRequestService (const ::saml2::metadata::EndpointType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AttributeProfile (::std::ostream& os,
                      const ::xml_schema::uri& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    AttributeProfile (::std::ostream& os,
                      const ::xml_schema::uri& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    AttributeProfile (::std::ostream& os,
                      const ::xml_schema::uri& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AttributeProfile (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::uri& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    AttributeProfile (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::uri& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    AttributeProfile (::xercesc::XMLFormatTarget& ft,
                      const ::xml_schema::uri& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AttributeProfile (::xercesc::DOMDocument& d,
                      const ::xml_schema::uri& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeProfile (const ::xml_schema::uri& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    SPSSODescriptor (::std::ostream& os,
                     const ::saml2::metadata::SPSSODescriptorType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SPSSODescriptor (::std::ostream& os,
                     const ::saml2::metadata::SPSSODescriptorType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SPSSODescriptor (::std::ostream& os,
                     const ::saml2::metadata::SPSSODescriptorType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SPSSODescriptor (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::metadata::SPSSODescriptorType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SPSSODescriptor (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::metadata::SPSSODescriptorType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    SPSSODescriptor (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::metadata::SPSSODescriptorType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SPSSODescriptor (::xercesc::DOMDocument& d,
                     const ::saml2::metadata::SPSSODescriptorType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SPSSODescriptor (const ::saml2::metadata::SPSSODescriptorType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SPSSODescriptorType&);

    // Serialize to std::ostream.
    //

    void
    AssertionConsumerService (::std::ostream& os,
                              const ::saml2::metadata::IndexedEndpointType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::wstring& e = L"UTF-8",
                              ::xml_schema::flags f = 0);

    void
    AssertionConsumerService (::std::ostream& os,
                              const ::saml2::metadata::IndexedEndpointType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::wstring& e = L"UTF-8",
                              ::xml_schema::flags f = 0);

    void
    AssertionConsumerService (::std::ostream& os,
                              const ::saml2::metadata::IndexedEndpointType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::wstring& e = L"UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AssertionConsumerService (::xercesc::XMLFormatTarget& ft,
                              const ::saml2::metadata::IndexedEndpointType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::wstring& e = L"UTF-8",
                              ::xml_schema::flags f = 0);

    void
    AssertionConsumerService (::xercesc::XMLFormatTarget& ft,
                              const ::saml2::metadata::IndexedEndpointType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::wstring& e = L"UTF-8",
                              ::xml_schema::flags f = 0);

    void
    AssertionConsumerService (::xercesc::XMLFormatTarget& ft,
                              const ::saml2::metadata::IndexedEndpointType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::wstring& e = L"UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AssertionConsumerService (::xercesc::DOMDocument& d,
                              const ::saml2::metadata::IndexedEndpointType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AssertionConsumerService (const ::saml2::metadata::IndexedEndpointType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AttributeConsumingService (::std::ostream& os,
                               const ::saml2::metadata::AttributeConsumingServiceType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    void
    AttributeConsumingService (::std::ostream& os,
                               const ::saml2::metadata::AttributeConsumingServiceType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    void
    AttributeConsumingService (::std::ostream& os,
                               const ::saml2::metadata::AttributeConsumingServiceType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AttributeConsumingService (::xercesc::XMLFormatTarget& ft,
                               const ::saml2::metadata::AttributeConsumingServiceType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    void
    AttributeConsumingService (::xercesc::XMLFormatTarget& ft,
                               const ::saml2::metadata::AttributeConsumingServiceType& x, 
                               ::xml_schema::error_handler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    void
    AttributeConsumingService (::xercesc::XMLFormatTarget& ft,
                               const ::saml2::metadata::AttributeConsumingServiceType& x, 
                               ::xercesc::DOMErrorHandler& eh,
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               const ::std::wstring& e = L"UTF-8",
                               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AttributeConsumingService (::xercesc::DOMDocument& d,
                               const ::saml2::metadata::AttributeConsumingServiceType& x,
                               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeConsumingService (const ::saml2::metadata::AttributeConsumingServiceType& x, 
                               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                               ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AttributeConsumingServiceType&);

    // Serialize to std::ostream.
    //

    void
    ServiceName (::std::ostream& os,
                 const ::saml2::metadata::localizedNameType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    ServiceName (::std::ostream& os,
                 const ::saml2::metadata::localizedNameType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    ServiceName (::std::ostream& os,
                 const ::saml2::metadata::localizedNameType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ServiceName (::xercesc::XMLFormatTarget& ft,
                 const ::saml2::metadata::localizedNameType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    ServiceName (::xercesc::XMLFormatTarget& ft,
                 const ::saml2::metadata::localizedNameType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    ServiceName (::xercesc::XMLFormatTarget& ft,
                 const ::saml2::metadata::localizedNameType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ServiceName (::xercesc::DOMDocument& d,
                 const ::saml2::metadata::localizedNameType& x,
                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ServiceName (const ::saml2::metadata::localizedNameType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ServiceDescription (::std::ostream& os,
                        const ::saml2::metadata::localizedNameType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    ServiceDescription (::std::ostream& os,
                        const ::saml2::metadata::localizedNameType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    ServiceDescription (::std::ostream& os,
                        const ::saml2::metadata::localizedNameType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ServiceDescription (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::metadata::localizedNameType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    ServiceDescription (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::metadata::localizedNameType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    ServiceDescription (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::metadata::localizedNameType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ServiceDescription (::xercesc::DOMDocument& d,
                        const ::saml2::metadata::localizedNameType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ServiceDescription (const ::saml2::metadata::localizedNameType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    RequestedAttribute (::std::ostream& os,
                        const ::saml2::metadata::RequestedAttributeType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    RequestedAttribute (::std::ostream& os,
                        const ::saml2::metadata::RequestedAttributeType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    RequestedAttribute (::std::ostream& os,
                        const ::saml2::metadata::RequestedAttributeType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RequestedAttribute (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::metadata::RequestedAttributeType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    RequestedAttribute (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::metadata::RequestedAttributeType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    RequestedAttribute (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::metadata::RequestedAttributeType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RequestedAttribute (::xercesc::DOMDocument& d,
                        const ::saml2::metadata::RequestedAttributeType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RequestedAttribute (const ::saml2::metadata::RequestedAttributeType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const RequestedAttributeType&);

    // Serialize to std::ostream.
    //

    void
    AuthnAuthorityDescriptor (::std::ostream& os,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::wstring& e = L"UTF-8",
                              ::xml_schema::flags f = 0);

    void
    AuthnAuthorityDescriptor (::std::ostream& os,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::wstring& e = L"UTF-8",
                              ::xml_schema::flags f = 0);

    void
    AuthnAuthorityDescriptor (::std::ostream& os,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::wstring& e = L"UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AuthnAuthorityDescriptor (::xercesc::XMLFormatTarget& ft,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::wstring& e = L"UTF-8",
                              ::xml_schema::flags f = 0);

    void
    AuthnAuthorityDescriptor (::xercesc::XMLFormatTarget& ft,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& x, 
                              ::xml_schema::error_handler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::wstring& e = L"UTF-8",
                              ::xml_schema::flags f = 0);

    void
    AuthnAuthorityDescriptor (::xercesc::XMLFormatTarget& ft,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& x, 
                              ::xercesc::DOMErrorHandler& eh,
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              const ::std::wstring& e = L"UTF-8",
                              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AuthnAuthorityDescriptor (::xercesc::DOMDocument& d,
                              const ::saml2::metadata::AuthnAuthorityDescriptorType& x,
                              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnAuthorityDescriptor (const ::saml2::metadata::AuthnAuthorityDescriptorType& x, 
                              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                              ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AuthnAuthorityDescriptorType&);

    // Serialize to std::ostream.
    //

    void
    AuthnQueryService (::std::ostream& os,
                       const ::saml2::metadata::EndpointType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::wstring& e = L"UTF-8",
                       ::xml_schema::flags f = 0);

    void
    AuthnQueryService (::std::ostream& os,
                       const ::saml2::metadata::EndpointType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::wstring& e = L"UTF-8",
                       ::xml_schema::flags f = 0);

    void
    AuthnQueryService (::std::ostream& os,
                       const ::saml2::metadata::EndpointType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::wstring& e = L"UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AuthnQueryService (::xercesc::XMLFormatTarget& ft,
                       const ::saml2::metadata::EndpointType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::wstring& e = L"UTF-8",
                       ::xml_schema::flags f = 0);

    void
    AuthnQueryService (::xercesc::XMLFormatTarget& ft,
                       const ::saml2::metadata::EndpointType& x, 
                       ::xml_schema::error_handler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::wstring& e = L"UTF-8",
                       ::xml_schema::flags f = 0);

    void
    AuthnQueryService (::xercesc::XMLFormatTarget& ft,
                       const ::saml2::metadata::EndpointType& x, 
                       ::xercesc::DOMErrorHandler& eh,
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       const ::std::wstring& e = L"UTF-8",
                       ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AuthnQueryService (::xercesc::DOMDocument& d,
                       const ::saml2::metadata::EndpointType& x,
                       ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnQueryService (const ::saml2::metadata::EndpointType& x, 
                       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                       ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    PDPDescriptor (::std::ostream& os,
                   const ::saml2::metadata::PDPDescriptorType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    PDPDescriptor (::std::ostream& os,
                   const ::saml2::metadata::PDPDescriptorType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    PDPDescriptor (::std::ostream& os,
                   const ::saml2::metadata::PDPDescriptorType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PDPDescriptor (::xercesc::XMLFormatTarget& ft,
                   const ::saml2::metadata::PDPDescriptorType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    PDPDescriptor (::xercesc::XMLFormatTarget& ft,
                   const ::saml2::metadata::PDPDescriptorType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    PDPDescriptor (::xercesc::XMLFormatTarget& ft,
                   const ::saml2::metadata::PDPDescriptorType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PDPDescriptor (::xercesc::DOMDocument& d,
                   const ::saml2::metadata::PDPDescriptorType& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PDPDescriptor (const ::saml2::metadata::PDPDescriptorType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const PDPDescriptorType&);

    // Serialize to std::ostream.
    //

    void
    AuthzService (::std::ostream& os,
                  const ::saml2::metadata::EndpointType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    AuthzService (::std::ostream& os,
                  const ::saml2::metadata::EndpointType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    AuthzService (::std::ostream& os,
                  const ::saml2::metadata::EndpointType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AuthzService (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::metadata::EndpointType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    AuthzService (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::metadata::EndpointType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    AuthzService (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::metadata::EndpointType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AuthzService (::xercesc::DOMDocument& d,
                  const ::saml2::metadata::EndpointType& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthzService (const ::saml2::metadata::EndpointType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AttributeAuthorityDescriptor (::std::ostream& os,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::wstring& e = L"UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    AttributeAuthorityDescriptor (::std::ostream& os,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::wstring& e = L"UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    AttributeAuthorityDescriptor (::std::ostream& os,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::wstring& e = L"UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AttributeAuthorityDescriptor (::xercesc::XMLFormatTarget& ft,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::wstring& e = L"UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    AttributeAuthorityDescriptor (::xercesc::XMLFormatTarget& ft,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::wstring& e = L"UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    AttributeAuthorityDescriptor (::xercesc::XMLFormatTarget& ft,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::wstring& e = L"UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AttributeAuthorityDescriptor (::xercesc::DOMDocument& d,
                                  const ::saml2::metadata::AttributeAuthorityDescriptorType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeAuthorityDescriptor (const ::saml2::metadata::AttributeAuthorityDescriptorType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AttributeAuthorityDescriptorType&);

    // Serialize to std::ostream.
    //

    void
    AttributeService (::std::ostream& os,
                      const ::saml2::metadata::EndpointType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    AttributeService (::std::ostream& os,
                      const ::saml2::metadata::EndpointType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    AttributeService (::std::ostream& os,
                      const ::saml2::metadata::EndpointType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AttributeService (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::metadata::EndpointType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    AttributeService (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::metadata::EndpointType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    AttributeService (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::metadata::EndpointType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AttributeService (::xercesc::DOMDocument& d,
                      const ::saml2::metadata::EndpointType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeService (const ::saml2::metadata::EndpointType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    AffiliationDescriptor (::std::ostream& os,
                           const ::saml2::metadata::AffiliationDescriptorType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    AffiliationDescriptor (::std::ostream& os,
                           const ::saml2::metadata::AffiliationDescriptorType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    AffiliationDescriptor (::std::ostream& os,
                           const ::saml2::metadata::AffiliationDescriptorType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AffiliationDescriptor (::xercesc::XMLFormatTarget& ft,
                           const ::saml2::metadata::AffiliationDescriptorType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    AffiliationDescriptor (::xercesc::XMLFormatTarget& ft,
                           const ::saml2::metadata::AffiliationDescriptorType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    AffiliationDescriptor (::xercesc::XMLFormatTarget& ft,
                           const ::saml2::metadata::AffiliationDescriptorType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AffiliationDescriptor (::xercesc::DOMDocument& d,
                           const ::saml2::metadata::AffiliationDescriptorType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AffiliationDescriptor (const ::saml2::metadata::AffiliationDescriptorType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AffiliationDescriptorType&);

    // Serialize to std::ostream.
    //

    void
    AffiliateMember (::std::ostream& os,
                     const ::saml2::metadata::entityIDType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AffiliateMember (::std::ostream& os,
                     const ::saml2::metadata::entityIDType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AffiliateMember (::std::ostream& os,
                     const ::saml2::metadata::entityIDType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AffiliateMember (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::metadata::entityIDType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AffiliateMember (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::metadata::entityIDType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AffiliateMember (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::metadata::entityIDType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AffiliateMember (::xercesc::DOMDocument& d,
                     const ::saml2::metadata::entityIDType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AffiliateMember (const ::saml2::metadata::entityIDType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SAML_SCHEMA_METADATA_2_0_HXX
