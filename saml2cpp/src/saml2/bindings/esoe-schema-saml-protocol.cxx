// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "saml2/bindings/esoe-schema-saml-protocol.hxx"

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    // ClearAuthzCacheRequestType
    // 

    const ClearAuthzCacheRequestType::Subject_optional& ClearAuthzCacheRequestType::
    Subject () const
    {
      return this->Subject_;
    }

    ClearAuthzCacheRequestType::Subject_optional& ClearAuthzCacheRequestType::
    Subject ()
    {
      return this->Subject_;
    }

    void ClearAuthzCacheRequestType::
    Subject (const Subject_type& x)
    {
      this->Subject_.set (x);
    }

    void ClearAuthzCacheRequestType::
    Subject (const Subject_optional& x)
    {
      this->Subject_ = x;
    }

    void ClearAuthzCacheRequestType::
    Subject (::std::auto_ptr< Subject_type > x)
    {
      this->Subject_.set (x);
    }

    const ClearAuthzCacheRequestType::Reason_type& ClearAuthzCacheRequestType::
    Reason () const
    {
      return this->Reason_.get ();
    }

    ClearAuthzCacheRequestType::Reason_type& ClearAuthzCacheRequestType::
    Reason ()
    {
      return this->Reason_.get ();
    }

    void ClearAuthzCacheRequestType::
    Reason (const Reason_type& x)
    {
      this->Reason_.set (x);
    }

    void ClearAuthzCacheRequestType::
    Reason (::std::auto_ptr< Reason_type > x)
    {
      this->Reason_.set (x);
    }


    // ClearAuthzCacheResponseType
    // 


    // ValidateInitializationRequestType
    // 

    const ValidateInitializationRequestType::ipAddress_sequence& ValidateInitializationRequestType::
    ipAddress () const
    {
      return this->ipAddress_;
    }

    ValidateInitializationRequestType::ipAddress_sequence& ValidateInitializationRequestType::
    ipAddress ()
    {
      return this->ipAddress_;
    }

    void ValidateInitializationRequestType::
    ipAddress (const ipAddress_sequence& s)
    {
      this->ipAddress_ = s;
    }

    const ValidateInitializationRequestType::compileDate_type& ValidateInitializationRequestType::
    compileDate () const
    {
      return this->compileDate_.get ();
    }

    ValidateInitializationRequestType::compileDate_type& ValidateInitializationRequestType::
    compileDate ()
    {
      return this->compileDate_.get ();
    }

    void ValidateInitializationRequestType::
    compileDate (const compileDate_type& x)
    {
      this->compileDate_.set (x);
    }

    void ValidateInitializationRequestType::
    compileDate (::std::auto_ptr< compileDate_type > x)
    {
      this->compileDate_.set (x);
    }

    const ValidateInitializationRequestType::compileSystem_type& ValidateInitializationRequestType::
    compileSystem () const
    {
      return this->compileSystem_.get ();
    }

    ValidateInitializationRequestType::compileSystem_type& ValidateInitializationRequestType::
    compileSystem ()
    {
      return this->compileSystem_.get ();
    }

    void ValidateInitializationRequestType::
    compileSystem (const compileSystem_type& x)
    {
      this->compileSystem_.set (x);
    }

    void ValidateInitializationRequestType::
    compileSystem (::std::auto_ptr< compileSystem_type > x)
    {
      this->compileSystem_.set (x);
    }

    const ValidateInitializationRequestType::sw_version_type& ValidateInitializationRequestType::
    sw_version () const
    {
      return this->sw_version_.get ();
    }

    ValidateInitializationRequestType::sw_version_type& ValidateInitializationRequestType::
    sw_version ()
    {
      return this->sw_version_.get ();
    }

    void ValidateInitializationRequestType::
    sw_version (const sw_version_type& x)
    {
      this->sw_version_.set (x);
    }

    void ValidateInitializationRequestType::
    sw_version (::std::auto_ptr< sw_version_type > x)
    {
      this->sw_version_.set (x);
    }

    const ValidateInitializationRequestType::environment_type& ValidateInitializationRequestType::
    environment () const
    {
      return this->environment_.get ();
    }

    ValidateInitializationRequestType::environment_type& ValidateInitializationRequestType::
    environment ()
    {
      return this->environment_.get ();
    }

    void ValidateInitializationRequestType::
    environment (const environment_type& x)
    {
      this->environment_.set (x);
    }

    void ValidateInitializationRequestType::
    environment (::std::auto_ptr< environment_type > x)
    {
      this->environment_.set (x);
    }

    const ValidateInitializationRequestType::nodeId_type& ValidateInitializationRequestType::
    nodeId () const
    {
      return this->nodeId_.get ();
    }

    ValidateInitializationRequestType::nodeId_type& ValidateInitializationRequestType::
    nodeId ()
    {
      return this->nodeId_.get ();
    }

    void ValidateInitializationRequestType::
    nodeId (const nodeId_type& x)
    {
      this->nodeId_.set (x);
    }

    void ValidateInitializationRequestType::
    nodeId (::std::auto_ptr< nodeId_type > x)
    {
      this->nodeId_.set (x);
    }

    const ValidateInitializationRequestType::authzCacheIndex_type& ValidateInitializationRequestType::
    authzCacheIndex () const
    {
      return this->authzCacheIndex_.get ();
    }

    ValidateInitializationRequestType::authzCacheIndex_type& ValidateInitializationRequestType::
    authzCacheIndex ()
    {
      return this->authzCacheIndex_.get ();
    }

    void ValidateInitializationRequestType::
    authzCacheIndex (const authzCacheIndex_type& x)
    {
      this->authzCacheIndex_.set (x);
    }


    // ValidateInitializationResponseType
    // 
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    // ClearAuthzCacheRequestType
    //

    ClearAuthzCacheRequestType::
    ClearAuthzCacheRequestType ()
    : ::saml2::protocol::RequestAbstractType (),
      Subject_ (::xml_schema::flags (), this),
      Reason_ (::xml_schema::flags (), this)
    {
    }

    ClearAuthzCacheRequestType::
    ClearAuthzCacheRequestType (const ID_type& ID,
                                const Version_type& Version,
                                const IssueInstant_type& IssueInstant,
                                const Reason_type& Reason)
    : ::saml2::protocol::RequestAbstractType (ID,
                                              Version,
                                              IssueInstant),
      Subject_ (::xml_schema::flags (), this),
      Reason_ (Reason, ::xml_schema::flags (), this)
    {
    }

    ClearAuthzCacheRequestType::
    ClearAuthzCacheRequestType (const ClearAuthzCacheRequestType& x,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::saml2::protocol::RequestAbstractType (x, f, c),
      Subject_ (x.Subject_, f, this),
      Reason_ (x.Reason_, f, this)
    {
    }

    ClearAuthzCacheRequestType::
    ClearAuthzCacheRequestType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f,
                                ::xml_schema::container* c)
    : ::saml2::protocol::RequestAbstractType (e, f | ::xml_schema::flags::base, c),
      Subject_ (f, this),
      Reason_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ClearAuthzCacheRequestType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::saml2::protocol::RequestAbstractType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Subject
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Subject",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              &::xsd::cxx::tree::factory_impl< Subject_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Subject_)
            {
              ::std::auto_ptr< Subject_type > r (
                dynamic_cast< Subject_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Subject_.set (r);
              continue;
            }
          }
        }

        break;
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Reason" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Reason_type > r (
            Reason_traits::create (i, f, this));

          this->Reason_.set (r);
          continue;
        }
      }

      if (!Reason_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Reason",
          L"");
      }
    }

    ClearAuthzCacheRequestType* ClearAuthzCacheRequestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ClearAuthzCacheRequestType (*this, f, c);
    }

    ClearAuthzCacheRequestType::
    ~ClearAuthzCacheRequestType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ClearAuthzCacheRequestType >
    _xsd_ClearAuthzCacheRequestType_type_factory_init (
      L"ClearAuthzCacheRequestType",
      L"http://www.qut.com/middleware/ESOEProtocolSchema");

    // ClearAuthzCacheResponseType
    //

    ClearAuthzCacheResponseType::
    ClearAuthzCacheResponseType ()
    : ::saml2::protocol::StatusResponseType ()
    {
    }

    ClearAuthzCacheResponseType::
    ClearAuthzCacheResponseType (const Status_type& Status,
                                 const ID_type& ID,
                                 const Version_type& Version,
                                 const IssueInstant_type& IssueInstant)
    : ::saml2::protocol::StatusResponseType (Status,
                                             ID,
                                             Version,
                                             IssueInstant)
    {
    }

    ClearAuthzCacheResponseType::
    ClearAuthzCacheResponseType (::std::auto_ptr< Status_type >& Status,
                                 const ID_type& ID,
                                 const Version_type& Version,
                                 const IssueInstant_type& IssueInstant)
    : ::saml2::protocol::StatusResponseType (Status,
                                             ID,
                                             Version,
                                             IssueInstant)
    {
    }

    ClearAuthzCacheResponseType::
    ClearAuthzCacheResponseType (const ClearAuthzCacheResponseType& x,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::saml2::protocol::StatusResponseType (x, f, c)
    {
    }

    ClearAuthzCacheResponseType::
    ClearAuthzCacheResponseType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f,
                                 ::xml_schema::container* c)
    : ::saml2::protocol::StatusResponseType (e, f, c)
    {
    }

    ClearAuthzCacheResponseType* ClearAuthzCacheResponseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ClearAuthzCacheResponseType (*this, f, c);
    }

    ClearAuthzCacheResponseType::
    ~ClearAuthzCacheResponseType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ClearAuthzCacheResponseType >
    _xsd_ClearAuthzCacheResponseType_type_factory_init (
      L"ClearAuthzCacheResponseType",
      L"http://www.qut.com/middleware/ESOEProtocolSchema");

    // ValidateInitializationRequestType
    //

    ValidateInitializationRequestType::
    ValidateInitializationRequestType ()
    : ::saml2::protocol::RequestAbstractType (),
      ipAddress_ (::xml_schema::flags (), this),
      compileDate_ (::xml_schema::flags (), this),
      compileSystem_ (::xml_schema::flags (), this),
      sw_version_ (::xml_schema::flags (), this),
      environment_ (::xml_schema::flags (), this),
      nodeId_ (::xml_schema::flags (), this),
      authzCacheIndex_ (::xml_schema::flags (), this)
    {
    }

    ValidateInitializationRequestType::
    ValidateInitializationRequestType (const ID_type& ID,
                                       const Version_type& Version,
                                       const IssueInstant_type& IssueInstant,
                                       const compileDate_type& compileDate,
                                       const compileSystem_type& compileSystem,
                                       const sw_version_type& sw_version,
                                       const environment_type& environment,
                                       const nodeId_type& nodeId,
                                       const authzCacheIndex_type& authzCacheIndex)
    : ::saml2::protocol::RequestAbstractType (ID,
                                              Version,
                                              IssueInstant),
      ipAddress_ (::xml_schema::flags (), this),
      compileDate_ (compileDate, ::xml_schema::flags (), this),
      compileSystem_ (compileSystem, ::xml_schema::flags (), this),
      sw_version_ (sw_version, ::xml_schema::flags (), this),
      environment_ (environment, ::xml_schema::flags (), this),
      nodeId_ (nodeId, ::xml_schema::flags (), this),
      authzCacheIndex_ (authzCacheIndex, ::xml_schema::flags (), this)
    {
    }

    ValidateInitializationRequestType::
    ValidateInitializationRequestType (const ID_type& ID,
                                       const Version_type& Version,
                                       const IssueInstant_type& IssueInstant,
                                       ::std::auto_ptr< compileDate_type >& compileDate,
                                       ::std::auto_ptr< compileSystem_type >& compileSystem,
                                       ::std::auto_ptr< sw_version_type >& sw_version,
                                       ::std::auto_ptr< environment_type >& environment,
                                       ::std::auto_ptr< nodeId_type >& nodeId,
                                       const authzCacheIndex_type& authzCacheIndex)
    : ::saml2::protocol::RequestAbstractType (ID,
                                              Version,
                                              IssueInstant),
      ipAddress_ (::xml_schema::flags (), this),
      compileDate_ (compileDate, ::xml_schema::flags (), this),
      compileSystem_ (compileSystem, ::xml_schema::flags (), this),
      sw_version_ (sw_version, ::xml_schema::flags (), this),
      environment_ (environment, ::xml_schema::flags (), this),
      nodeId_ (nodeId, ::xml_schema::flags (), this),
      authzCacheIndex_ (authzCacheIndex, ::xml_schema::flags (), this)
    {
    }

    ValidateInitializationRequestType::
    ValidateInitializationRequestType (const ValidateInitializationRequestType& x,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::saml2::protocol::RequestAbstractType (x, f, c),
      ipAddress_ (x.ipAddress_, f, this),
      compileDate_ (x.compileDate_, f, this),
      compileSystem_ (x.compileSystem_, f, this),
      sw_version_ (x.sw_version_, f, this),
      environment_ (x.environment_, f, this),
      nodeId_ (x.nodeId_, f, this),
      authzCacheIndex_ (x.authzCacheIndex_, f, this)
    {
    }

    ValidateInitializationRequestType::
    ValidateInitializationRequestType (const ::xercesc::DOMElement& e,
                                       ::xml_schema::flags f,
                                       ::xml_schema::container* c)
    : ::saml2::protocol::RequestAbstractType (e, f | ::xml_schema::flags::base, c),
      ipAddress_ (f, this),
      compileDate_ (f, this),
      compileSystem_ (f, this),
      sw_version_ (f, this),
      environment_ (f, this),
      nodeId_ (f, this),
      authzCacheIndex_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ValidateInitializationRequestType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::saml2::protocol::RequestAbstractType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // ipAddress
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"ipAddress",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              &::xsd::cxx::tree::factory_impl< ipAddress_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< ipAddress_type > r (
              dynamic_cast< ipAddress_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->ipAddress_.push_back (r);
            continue;
          }
        }

        // compileDate
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"compileDate",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              &::xsd::cxx::tree::factory_impl< compileDate_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!compileDate_.present ())
            {
              ::std::auto_ptr< compileDate_type > r (
                dynamic_cast< compileDate_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->compileDate_.set (r);
              continue;
            }
          }
        }

        // compileSystem
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"compileSystem",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              &::xsd::cxx::tree::factory_impl< compileSystem_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!compileSystem_.present ())
            {
              ::std::auto_ptr< compileSystem_type > r (
                dynamic_cast< compileSystem_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->compileSystem_.set (r);
              continue;
            }
          }
        }

        // sw-version
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"sw-version",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              &::xsd::cxx::tree::factory_impl< sw_version_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!sw_version_.present ())
            {
              ::std::auto_ptr< sw_version_type > r (
                dynamic_cast< sw_version_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->sw_version_.set (r);
              continue;
            }
          }
        }

        // environment
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"environment",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              &::xsd::cxx::tree::factory_impl< environment_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!environment_.present ())
            {
              ::std::auto_ptr< environment_type > r (
                dynamic_cast< environment_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->environment_.set (r);
              continue;
            }
          }
        }

        // nodeId
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"nodeId",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              &::xsd::cxx::tree::factory_impl< nodeId_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!nodeId_.present ())
            {
              ::std::auto_ptr< nodeId_type > r (
                dynamic_cast< nodeId_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->nodeId_.set (r);
              continue;
            }
          }
        }

        // authzCacheIndex
        //
        if (n.name () == L"authzCacheIndex" && n.namespace_ () == L"http://www.qut.com/middleware/ESOEProtocolSchema")
        {
          if (!authzCacheIndex_.present ())
          {
            this->authzCacheIndex_.set (authzCacheIndex_traits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!compileDate_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"compileDate",
          L"http://www.qut.com/middleware/ESOEProtocolSchema");
      }

      if (!compileSystem_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"compileSystem",
          L"http://www.qut.com/middleware/ESOEProtocolSchema");
      }

      if (!sw_version_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"sw-version",
          L"http://www.qut.com/middleware/ESOEProtocolSchema");
      }

      if (!environment_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"environment",
          L"http://www.qut.com/middleware/ESOEProtocolSchema");
      }

      if (!nodeId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"nodeId",
          L"http://www.qut.com/middleware/ESOEProtocolSchema");
      }

      if (!authzCacheIndex_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"authzCacheIndex",
          L"http://www.qut.com/middleware/ESOEProtocolSchema");
      }
    }

    ValidateInitializationRequestType* ValidateInitializationRequestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ValidateInitializationRequestType (*this, f, c);
    }

    ValidateInitializationRequestType::
    ~ValidateInitializationRequestType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ValidateInitializationRequestType >
    _xsd_ValidateInitializationRequestType_type_factory_init (
      L"ValidateInitializationRequestType",
      L"http://www.qut.com/middleware/ESOEProtocolSchema");

    // ValidateInitializationResponseType
    //

    ValidateInitializationResponseType::
    ValidateInitializationResponseType ()
    : ::saml2::protocol::StatusResponseType ()
    {
    }

    ValidateInitializationResponseType::
    ValidateInitializationResponseType (const Status_type& Status,
                                        const ID_type& ID,
                                        const Version_type& Version,
                                        const IssueInstant_type& IssueInstant)
    : ::saml2::protocol::StatusResponseType (Status,
                                             ID,
                                             Version,
                                             IssueInstant)
    {
    }

    ValidateInitializationResponseType::
    ValidateInitializationResponseType (::std::auto_ptr< Status_type >& Status,
                                        const ID_type& ID,
                                        const Version_type& Version,
                                        const IssueInstant_type& IssueInstant)
    : ::saml2::protocol::StatusResponseType (Status,
                                             ID,
                                             Version,
                                             IssueInstant)
    {
    }

    ValidateInitializationResponseType::
    ValidateInitializationResponseType (const ValidateInitializationResponseType& x,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::saml2::protocol::StatusResponseType (x, f, c)
    {
    }

    ValidateInitializationResponseType::
    ValidateInitializationResponseType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f,
                                        ::xml_schema::container* c)
    : ::saml2::protocol::StatusResponseType (e, f, c)
    {
    }

    ValidateInitializationResponseType* ValidateInitializationResponseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ValidateInitializationResponseType (*this, f, c);
    }

    ValidateInitializationResponseType::
    ~ValidateInitializationResponseType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ValidateInitializationResponseType >
    _xsd_ValidateInitializationResponseType_type_factory_init (
      L"ValidateInitializationResponseType",
      L"http://www.qut.com/middleware/ESOEProtocolSchema");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::wstring& u,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType > r (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::wstring& u,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType > r (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::wstring& u,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType > r (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            const ::std::wstring& sid,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            const ::std::wstring& sid,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            const ::std::wstring& sid,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::xercesc::InputSource& i,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType > r (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::xercesc::InputSource& i,
                            ::xml_schema::error_handler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType > r (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::xercesc::InputSource& i,
                            ::xercesc::DOMErrorHandler& h,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType > r (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType > r (
          ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"ClearAuthzCacheRequest",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType > r (
          dynamic_cast< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"ClearAuthzCacheRequest",
        L"http://www.qut.com/middleware/ESOEProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                            ::xml_schema::flags f,
                            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"ClearAuthzCacheRequest",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType > r (
          dynamic_cast< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"ClearAuthzCacheRequest",
        L"http://www.qut.com/middleware/ESOEProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::wstring& u,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType > r (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::wstring& u,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType > r (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::wstring& u,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType > r (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             const ::std::wstring& sid,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             const ::std::wstring& sid,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             const ::std::wstring& sid,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::xercesc::InputSource& i,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType > r (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::xercesc::InputSource& i,
                             ::xml_schema::error_handler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType > r (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::xercesc::InputSource& i,
                             ::xercesc::DOMErrorHandler& h,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType > r (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType > r (
          ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"ClearAuthzCacheResponse",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType > r (
          dynamic_cast< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"ClearAuthzCacheResponse",
        L"http://www.qut.com/middleware/ESOEProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f,
                             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"ClearAuthzCacheResponse",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType > r (
          dynamic_cast< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"ClearAuthzCacheResponse",
        L"http://www.qut.com/middleware/ESOEProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::wstring& u,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType > r (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::wstring& u,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType > r (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::wstring& u,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType > r (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   const ::std::wstring& sid,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   const ::std::wstring& sid,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   const ::std::wstring& sid,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::xercesc::InputSource& i,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType > r (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::xercesc::InputSource& i,
                                   ::xml_schema::error_handler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType > r (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::xercesc::InputSource& i,
                                   ::xercesc::DOMErrorHandler& h,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType > r (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType > r (
          ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"ValidateInitializationRequest",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType > r (
          dynamic_cast< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"ValidateInitializationRequest",
        L"http://www.qut.com/middleware/ESOEProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f,
                                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"ValidateInitializationRequest",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType > r (
          dynamic_cast< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"ValidateInitializationRequest",
        L"http://www.qut.com/middleware/ESOEProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::wstring& u,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType > r (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::wstring& u,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType > r (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::wstring& u,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType > r (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    const ::std::wstring& sid,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    const ::std::wstring& sid,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    const ::std::wstring& sid,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::xercesc::InputSource& i,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType > r (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::xercesc::InputSource& i,
                                    ::xml_schema::error_handler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType > r (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::xercesc::InputSource& i,
                                    ::xercesc::DOMErrorHandler& h,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType > r (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType > r (
          ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"ValidateInitializationResponse",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType > r (
          dynamic_cast< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"ValidateInitializationResponse",
        L"http://www.qut.com/middleware/ESOEProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f,
                                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"ValidateInitializationResponse",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType > r (
          dynamic_cast< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"ValidateInitializationResponse",
        L"http://www.qut.com/middleware/ESOEProtocolSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    void
    ClearAuthzCacheRequest (::std::ostream& o,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ClearAuthzCacheRequest (::std::ostream& o,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheRequest (::std::ostream& o,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget& t,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget& t,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            ::xml_schema::error_handler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget& t,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            ::xercesc::DOMErrorHandler& h,
                            const ::xml_schema::namespace_infomap& m,
                            const ::std::wstring& e,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheRequest (::xercesc::DOMDocument& d,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType) == typeid (s))
      {
        if (n.name () == L"ClearAuthzCacheRequest" &&
            n.namespace_ () == L"http://www.qut.com/middleware/ESOEProtocolSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"ClearAuthzCacheRequest",
            L"http://www.qut.com/middleware/ESOEProtocolSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"ClearAuthzCacheRequest",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ClearAuthzCacheRequest (const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& s,
                            const ::xml_schema::namespace_infomap& m,
                            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"ClearAuthzCacheRequest",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"ClearAuthzCacheRequest",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            m, s, f));
        d = r;
      }

      ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequest (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ClearAuthzCacheRequestType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      // Subject
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Subject ())
        {
          const ClearAuthzCacheRequestType::Subject_type& x (*i.Subject ());
          if (typeid (ClearAuthzCacheRequestType::Subject_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Subject",
                L"http://www.qut.com/middleware/ESOEProtocolSchema",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"Subject",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              false, true, e, x);
        }
      }

      // Reason
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Reason",
            e));

        a << i.Reason ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ClearAuthzCacheRequestType >
    _xsd_ClearAuthzCacheRequestType_type_serializer_init (
      L"ClearAuthzCacheRequestType",
      L"http://www.qut.com/middleware/ESOEProtocolSchema");


    void
    ClearAuthzCacheResponse (::std::ostream& o,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::wstring& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ClearAuthzCacheResponse (::std::ostream& o,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::wstring& e,
                             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheResponse (::std::ostream& o,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::wstring& e,
                             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget& t,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::wstring& e,
                             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget& t,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             ::xml_schema::error_handler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::wstring& e,
                             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget& t,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             ::xercesc::DOMErrorHandler& h,
                             const ::xml_schema::namespace_infomap& m,
                             const ::std::wstring& e,
                             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ClearAuthzCacheResponse (::xercesc::DOMDocument& d,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType) == typeid (s))
      {
        if (n.name () == L"ClearAuthzCacheResponse" &&
            n.namespace_ () == L"http://www.qut.com/middleware/ESOEProtocolSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"ClearAuthzCacheResponse",
            L"http://www.qut.com/middleware/ESOEProtocolSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"ClearAuthzCacheResponse",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ClearAuthzCacheResponse (const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& s,
                             const ::xml_schema::namespace_infomap& m,
                             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"ClearAuthzCacheResponse",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"ClearAuthzCacheResponse",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            m, s, f));
        d = r;
      }

      ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponse (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ClearAuthzCacheResponseType& i)
    {
      e << static_cast< const ::saml2::protocol::StatusResponseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ClearAuthzCacheResponseType >
    _xsd_ClearAuthzCacheResponseType_type_serializer_init (
      L"ClearAuthzCacheResponseType",
      L"http://www.qut.com/middleware/ESOEProtocolSchema");


    void
    ValidateInitializationRequest (::std::ostream& o,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::wstring& e,
                                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ValidateInitializationRequest (::std::ostream& o,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   ::xml_schema::error_handler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::wstring& e,
                                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationRequest (::std::ostream& o,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   ::xercesc::DOMErrorHandler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::wstring& e,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget& t,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::wstring& e,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget& t,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   ::xml_schema::error_handler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::wstring& e,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget& t,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   ::xercesc::DOMErrorHandler& h,
                                   const ::xml_schema::namespace_infomap& m,
                                   const ::std::wstring& e,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationRequest (::xercesc::DOMDocument& d,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::ESOEProtocolSchema::ValidateInitializationRequestType) == typeid (s))
      {
        if (n.name () == L"ValidateInitializationRequest" &&
            n.namespace_ () == L"http://www.qut.com/middleware/ESOEProtocolSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"ValidateInitializationRequest",
            L"http://www.qut.com/middleware/ESOEProtocolSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"ValidateInitializationRequest",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ValidateInitializationRequest (const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& s,
                                   const ::xml_schema::namespace_infomap& m,
                                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::ESOEProtocolSchema::ValidateInitializationRequestType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"ValidateInitializationRequest",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"ValidateInitializationRequest",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            m, s, f));
        d = r;
      }

      ::middleware::ESOEProtocolSchema::ValidateInitializationRequest (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ValidateInitializationRequestType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      // ipAddress
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ValidateInitializationRequestType::ipAddress_const_iterator
             b (i.ipAddress ().begin ()), n (i.ipAddress ().end ());
             b != n; ++b)
        {
          if (typeid (ValidateInitializationRequestType::ipAddress_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"ipAddress",
                L"http://www.qut.com/middleware/ESOEProtocolSchema",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"ipAddress",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              false, true, e, *b);
        }
      }

      // compileDate
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ValidateInitializationRequestType::compileDate_type& x (i.compileDate ());
        if (typeid (ValidateInitializationRequestType::compileDate_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"compileDate",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"compileDate",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            false, true, e, x);
      }

      // compileSystem
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ValidateInitializationRequestType::compileSystem_type& x (i.compileSystem ());
        if (typeid (ValidateInitializationRequestType::compileSystem_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"compileSystem",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"compileSystem",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            false, true, e, x);
      }

      // sw-version
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ValidateInitializationRequestType::sw_version_type& x (i.sw_version ());
        if (typeid (ValidateInitializationRequestType::sw_version_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"sw-version",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"sw-version",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            false, true, e, x);
      }

      // environment
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ValidateInitializationRequestType::environment_type& x (i.environment ());
        if (typeid (ValidateInitializationRequestType::environment_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"environment",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"environment",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            false, true, e, x);
      }

      // nodeId
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ValidateInitializationRequestType::nodeId_type& x (i.nodeId ());
        if (typeid (ValidateInitializationRequestType::nodeId_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"nodeId",
              L"http://www.qut.com/middleware/ESOEProtocolSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"nodeId",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            false, true, e, x);
      }

      // authzCacheIndex
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            L"authzCacheIndex",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            e));

        s << i.authzCacheIndex ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ValidateInitializationRequestType >
    _xsd_ValidateInitializationRequestType_type_serializer_init (
      L"ValidateInitializationRequestType",
      L"http://www.qut.com/middleware/ESOEProtocolSchema");


    void
    ValidateInitializationResponse (::std::ostream& o,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e,
                                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ValidateInitializationResponse (::std::ostream& o,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    ::xml_schema::error_handler& h,
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e,
                                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationResponse (::std::ostream& o,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    ::xercesc::DOMErrorHandler& h,
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e,
                                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget& t,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e,
                                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget& t,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    ::xml_schema::error_handler& h,
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e,
                                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget& t,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    ::xercesc::DOMErrorHandler& h,
                                    const ::xml_schema::namespace_infomap& m,
                                    const ::std::wstring& e,
                                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    ValidateInitializationResponse (::xercesc::DOMDocument& d,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::ESOEProtocolSchema::ValidateInitializationResponseType) == typeid (s))
      {
        if (n.name () == L"ValidateInitializationResponse" &&
            n.namespace_ () == L"http://www.qut.com/middleware/ESOEProtocolSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"ValidateInitializationResponse",
            L"http://www.qut.com/middleware/ESOEProtocolSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"ValidateInitializationResponse",
          L"http://www.qut.com/middleware/ESOEProtocolSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ValidateInitializationResponse (const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& s,
                                    const ::xml_schema::namespace_infomap& m,
                                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::ESOEProtocolSchema::ValidateInitializationResponseType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"ValidateInitializationResponse",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"ValidateInitializationResponse",
            L"http://www.qut.com/middleware/ESOEProtocolSchema",
            m, s, f));
        d = r;
      }

      ::middleware::ESOEProtocolSchema::ValidateInitializationResponse (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ValidateInitializationResponseType& i)
    {
      e << static_cast< const ::saml2::protocol::StatusResponseType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ValidateInitializationResponseType >
    _xsd_ValidateInitializationResponseType_type_serializer_init (
      L"ValidateInitializationResponseType",
      L"http://www.qut.com/middleware/ESOEProtocolSchema");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

