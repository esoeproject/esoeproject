// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "saml2/bindings/lxacml-schema.hxx"

namespace middleware
{
  namespace lxacmlSchema
  {
    // PolicySetType
    // 

    const PolicySetType::Description_optional& PolicySetType::
    Description () const
    {
      return this->Description_;
    }

    PolicySetType::Description_optional& PolicySetType::
    Description ()
    {
      return this->Description_;
    }

    void PolicySetType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void PolicySetType::
    Description (const Description_optional& x)
    {
      this->Description_ = x;
    }

    void PolicySetType::
    Description (::std::auto_ptr< Description_type > x)
    {
      this->Description_.set (x);
    }

    const PolicySetType::Policy_sequence& PolicySetType::
    Policy () const
    {
      return this->Policy_;
    }

    PolicySetType::Policy_sequence& PolicySetType::
    Policy ()
    {
      return this->Policy_;
    }

    void PolicySetType::
    Policy (const Policy_sequence& s)
    {
      this->Policy_ = s;
    }


    // PolicyType
    // 

    const PolicyType::Description_type& PolicyType::
    Description () const
    {
      return this->Description_.get ();
    }

    PolicyType::Description_type& PolicyType::
    Description ()
    {
      return this->Description_.get ();
    }

    void PolicyType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void PolicyType::
    Description (::std::auto_ptr< Description_type > x)
    {
      this->Description_.set (x);
    }

    const PolicyType::Target_type& PolicyType::
    Target () const
    {
      return this->Target_.get ();
    }

    PolicyType::Target_type& PolicyType::
    Target ()
    {
      return this->Target_.get ();
    }

    void PolicyType::
    Target (const Target_type& x)
    {
      this->Target_.set (x);
    }

    void PolicyType::
    Target (::std::auto_ptr< Target_type > x)
    {
      this->Target_.set (x);
    }

    const PolicyType::Rule_sequence& PolicyType::
    Rule () const
    {
      return this->Rule_;
    }

    PolicyType::Rule_sequence& PolicyType::
    Rule ()
    {
      return this->Rule_;
    }

    void PolicyType::
    Rule (const Rule_sequence& s)
    {
      this->Rule_ = s;
    }

    const PolicyType::PolicyId_type& PolicyType::
    PolicyId () const
    {
      return this->PolicyId_.get ();
    }

    PolicyType::PolicyId_type& PolicyType::
    PolicyId ()
    {
      return this->PolicyId_.get ();
    }

    void PolicyType::
    PolicyId (const PolicyId_type& x)
    {
      this->PolicyId_.set (x);
    }

    void PolicyType::
    PolicyId (::std::auto_ptr< PolicyId_type > x)
    {
      this->PolicyId_.set (x);
    }


    // RuleType
    // 

    const RuleType::Description_type& RuleType::
    Description () const
    {
      return this->Description_.get ();
    }

    RuleType::Description_type& RuleType::
    Description ()
    {
      return this->Description_.get ();
    }

    void RuleType::
    Description (const Description_type& x)
    {
      this->Description_.set (x);
    }

    void RuleType::
    Description (::std::auto_ptr< Description_type > x)
    {
      this->Description_.set (x);
    }

    const RuleType::Target_optional& RuleType::
    Target () const
    {
      return this->Target_;
    }

    RuleType::Target_optional& RuleType::
    Target ()
    {
      return this->Target_;
    }

    void RuleType::
    Target (const Target_type& x)
    {
      this->Target_.set (x);
    }

    void RuleType::
    Target (const Target_optional& x)
    {
      this->Target_ = x;
    }

    void RuleType::
    Target (::std::auto_ptr< Target_type > x)
    {
      this->Target_.set (x);
    }

    const RuleType::Condition_optional& RuleType::
    Condition () const
    {
      return this->Condition_;
    }

    RuleType::Condition_optional& RuleType::
    Condition ()
    {
      return this->Condition_;
    }

    void RuleType::
    Condition (const Condition_type& x)
    {
      this->Condition_.set (x);
    }

    void RuleType::
    Condition (const Condition_optional& x)
    {
      this->Condition_ = x;
    }

    void RuleType::
    Condition (::std::auto_ptr< Condition_type > x)
    {
      this->Condition_.set (x);
    }

    const RuleType::RuleId_type& RuleType::
    RuleId () const
    {
      return this->RuleId_.get ();
    }

    RuleType::RuleId_type& RuleType::
    RuleId ()
    {
      return this->RuleId_.get ();
    }

    void RuleType::
    RuleId (const RuleId_type& x)
    {
      this->RuleId_.set (x);
    }

    void RuleType::
    RuleId (::std::auto_ptr< RuleId_type > x)
    {
      this->RuleId_.set (x);
    }

    const RuleType::Effect_type& RuleType::
    Effect () const
    {
      return this->Effect_.get ();
    }

    RuleType::Effect_type& RuleType::
    Effect ()
    {
      return this->Effect_.get ();
    }

    void RuleType::
    Effect (const Effect_type& x)
    {
      this->Effect_.set (x);
    }

    void RuleType::
    Effect (::std::auto_ptr< Effect_type > x)
    {
      this->Effect_.set (x);
    }


    // TargetType
    // 

    const TargetType::Resources_type& TargetType::
    Resources () const
    {
      return this->Resources_.get ();
    }

    TargetType::Resources_type& TargetType::
    Resources ()
    {
      return this->Resources_.get ();
    }

    void TargetType::
    Resources (const Resources_type& x)
    {
      this->Resources_.set (x);
    }

    void TargetType::
    Resources (::std::auto_ptr< Resources_type > x)
    {
      this->Resources_.set (x);
    }

    const TargetType::Actions_type& TargetType::
    Actions () const
    {
      return this->Actions_.get ();
    }

    TargetType::Actions_type& TargetType::
    Actions ()
    {
      return this->Actions_.get ();
    }

    void TargetType::
    Actions (const Actions_type& x)
    {
      this->Actions_.set (x);
    }

    void TargetType::
    Actions (::std::auto_ptr< Actions_type > x)
    {
      this->Actions_.set (x);
    }


    // ResourcesType
    // 

    const ResourcesType::Resource_sequence& ResourcesType::
    Resource () const
    {
      return this->Resource_;
    }

    ResourcesType::Resource_sequence& ResourcesType::
    Resource ()
    {
      return this->Resource_;
    }

    void ResourcesType::
    Resource (const Resource_sequence& s)
    {
      this->Resource_ = s;
    }


    // ActionsType
    // 

    const ActionsType::Action_sequence& ActionsType::
    Action () const
    {
      return this->Action_;
    }

    ActionsType::Action_sequence& ActionsType::
    Action ()
    {
      return this->Action_;
    }

    void ActionsType::
    Action (const Action_sequence& s)
    {
      this->Action_ = s;
    }


    // ResourceType
    // 

    const ResourceType::AttributeValue_type& ResourceType::
    AttributeValue () const
    {
      return this->AttributeValue_.get ();
    }

    ResourceType::AttributeValue_type& ResourceType::
    AttributeValue ()
    {
      return this->AttributeValue_.get ();
    }

    void ResourceType::
    AttributeValue (const AttributeValue_type& x)
    {
      this->AttributeValue_.set (x);
    }

    void ResourceType::
    AttributeValue (::std::auto_ptr< AttributeValue_type > x)
    {
      this->AttributeValue_.set (x);
    }


    // ActionType
    // 

    const ActionType::AttributeValue_type& ActionType::
    AttributeValue () const
    {
      return this->AttributeValue_.get ();
    }

    ActionType::AttributeValue_type& ActionType::
    AttributeValue ()
    {
      return this->AttributeValue_.get ();
    }

    void ActionType::
    AttributeValue (const AttributeValue_type& x)
    {
      this->AttributeValue_.set (x);
    }

    void ActionType::
    AttributeValue (::std::auto_ptr< AttributeValue_type > x)
    {
      this->AttributeValue_.set (x);
    }


    // ExpressionType
    // 


    // ConditionType
    // 

    const ConditionType::Expression_type& ConditionType::
    Expression () const
    {
      return this->Expression_.get ();
    }

    ConditionType::Expression_type& ConditionType::
    Expression ()
    {
      return this->Expression_.get ();
    }

    void ConditionType::
    Expression (const Expression_type& x)
    {
      this->Expression_.set (x);
    }

    void ConditionType::
    Expression (::std::auto_ptr< Expression_type > x)
    {
      this->Expression_.set (x);
    }


    // ApplyType
    // 

    const ApplyType::Expression_sequence& ApplyType::
    Expression () const
    {
      return this->Expression_;
    }

    ApplyType::Expression_sequence& ApplyType::
    Expression ()
    {
      return this->Expression_;
    }

    void ApplyType::
    Expression (const Expression_sequence& s)
    {
      this->Expression_ = s;
    }

    const ApplyType::FunctionId_type& ApplyType::
    FunctionId () const
    {
      return this->FunctionId_.get ();
    }

    ApplyType::FunctionId_type& ApplyType::
    FunctionId ()
    {
      return this->FunctionId_.get ();
    }

    void ApplyType::
    FunctionId (const FunctionId_type& x)
    {
      this->FunctionId_.set (x);
    }

    void ApplyType::
    FunctionId (::std::auto_ptr< FunctionId_type > x)
    {
      this->FunctionId_.set (x);
    }


    // AttributeDesignatorType
    // 

    const AttributeDesignatorType::AttributeId_type& AttributeDesignatorType::
    AttributeId () const
    {
      return this->AttributeId_.get ();
    }

    AttributeDesignatorType::AttributeId_type& AttributeDesignatorType::
    AttributeId ()
    {
      return this->AttributeId_.get ();
    }

    void AttributeDesignatorType::
    AttributeId (const AttributeId_type& x)
    {
      this->AttributeId_.set (x);
    }

    void AttributeDesignatorType::
    AttributeId (::std::auto_ptr< AttributeId_type > x)
    {
      this->AttributeId_.set (x);
    }


    // SubjectAttributeDesignatorType
    // 


    // AttributeValueType
    // 

    const AttributeValueType::any_sequence& AttributeValueType::
    any () const
    {
      return this->any_;
    }

    AttributeValueType::any_sequence& AttributeValueType::
    any ()
    {
      return this->any_;
    }

    void AttributeValueType::
    any (const any_sequence& s)
    {
      this->any_ = s;
    }

    const AttributeValueType::any_attribute_set& AttributeValueType::
    any_attribute () const
    {
      return this->any_attribute_;
    }

    AttributeValueType::any_attribute_set& AttributeValueType::
    any_attribute ()
    {
      return this->any_attribute_;
    }

    void AttributeValueType::
    any_attribute (const any_attribute_set& s)
    {
      this->any_attribute_ = s;
    }

    const ::xercesc::DOMDocument& AttributeValueType::
    dom_document () const
    {
      return *dom_document_;
    }

    ::xercesc::DOMDocument& AttributeValueType::
    dom_document ()
    {
      return *dom_document_;
    }


    // ObligationsType
    // 

    const ObligationsType::Obligation_sequence& ObligationsType::
    Obligation () const
    {
      return this->Obligation_;
    }

    ObligationsType::Obligation_sequence& ObligationsType::
    Obligation ()
    {
      return this->Obligation_;
    }

    void ObligationsType::
    Obligation (const Obligation_sequence& s)
    {
      this->Obligation_ = s;
    }


    // ObligationType
    // 

    const ObligationType::AttributeAssignment_sequence& ObligationType::
    AttributeAssignment () const
    {
      return this->AttributeAssignment_;
    }

    ObligationType::AttributeAssignment_sequence& ObligationType::
    AttributeAssignment ()
    {
      return this->AttributeAssignment_;
    }

    void ObligationType::
    AttributeAssignment (const AttributeAssignment_sequence& s)
    {
      this->AttributeAssignment_ = s;
    }

    const ObligationType::ObligationId_type& ObligationType::
    ObligationId () const
    {
      return this->ObligationId_.get ();
    }

    ObligationType::ObligationId_type& ObligationType::
    ObligationId ()
    {
      return this->ObligationId_.get ();
    }

    void ObligationType::
    ObligationId (const ObligationId_type& x)
    {
      this->ObligationId_.set (x);
    }

    void ObligationType::
    ObligationId (::std::auto_ptr< ObligationId_type > x)
    {
      this->ObligationId_.set (x);
    }

    const ObligationType::FulfillOn_type& ObligationType::
    FulfillOn () const
    {
      return this->FulfillOn_.get ();
    }

    ObligationType::FulfillOn_type& ObligationType::
    FulfillOn ()
    {
      return this->FulfillOn_.get ();
    }

    void ObligationType::
    FulfillOn (const FulfillOn_type& x)
    {
      this->FulfillOn_.set (x);
    }

    void ObligationType::
    FulfillOn (::std::auto_ptr< FulfillOn_type > x)
    {
      this->FulfillOn_.set (x);
    }


    // EffectType
    // 

    EffectType::
    EffectType ()
    : ::xml_schema::string ()
    {
    }

    EffectType::
    EffectType (value v)
    : ::xml_schema::string (_xsd_EffectType_literals_[v])
    {
    }

    EffectType::
    EffectType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    EffectType::
    EffectType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    EffectType::
    EffectType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    EffectType::
    EffectType (const EffectType& v,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    EffectType& EffectType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_EffectType_literals_[v]);

      return *this;
    }


    // AttributeAssignmentType
    // 

    const AttributeAssignmentType::AttributeId_type& AttributeAssignmentType::
    AttributeId () const
    {
      return this->AttributeId_.get ();
    }

    AttributeAssignmentType::AttributeId_type& AttributeAssignmentType::
    AttributeId ()
    {
      return this->AttributeId_.get ();
    }

    void AttributeAssignmentType::
    AttributeId (const AttributeId_type& x)
    {
      this->AttributeId_.set (x);
    }

    void AttributeAssignmentType::
    AttributeId (::std::auto_ptr< AttributeId_type > x)
    {
      this->AttributeId_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace lxacmlSchema
  {
    // PolicySetType
    //

    PolicySetType::
    PolicySetType ()
    : ::xml_schema::type (),
      Description_ (::xml_schema::flags (), this),
      Policy_ (::xml_schema::flags (), this)
    {
    }

    PolicySetType::
    PolicySetType (const PolicySetType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Description_ (x.Description_, f, this),
      Policy_ (x.Policy_, f, this)
    {
    }

    PolicySetType::
    PolicySetType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Description_ (f, this),
      Policy_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void PolicySetType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Description
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Description",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Description_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Description_)
            {
              ::std::auto_ptr< Description_type > r (
                dynamic_cast< Description_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Description_.set (r);
              continue;
            }
          }
        }

        // Policy
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Policy",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Policy_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Policy_type > r (
              dynamic_cast< Policy_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Policy_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    PolicySetType* PolicySetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PolicySetType (*this, f, c);
    }

    PolicySetType::
    ~PolicySetType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PolicySetType >
    _xsd_PolicySetType_type_factory_init (
      L"PolicySetType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    // PolicyType
    //

    PolicyType::
    PolicyType ()
    : ::xml_schema::type (),
      Description_ (::xml_schema::flags (), this),
      Target_ (::xml_schema::flags (), this),
      Rule_ (::xml_schema::flags (), this),
      PolicyId_ (::xml_schema::flags (), this)
    {
    }

    PolicyType::
    PolicyType (const Description_type& Description,
                const Target_type& Target,
                const PolicyId_type& PolicyId)
    : ::xml_schema::type (),
      Description_ (Description, ::xml_schema::flags (), this),
      Target_ (Target, ::xml_schema::flags (), this),
      Rule_ (::xml_schema::flags (), this),
      PolicyId_ (PolicyId, ::xml_schema::flags (), this)
    {
    }

    PolicyType::
    PolicyType (const Description_type& Description,
                ::std::auto_ptr< Target_type >& Target,
                const PolicyId_type& PolicyId)
    : ::xml_schema::type (),
      Description_ (Description, ::xml_schema::flags (), this),
      Target_ (Target, ::xml_schema::flags (), this),
      Rule_ (::xml_schema::flags (), this),
      PolicyId_ (PolicyId, ::xml_schema::flags (), this)
    {
    }

    PolicyType::
    PolicyType (::std::auto_ptr< Description_type >& Description,
                ::std::auto_ptr< Target_type >& Target,
                const PolicyId_type& PolicyId)
    : ::xml_schema::type (),
      Description_ (Description, ::xml_schema::flags (), this),
      Target_ (Target, ::xml_schema::flags (), this),
      Rule_ (::xml_schema::flags (), this),
      PolicyId_ (PolicyId, ::xml_schema::flags (), this)
    {
    }

    PolicyType::
    PolicyType (const PolicyType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Description_ (x.Description_, f, this),
      Target_ (x.Target_, f, this),
      Rule_ (x.Rule_, f, this),
      PolicyId_ (x.PolicyId_, f, this)
    {
    }

    PolicyType::
    PolicyType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Description_ (f, this),
      Target_ (f, this),
      Rule_ (f, this),
      PolicyId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void PolicyType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Description
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Description",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Description_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Description_.present ())
            {
              ::std::auto_ptr< Description_type > r (
                dynamic_cast< Description_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Description_.set (r);
              continue;
            }
          }
        }

        // Target
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Target",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Target_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Target_.present ())
            {
              ::std::auto_ptr< Target_type > r (
                dynamic_cast< Target_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Target_.set (r);
              continue;
            }
          }
        }

        // Rule
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Rule",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Rule_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Rule_type > r (
              dynamic_cast< Rule_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Rule_.push_back (r);
            continue;
          }
        }

        break;
      }

      if (!Description_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Description",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }

      if (!Target_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Target",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"PolicyId" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< PolicyId_type > r (
            PolicyId_traits::create (i, f, this));

          this->PolicyId_.set (r);
          continue;
        }
      }

      if (!PolicyId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"PolicyId",
          L"");
      }
    }

    PolicyType* PolicyType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class PolicyType (*this, f, c);
    }

    PolicyType::
    ~PolicyType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, PolicyType >
    _xsd_PolicyType_type_factory_init (
      L"PolicyType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    // RuleType
    //

    RuleType::
    RuleType ()
    : ::xml_schema::type (),
      Description_ (::xml_schema::flags (), this),
      Target_ (::xml_schema::flags (), this),
      Condition_ (::xml_schema::flags (), this),
      RuleId_ (::xml_schema::flags (), this),
      Effect_ (::xml_schema::flags (), this)
    {
    }

    RuleType::
    RuleType (const Description_type& Description,
              const RuleId_type& RuleId,
              const Effect_type& Effect)
    : ::xml_schema::type (),
      Description_ (Description, ::xml_schema::flags (), this),
      Target_ (::xml_schema::flags (), this),
      Condition_ (::xml_schema::flags (), this),
      RuleId_ (RuleId, ::xml_schema::flags (), this),
      Effect_ (Effect, ::xml_schema::flags (), this)
    {
    }

    RuleType::
    RuleType (::std::auto_ptr< Description_type >& Description,
              const RuleId_type& RuleId,
              const Effect_type& Effect)
    : ::xml_schema::type (),
      Description_ (Description, ::xml_schema::flags (), this),
      Target_ (::xml_schema::flags (), this),
      Condition_ (::xml_schema::flags (), this),
      RuleId_ (RuleId, ::xml_schema::flags (), this),
      Effect_ (Effect, ::xml_schema::flags (), this)
    {
    }

    RuleType::
    RuleType (const RuleType& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Description_ (x.Description_, f, this),
      Target_ (x.Target_, f, this),
      Condition_ (x.Condition_, f, this),
      RuleId_ (x.RuleId_, f, this),
      Effect_ (x.Effect_, f, this)
    {
    }

    RuleType::
    RuleType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Description_ (f, this),
      Target_ (f, this),
      Condition_ (f, this),
      RuleId_ (f, this),
      Effect_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void RuleType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Description
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Description",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Description_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Description_.present ())
            {
              ::std::auto_ptr< Description_type > r (
                dynamic_cast< Description_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Description_.set (r);
              continue;
            }
          }
        }

        // Target
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Target",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Target_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Target_)
            {
              ::std::auto_ptr< Target_type > r (
                dynamic_cast< Target_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Target_.set (r);
              continue;
            }
          }
        }

        // Condition
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Condition",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Condition_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Condition_)
            {
              ::std::auto_ptr< Condition_type > r (
                dynamic_cast< Condition_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Condition_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Description_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Description",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"RuleId" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< RuleId_type > r (
            RuleId_traits::create (i, f, this));

          this->RuleId_.set (r);
          continue;
        }

        if (n.name () == L"Effect" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Effect_type > r (
            Effect_traits::create (i, f, this));

          this->Effect_.set (r);
          continue;
        }
      }

      if (!RuleId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"RuleId",
          L"");
      }

      if (!Effect_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Effect",
          L"");
      }
    }

    RuleType* RuleType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RuleType (*this, f, c);
    }

    RuleType::
    ~RuleType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RuleType >
    _xsd_RuleType_type_factory_init (
      L"RuleType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    // TargetType
    //

    TargetType::
    TargetType ()
    : ::xml_schema::type (),
      Resources_ (::xml_schema::flags (), this),
      Actions_ (::xml_schema::flags (), this)
    {
    }

    TargetType::
    TargetType (const Resources_type& Resources,
                const Actions_type& Actions)
    : ::xml_schema::type (),
      Resources_ (Resources, ::xml_schema::flags (), this),
      Actions_ (Actions, ::xml_schema::flags (), this)
    {
    }

    TargetType::
    TargetType (::std::auto_ptr< Resources_type >& Resources,
                ::std::auto_ptr< Actions_type >& Actions)
    : ::xml_schema::type (),
      Resources_ (Resources, ::xml_schema::flags (), this),
      Actions_ (Actions, ::xml_schema::flags (), this)
    {
    }

    TargetType::
    TargetType (const TargetType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Resources_ (x.Resources_, f, this),
      Actions_ (x.Actions_, f, this)
    {
    }

    TargetType::
    TargetType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Resources_ (f, this),
      Actions_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void TargetType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Resources
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Resources",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Resources_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Resources_.present ())
            {
              ::std::auto_ptr< Resources_type > r (
                dynamic_cast< Resources_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Resources_.set (r);
              continue;
            }
          }
        }

        // Actions
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Actions",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Actions_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Actions_.present ())
            {
              ::std::auto_ptr< Actions_type > r (
                dynamic_cast< Actions_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Actions_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Resources_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Resources",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }

      if (!Actions_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Actions",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }
    }

    TargetType* TargetType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class TargetType (*this, f, c);
    }

    TargetType::
    ~TargetType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, TargetType >
    _xsd_TargetType_type_factory_init (
      L"TargetType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    // ResourcesType
    //

    ResourcesType::
    ResourcesType ()
    : ::xml_schema::type (),
      Resource_ (::xml_schema::flags (), this)
    {
    }

    ResourcesType::
    ResourcesType (const ResourcesType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Resource_ (x.Resource_, f, this)
    {
    }

    ResourcesType::
    ResourcesType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Resource_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ResourcesType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Resource
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Resource",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Resource_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Resource_type > r (
              dynamic_cast< Resource_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Resource_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    ResourcesType* ResourcesType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ResourcesType (*this, f, c);
    }

    ResourcesType::
    ~ResourcesType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ResourcesType >
    _xsd_ResourcesType_type_factory_init (
      L"ResourcesType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    // ActionsType
    //

    ActionsType::
    ActionsType ()
    : ::xml_schema::type (),
      Action_ (::xml_schema::flags (), this)
    {
    }

    ActionsType::
    ActionsType (const ActionsType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Action_ (x.Action_, f, this)
    {
    }

    ActionsType::
    ActionsType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Action_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ActionsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Action
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Action",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Action_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Action_type > r (
              dynamic_cast< Action_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Action_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    ActionsType* ActionsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActionsType (*this, f, c);
    }

    ActionsType::
    ~ActionsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ActionsType >
    _xsd_ActionsType_type_factory_init (
      L"ActionsType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    // ResourceType
    //

    ResourceType::
    ResourceType ()
    : ::xml_schema::type (),
      AttributeValue_ (::xml_schema::flags (), this)
    {
    }

    ResourceType::
    ResourceType (const AttributeValue_type& AttributeValue)
    : ::xml_schema::type (),
      AttributeValue_ (AttributeValue, ::xml_schema::flags (), this)
    {
    }

    ResourceType::
    ResourceType (::std::auto_ptr< AttributeValue_type >& AttributeValue)
    : ::xml_schema::type (),
      AttributeValue_ (AttributeValue, ::xml_schema::flags (), this)
    {
    }

    ResourceType::
    ResourceType (const ResourceType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      AttributeValue_ (x.AttributeValue_, f, this)
    {
    }

    ResourceType::
    ResourceType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      AttributeValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ResourceType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // AttributeValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"AttributeValue",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< AttributeValue_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!AttributeValue_.present ())
            {
              ::std::auto_ptr< AttributeValue_type > r (
                dynamic_cast< AttributeValue_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->AttributeValue_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!AttributeValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }
    }

    ResourceType* ResourceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ResourceType (*this, f, c);
    }

    ResourceType::
    ~ResourceType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ResourceType >
    _xsd_ResourceType_type_factory_init (
      L"ResourceType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    // ActionType
    //

    ActionType::
    ActionType ()
    : ::xml_schema::type (),
      AttributeValue_ (::xml_schema::flags (), this)
    {
    }

    ActionType::
    ActionType (const AttributeValue_type& AttributeValue)
    : ::xml_schema::type (),
      AttributeValue_ (AttributeValue, ::xml_schema::flags (), this)
    {
    }

    ActionType::
    ActionType (::std::auto_ptr< AttributeValue_type >& AttributeValue)
    : ::xml_schema::type (),
      AttributeValue_ (AttributeValue, ::xml_schema::flags (), this)
    {
    }

    ActionType::
    ActionType (const ActionType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      AttributeValue_ (x.AttributeValue_, f, this)
    {
    }

    ActionType::
    ActionType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      AttributeValue_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ActionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // AttributeValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"AttributeValue",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< AttributeValue_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!AttributeValue_.present ())
            {
              ::std::auto_ptr< AttributeValue_type > r (
                dynamic_cast< AttributeValue_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->AttributeValue_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!AttributeValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }
    }

    ActionType* ActionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActionType (*this, f, c);
    }

    ActionType::
    ~ActionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ActionType >
    _xsd_ActionType_type_factory_init (
      L"ActionType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    // ExpressionType
    //

    ExpressionType::
    ExpressionType ()
    : ::xml_schema::type ()
    {
    }

    ExpressionType::
    ExpressionType (const ExpressionType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c)
    {
    }

    ExpressionType::
    ExpressionType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f, c)
    {
    }

    ExpressionType::
    ExpressionType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (a, f, c)
    {
    }

    ExpressionType::
    ExpressionType (const ::std::wstring& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (s, e, f, c)
    {
    }

    ExpressionType* ExpressionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ExpressionType (*this, f, c);
    }

    ExpressionType::
    ~ExpressionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ExpressionType >
    _xsd_ExpressionType_type_factory_init (
      L"ExpressionType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ::middleware::lxacmlSchema::ConditionType >
    _xsd_Condition_element_factory_init (
      L"Expression",
      L"http://www.qut.com/middleware/lxacmlSchema",
      L"Condition",
      L"http://www.qut.com/middleware/lxacmlSchema");


    // ConditionType
    //

    ConditionType::
    ConditionType ()
    : ::middleware::lxacmlSchema::ExpressionType (),
      Expression_ (::xml_schema::flags (), this)
    {
    }

    ConditionType::
    ConditionType (const Expression_type& Expression)
    : ::middleware::lxacmlSchema::ExpressionType (),
      Expression_ (Expression, ::xml_schema::flags (), this)
    {
    }

    ConditionType::
    ConditionType (::std::auto_ptr< Expression_type >& Expression)
    : ::middleware::lxacmlSchema::ExpressionType (),
      Expression_ (Expression, ::xml_schema::flags (), this)
    {
    }

    ConditionType::
    ConditionType (const ConditionType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::middleware::lxacmlSchema::ExpressionType (x, f, c),
      Expression_ (x.Expression_, f, this)
    {
    }

    ConditionType::
    ConditionType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::middleware::lxacmlSchema::ExpressionType (e, f | ::xml_schema::flags::base, c),
      Expression_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ConditionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Expression
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Expression",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Expression_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Expression_.present ())
            {
              ::std::auto_ptr< Expression_type > r (
                dynamic_cast< Expression_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Expression_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Expression_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Expression",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }
    }

    ConditionType* ConditionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ConditionType (*this, f, c);
    }

    ConditionType::
    ~ConditionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ConditionType >
    _xsd_ConditionType_type_factory_init (
      L"ConditionType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ::middleware::lxacmlSchema::ApplyType >
    _xsd_Apply_element_factory_init (
      L"Expression",
      L"http://www.qut.com/middleware/lxacmlSchema",
      L"Apply",
      L"http://www.qut.com/middleware/lxacmlSchema");


    // ApplyType
    //

    ApplyType::
    ApplyType ()
    : ::middleware::lxacmlSchema::ExpressionType (),
      Expression_ (::xml_schema::flags (), this),
      FunctionId_ (::xml_schema::flags (), this)
    {
    }

    ApplyType::
    ApplyType (const FunctionId_type& FunctionId)
    : ::middleware::lxacmlSchema::ExpressionType (),
      Expression_ (::xml_schema::flags (), this),
      FunctionId_ (FunctionId, ::xml_schema::flags (), this)
    {
    }

    ApplyType::
    ApplyType (const ApplyType& x,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::middleware::lxacmlSchema::ExpressionType (x, f, c),
      Expression_ (x.Expression_, f, this),
      FunctionId_ (x.FunctionId_, f, this)
    {
    }

    ApplyType::
    ApplyType (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f,
               ::xml_schema::container* c)
    : ::middleware::lxacmlSchema::ExpressionType (e, f | ::xml_schema::flags::base, c),
      Expression_ (f, this),
      FunctionId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ApplyType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Expression
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Expression",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Expression_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Expression_type > r (
              dynamic_cast< Expression_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Expression_.push_back (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"FunctionId" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< FunctionId_type > r (
            FunctionId_traits::create (i, f, this));

          this->FunctionId_.set (r);
          continue;
        }
      }

      if (!FunctionId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"FunctionId",
          L"");
      }
    }

    ApplyType* ApplyType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ApplyType (*this, f, c);
    }

    ApplyType::
    ~ApplyType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ApplyType >
    _xsd_ApplyType_type_factory_init (
      L"ApplyType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    // AttributeDesignatorType
    //

    AttributeDesignatorType::
    AttributeDesignatorType ()
    : ::middleware::lxacmlSchema::ExpressionType (),
      AttributeId_ (::xml_schema::flags (), this)
    {
    }

    AttributeDesignatorType::
    AttributeDesignatorType (const AttributeId_type& AttributeId)
    : ::middleware::lxacmlSchema::ExpressionType (),
      AttributeId_ (AttributeId, ::xml_schema::flags (), this)
    {
    }

    AttributeDesignatorType::
    AttributeDesignatorType (const AttributeDesignatorType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::middleware::lxacmlSchema::ExpressionType (x, f, c),
      AttributeId_ (x.AttributeId_, f, this)
    {
    }

    AttributeDesignatorType::
    AttributeDesignatorType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::middleware::lxacmlSchema::ExpressionType (e, f | ::xml_schema::flags::base, c),
      AttributeId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, true);
        this->parse (p, f);
      }
    }

    void AttributeDesignatorType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"AttributeId" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< AttributeId_type > r (
            AttributeId_traits::create (i, f, this));

          this->AttributeId_.set (r);
          continue;
        }
      }

      if (!AttributeId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"AttributeId",
          L"");
      }
    }

    AttributeDesignatorType* AttributeDesignatorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AttributeDesignatorType (*this, f, c);
    }

    AttributeDesignatorType::
    ~AttributeDesignatorType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeDesignatorType >
    _xsd_AttributeDesignatorType_type_factory_init (
      L"AttributeDesignatorType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    _xsd_SubjectAttributeDesignator_element_factory_init (
      L"Expression",
      L"http://www.qut.com/middleware/lxacmlSchema",
      L"SubjectAttributeDesignator",
      L"http://www.qut.com/middleware/lxacmlSchema");


    // SubjectAttributeDesignatorType
    //

    SubjectAttributeDesignatorType::
    SubjectAttributeDesignatorType ()
    : ::middleware::lxacmlSchema::AttributeDesignatorType ()
    {
    }

    SubjectAttributeDesignatorType::
    SubjectAttributeDesignatorType (const AttributeId_type& AttributeId)
    : ::middleware::lxacmlSchema::AttributeDesignatorType (AttributeId)
    {
    }

    SubjectAttributeDesignatorType::
    SubjectAttributeDesignatorType (const SubjectAttributeDesignatorType& x,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::middleware::lxacmlSchema::AttributeDesignatorType (x, f, c)
    {
    }

    SubjectAttributeDesignatorType::
    SubjectAttributeDesignatorType (const ::xercesc::DOMElement& e,
                                    ::xml_schema::flags f,
                                    ::xml_schema::container* c)
    : ::middleware::lxacmlSchema::AttributeDesignatorType (e, f, c)
    {
    }

    SubjectAttributeDesignatorType* SubjectAttributeDesignatorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SubjectAttributeDesignatorType (*this, f, c);
    }

    SubjectAttributeDesignatorType::
    ~SubjectAttributeDesignatorType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SubjectAttributeDesignatorType >
    _xsd_SubjectAttributeDesignatorType_type_factory_init (
      L"SubjectAttributeDesignatorType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ::middleware::lxacmlSchema::AttributeValueType >
    _xsd_AttributeValue_element_factory_init (
      L"Expression",
      L"http://www.qut.com/middleware/lxacmlSchema",
      L"AttributeValue",
      L"http://www.qut.com/middleware/lxacmlSchema");


    // AttributeValueType
    //

    AttributeValueType::
    AttributeValueType ()
    : ::middleware::lxacmlSchema::ExpressionType (),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      any_attribute_ (this->dom_document ())
    {
    }

    AttributeValueType::
    AttributeValueType (const AttributeValueType& x,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::middleware::lxacmlSchema::ExpressionType (x, f, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (x.any_, this->dom_document ()),
      any_attribute_ (x.any_attribute_, this->dom_document ())
    {
    }

    AttributeValueType::
    AttributeValueType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f,
                        ::xml_schema::container* c)
    : ::middleware::lxacmlSchema::ExpressionType (e, f | ::xml_schema::flags::base, c),
      dom_document_ (::xsd::cxx::xml::dom::create_document< wchar_t > ()),
      any_ (this->dom_document ()),
      any_attribute_ (this->dom_document ())
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AttributeValueType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // any
        //
        if (true)
        {
          ::xercesc::DOMElement* r (
            static_cast< ::xercesc::DOMElement* > (
              this->dom_document ().importNode (
                const_cast< ::xercesc::DOMElement* > (&i), true)));
          this->any_ .push_back (r);
          continue;
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // any_attribute
        //
        if ((n.namespace_ () != ::xsd::cxx::xml::bits::xmlns_namespace< wchar_t > () &&
             n.namespace_ () != ::xsd::cxx::xml::bits::xsi_namespace< wchar_t > ()))
        {
          ::xercesc::DOMAttr* r (
            static_cast< ::xercesc::DOMAttr* > (
              this->dom_document ().importNode (
                const_cast< ::xercesc::DOMAttr* > (&i), true)));
          this->any_attribute_ .insert (r);
          continue;
        }
      }
    }

    AttributeValueType* AttributeValueType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AttributeValueType (*this, f, c);
    }

    AttributeValueType::
    ~AttributeValueType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeValueType >
    _xsd_AttributeValueType_type_factory_init (
      L"AttributeValueType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    // ObligationsType
    //

    ObligationsType::
    ObligationsType ()
    : ::xml_schema::type (),
      Obligation_ (::xml_schema::flags (), this)
    {
    }

    ObligationsType::
    ObligationsType (const ObligationsType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Obligation_ (x.Obligation_, f, this)
    {
    }

    ObligationsType::
    ObligationsType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Obligation_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ObligationsType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Obligation
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Obligation",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Obligation_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Obligation_type > r (
              dynamic_cast< Obligation_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Obligation_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    ObligationsType* ObligationsType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ObligationsType (*this, f, c);
    }

    ObligationsType::
    ~ObligationsType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ObligationsType >
    _xsd_ObligationsType_type_factory_init (
      L"ObligationsType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    // ObligationType
    //

    ObligationType::
    ObligationType ()
    : ::xml_schema::type (),
      AttributeAssignment_ (::xml_schema::flags (), this),
      ObligationId_ (::xml_schema::flags (), this),
      FulfillOn_ (::xml_schema::flags (), this)
    {
    }

    ObligationType::
    ObligationType (const ObligationId_type& ObligationId,
                    const FulfillOn_type& FulfillOn)
    : ::xml_schema::type (),
      AttributeAssignment_ (::xml_schema::flags (), this),
      ObligationId_ (ObligationId, ::xml_schema::flags (), this),
      FulfillOn_ (FulfillOn, ::xml_schema::flags (), this)
    {
    }

    ObligationType::
    ObligationType (const ObligationType& x,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      AttributeAssignment_ (x.AttributeAssignment_, f, this),
      ObligationId_ (x.ObligationId_, f, this),
      FulfillOn_ (x.FulfillOn_, f, this)
    {
    }

    ObligationType::
    ObligationType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f,
                    ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      AttributeAssignment_ (f, this),
      ObligationId_ (f, this),
      FulfillOn_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void ObligationType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // AttributeAssignment
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"AttributeAssignment",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< AttributeAssignment_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< AttributeAssignment_type > r (
              dynamic_cast< AttributeAssignment_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->AttributeAssignment_.push_back (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"ObligationId" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< ObligationId_type > r (
            ObligationId_traits::create (i, f, this));

          this->ObligationId_.set (r);
          continue;
        }

        if (n.name () == L"FulfillOn" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< FulfillOn_type > r (
            FulfillOn_traits::create (i, f, this));

          this->FulfillOn_.set (r);
          continue;
        }
      }

      if (!ObligationId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"ObligationId",
          L"");
      }

      if (!FulfillOn_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"FulfillOn",
          L"");
      }
    }

    ObligationType* ObligationType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ObligationType (*this, f, c);
    }

    ObligationType::
    ~ObligationType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ObligationType >
    _xsd_ObligationType_type_factory_init (
      L"ObligationType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    // EffectType
    //

    EffectType::
    EffectType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_EffectType_convert ();
    }

    EffectType::
    EffectType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_EffectType_convert ();
    }

    EffectType::
    EffectType (const ::std::wstring& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_EffectType_convert ();
    }

    EffectType* EffectType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class EffectType (*this, f, c);
    }

    EffectType::value EffectType::
    _xsd_EffectType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_EffectType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_EffectType_indexes_,
                        _xsd_EffectType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_EffectType_indexes_ + 2 || _xsd_EffectType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const EffectType::
    _xsd_EffectType_literals_[2] =
    {
      L"Permit",
      L"Deny"
    };

    const EffectType::value EffectType::
    _xsd_EffectType_indexes_[2] =
    {
      ::middleware::lxacmlSchema::EffectType::Deny,
      ::middleware::lxacmlSchema::EffectType::Permit
    };

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, EffectType >
    _xsd_EffectType_type_factory_init (
      L"EffectType",
      L"http://www.qut.com/middleware/lxacmlSchema");

    // AttributeAssignmentType
    //

    AttributeAssignmentType::
    AttributeAssignmentType ()
    : ::middleware::lxacmlSchema::AttributeValueType (),
      AttributeId_ (::xml_schema::flags (), this)
    {
    }

    AttributeAssignmentType::
    AttributeAssignmentType (const AttributeId_type& AttributeId)
    : ::middleware::lxacmlSchema::AttributeValueType (),
      AttributeId_ (AttributeId, ::xml_schema::flags (), this)
    {
    }

    AttributeAssignmentType::
    AttributeAssignmentType (const AttributeAssignmentType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::middleware::lxacmlSchema::AttributeValueType (x, f, c),
      AttributeId_ (x.AttributeId_, f, this)
    {
    }

    AttributeAssignmentType::
    AttributeAssignmentType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::middleware::lxacmlSchema::AttributeValueType (e, f | ::xml_schema::flags::base, c),
      AttributeId_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AttributeAssignmentType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::middleware::lxacmlSchema::AttributeValueType::parse (p, f);

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"AttributeId" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< AttributeId_type > r (
            AttributeId_traits::create (i, f, this));

          this->AttributeId_.set (r);
          continue;
        }
      }

      if (!AttributeId_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"AttributeId",
          L"");
      }
    }

    AttributeAssignmentType* AttributeAssignmentType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AttributeAssignmentType (*this, f, c);
    }

    AttributeAssignmentType::
    ~AttributeAssignmentType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeAssignmentType >
    _xsd_AttributeAssignmentType_type_factory_init (
      L"AttributeAssignmentType",
      L"http://www.qut.com/middleware/lxacmlSchema");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace lxacmlSchema
  {
    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::std::wstring& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType > r (
        ::middleware::lxacmlSchema::PolicySet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::std::wstring& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType > r (
        ::middleware::lxacmlSchema::PolicySet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::std::wstring& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType > r (
        ::middleware::lxacmlSchema::PolicySet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::PolicySet (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::PolicySet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::PolicySet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::PolicySet (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::PolicySet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               const ::std::wstring& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::PolicySet (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType > r (
        ::middleware::lxacmlSchema::PolicySet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType > r (
        ::middleware::lxacmlSchema::PolicySet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType > r (
        ::middleware::lxacmlSchema::PolicySet (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType > r (
          ::middleware::lxacmlSchema::PolicySet (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"PolicySet",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::PolicySetType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType > r (
          dynamic_cast< ::middleware::lxacmlSchema::PolicySetType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"PolicySet",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"PolicySet",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::PolicySetType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType > r (
          dynamic_cast< ::middleware::lxacmlSchema::PolicySetType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"PolicySet",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::std::wstring& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType > r (
        ::middleware::lxacmlSchema::Policy (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::std::wstring& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType > r (
        ::middleware::lxacmlSchema::Policy (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::std::wstring& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType > r (
        ::middleware::lxacmlSchema::Policy (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Policy (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Policy (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Policy (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Policy (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Policy (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            const ::std::wstring& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Policy (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType > r (
        ::middleware::lxacmlSchema::Policy (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType > r (
        ::middleware::lxacmlSchema::Policy (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType > r (
        ::middleware::lxacmlSchema::Policy (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType > r (
          ::middleware::lxacmlSchema::Policy (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Policy",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::PolicyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType > r (
          dynamic_cast< ::middleware::lxacmlSchema::PolicyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Policy",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Policy",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::PolicyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType > r (
          dynamic_cast< ::middleware::lxacmlSchema::PolicyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Policy",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::std::wstring& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType > r (
        ::middleware::lxacmlSchema::Rule (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::std::wstring& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType > r (
        ::middleware::lxacmlSchema::Rule (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::std::wstring& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType > r (
        ::middleware::lxacmlSchema::Rule (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Rule (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Rule (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Rule (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          const ::std::wstring& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Rule (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          const ::std::wstring& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Rule (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          const ::std::wstring& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Rule (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType > r (
        ::middleware::lxacmlSchema::Rule (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType > r (
        ::middleware::lxacmlSchema::Rule (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType > r (
        ::middleware::lxacmlSchema::Rule (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType > r (
          ::middleware::lxacmlSchema::Rule (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Rule",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::RuleType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType > r (
          dynamic_cast< ::middleware::lxacmlSchema::RuleType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Rule",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Rule",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::RuleType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType > r (
          dynamic_cast< ::middleware::lxacmlSchema::RuleType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Rule",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::std::wstring& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType > r (
        ::middleware::lxacmlSchema::Target (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::std::wstring& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType > r (
        ::middleware::lxacmlSchema::Target (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::std::wstring& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType > r (
        ::middleware::lxacmlSchema::Target (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Target (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Target (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Target (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Target (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Target (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            const ::std::wstring& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Target (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType > r (
        ::middleware::lxacmlSchema::Target (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType > r (
        ::middleware::lxacmlSchema::Target (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType > r (
        ::middleware::lxacmlSchema::Target (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType > r (
          ::middleware::lxacmlSchema::Target (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Target",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::TargetType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType > r (
          dynamic_cast< ::middleware::lxacmlSchema::TargetType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Target",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Target",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::TargetType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType > r (
          dynamic_cast< ::middleware::lxacmlSchema::TargetType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Target",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::std::wstring& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType > r (
        ::middleware::lxacmlSchema::Resources (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::std::wstring& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType > r (
        ::middleware::lxacmlSchema::Resources (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::std::wstring& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType > r (
        ::middleware::lxacmlSchema::Resources (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Resources (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Resources (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Resources (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Resources (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Resources (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               const ::std::wstring& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Resources (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType > r (
        ::middleware::lxacmlSchema::Resources (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType > r (
        ::middleware::lxacmlSchema::Resources (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType > r (
        ::middleware::lxacmlSchema::Resources (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType > r (
          ::middleware::lxacmlSchema::Resources (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Resources",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ResourcesType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ResourcesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Resources",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Resources",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ResourcesType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ResourcesType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Resources",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::std::wstring& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType > r (
        ::middleware::lxacmlSchema::Actions (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::std::wstring& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType > r (
        ::middleware::lxacmlSchema::Actions (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::std::wstring& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType > r (
        ::middleware::lxacmlSchema::Actions (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Actions (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Actions (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Actions (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             const ::std::wstring& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Actions (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             const ::std::wstring& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Actions (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             const ::std::wstring& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Actions (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType > r (
        ::middleware::lxacmlSchema::Actions (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType > r (
        ::middleware::lxacmlSchema::Actions (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType > r (
        ::middleware::lxacmlSchema::Actions (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType > r (
          ::middleware::lxacmlSchema::Actions (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Actions",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ActionsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ActionsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Actions",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Actions",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ActionsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ActionsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Actions",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::std::wstring& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType > r (
        ::middleware::lxacmlSchema::Resource (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::std::wstring& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType > r (
        ::middleware::lxacmlSchema::Resource (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::std::wstring& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType > r (
        ::middleware::lxacmlSchema::Resource (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Resource (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Resource (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Resource (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Resource (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Resource (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::wstring& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Resource (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType > r (
        ::middleware::lxacmlSchema::Resource (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType > r (
        ::middleware::lxacmlSchema::Resource (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType > r (
        ::middleware::lxacmlSchema::Resource (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType > r (
          ::middleware::lxacmlSchema::Resource (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Resource",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ResourceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ResourceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Resource",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Resource",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ResourceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ResourceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Resource",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::std::wstring& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType > r (
        ::middleware::lxacmlSchema::Action (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::std::wstring& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType > r (
        ::middleware::lxacmlSchema::Action (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::std::wstring& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType > r (
        ::middleware::lxacmlSchema::Action (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Action (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Action (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Action (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Action (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Action (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Action (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType > r (
        ::middleware::lxacmlSchema::Action (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType > r (
        ::middleware::lxacmlSchema::Action (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType > r (
        ::middleware::lxacmlSchema::Action (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType > r (
          ::middleware::lxacmlSchema::Action (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Action",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ActionType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ActionType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Action",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Action",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ActionType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ActionType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Action",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::std::wstring& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType > r (
        ::middleware::lxacmlSchema::Expression (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::std::wstring& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType > r (
        ::middleware::lxacmlSchema::Expression (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::std::wstring& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType > r (
        ::middleware::lxacmlSchema::Expression (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Expression (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Expression (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Expression (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                const ::std::wstring& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Expression (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                const ::std::wstring& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Expression (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                const ::std::wstring& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Expression (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType > r (
        ::middleware::lxacmlSchema::Expression (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType > r (
        ::middleware::lxacmlSchema::Expression (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType > r (
        ::middleware::lxacmlSchema::Expression (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType > r (
          ::middleware::lxacmlSchema::Expression (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Expression",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ExpressionType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ExpressionType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Expression",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Expression",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ExpressionType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ExpressionType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Expression",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::std::wstring& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType > r (
        ::middleware::lxacmlSchema::Condition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::std::wstring& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType > r (
        ::middleware::lxacmlSchema::Condition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::std::wstring& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType > r (
        ::middleware::lxacmlSchema::Condition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Condition (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Condition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Condition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Condition (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Condition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               const ::std::wstring& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Condition (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType > r (
        ::middleware::lxacmlSchema::Condition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType > r (
        ::middleware::lxacmlSchema::Condition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType > r (
        ::middleware::lxacmlSchema::Condition (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType > r (
          ::middleware::lxacmlSchema::Condition (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Condition",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ConditionType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ConditionType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Condition",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Condition",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ConditionType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ConditionType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Condition",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::std::wstring& u,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType > r (
        ::middleware::lxacmlSchema::Apply (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::std::wstring& u,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType > r (
        ::middleware::lxacmlSchema::Apply (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::std::wstring& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType > r (
        ::middleware::lxacmlSchema::Apply (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Apply (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Apply (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Apply (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           const ::std::wstring& sid,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Apply (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           const ::std::wstring& sid,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Apply (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           const ::std::wstring& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Apply (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::xercesc::InputSource& i,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType > r (
        ::middleware::lxacmlSchema::Apply (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::xercesc::InputSource& i,
           ::xml_schema::error_handler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType > r (
        ::middleware::lxacmlSchema::Apply (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType > r (
        ::middleware::lxacmlSchema::Apply (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType > r (
          ::middleware::lxacmlSchema::Apply (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Apply",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ApplyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ApplyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Apply",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f,
           const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Apply",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ApplyType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ApplyType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Apply",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::std::wstring& u,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType > r (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::std::wstring& u,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType > r (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::std::wstring& u,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType > r (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                const ::std::wstring& sid,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                const ::std::wstring& sid,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                const ::std::wstring& sid,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::SubjectAttributeDesignator (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::xercesc::InputSource& i,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType > r (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::xercesc::InputSource& i,
                                ::xml_schema::error_handler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType > r (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::xercesc::InputSource& i,
                                ::xercesc::DOMErrorHandler& h,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType > r (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType > r (
          ::middleware::lxacmlSchema::SubjectAttributeDesignator (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"SubjectAttributeDesignator",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType > r (
          dynamic_cast< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SubjectAttributeDesignator",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f,
                                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"SubjectAttributeDesignator",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType > r (
          dynamic_cast< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SubjectAttributeDesignator",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::std::wstring& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType > r (
        ::middleware::lxacmlSchema::AttributeValue (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::std::wstring& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType > r (
        ::middleware::lxacmlSchema::AttributeValue (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::std::wstring& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType > r (
        ::middleware::lxacmlSchema::AttributeValue (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::AttributeValue (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::AttributeValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::AttributeValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::AttributeValue (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::AttributeValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::AttributeValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType > r (
        ::middleware::lxacmlSchema::AttributeValue (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType > r (
        ::middleware::lxacmlSchema::AttributeValue (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType > r (
        ::middleware::lxacmlSchema::AttributeValue (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType > r (
          ::middleware::lxacmlSchema::AttributeValue (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::AttributeValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType > r (
          dynamic_cast< ::middleware::lxacmlSchema::AttributeValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"AttributeValue",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::AttributeValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType > r (
          dynamic_cast< ::middleware::lxacmlSchema::AttributeValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"AttributeValue",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::std::wstring& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType > r (
        ::middleware::lxacmlSchema::Obligations (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::std::wstring& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType > r (
        ::middleware::lxacmlSchema::Obligations (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::std::wstring& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType > r (
        ::middleware::lxacmlSchema::Obligations (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Obligations (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Obligations (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Obligations (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Obligations (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Obligations (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Obligations (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType > r (
        ::middleware::lxacmlSchema::Obligations (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType > r (
        ::middleware::lxacmlSchema::Obligations (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType > r (
        ::middleware::lxacmlSchema::Obligations (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType > r (
          ::middleware::lxacmlSchema::Obligations (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Obligations",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ObligationsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ObligationsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Obligations",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Obligations",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ObligationsType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ObligationsType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Obligations",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::std::wstring& u,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType > r (
        ::middleware::lxacmlSchema::Obligation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::std::wstring& u,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType > r (
        ::middleware::lxacmlSchema::Obligation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::std::wstring& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType > r (
        ::middleware::lxacmlSchema::Obligation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Obligation (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Obligation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Obligation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                const ::std::wstring& sid,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Obligation (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                const ::std::wstring& sid,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Obligation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                const ::std::wstring& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Obligation (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::xercesc::InputSource& i,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType > r (
        ::middleware::lxacmlSchema::Obligation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::xercesc::InputSource& i,
                ::xml_schema::error_handler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType > r (
        ::middleware::lxacmlSchema::Obligation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType > r (
        ::middleware::lxacmlSchema::Obligation (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType > r (
          ::middleware::lxacmlSchema::Obligation (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Obligation",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ObligationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ObligationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Obligation",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f,
                const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Obligation",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::ObligationType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType > r (
          dynamic_cast< ::middleware::lxacmlSchema::ObligationType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Obligation",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::std::wstring& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType > r (
        ::middleware::lxacmlSchema::AttributeAssignment (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::std::wstring& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType > r (
        ::middleware::lxacmlSchema::AttributeAssignment (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::std::wstring& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType > r (
        ::middleware::lxacmlSchema::AttributeAssignment (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::AttributeAssignment (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::AttributeAssignment (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::AttributeAssignment (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         const ::std::wstring& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::AttributeAssignment (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         const ::std::wstring& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::AttributeAssignment (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         const ::std::wstring& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::AttributeAssignment (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType > r (
        ::middleware::lxacmlSchema::AttributeAssignment (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType > r (
        ::middleware::lxacmlSchema::AttributeAssignment (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType > r (
        ::middleware::lxacmlSchema::AttributeAssignment (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType > r (
          ::middleware::lxacmlSchema::AttributeAssignment (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"AttributeAssignment",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::AttributeAssignmentType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType > r (
          dynamic_cast< ::middleware::lxacmlSchema::AttributeAssignmentType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"AttributeAssignment",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"AttributeAssignment",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSchema::AttributeAssignmentType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType > r (
          dynamic_cast< ::middleware::lxacmlSchema::AttributeAssignmentType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"AttributeAssignment",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::std::wstring& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::middleware::lxacmlSchema::Description (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::std::wstring& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::middleware::lxacmlSchema::Description (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::std::wstring& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::middleware::lxacmlSchema::Description (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Description (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Description (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSchema::Description (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Description (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Description (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSchema::Description (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::middleware::lxacmlSchema::Description (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::middleware::lxacmlSchema::Description (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::middleware::lxacmlSchema::Description (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xml_schema::string > r (
          ::middleware::lxacmlSchema::Description (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Description",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::string >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xml_schema::string > r (
          dynamic_cast< ::xml_schema::string* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Description",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }

    ::std::auto_ptr< ::xml_schema::string >
    Description (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Description",
          L"http://www.qut.com/middleware/lxacmlSchema",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::string >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xml_schema::string > r (
          dynamic_cast< ::xml_schema::string* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Description",
        L"http://www.qut.com/middleware/lxacmlSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace lxacmlSchema
  {
    void
    PolicySet (::std::ostream& o,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::PolicySet (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    PolicySet (::std::ostream& o,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::PolicySet (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PolicySet (::std::ostream& o,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::PolicySet (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PolicySet (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::PolicySet (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    PolicySet (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::PolicySet (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PolicySet (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::PolicySet (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    PolicySet (::xercesc::DOMDocument& d,
               const ::middleware::lxacmlSchema::PolicySetType& s,
               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::PolicySetType) == typeid (s))
      {
        if (n.name () == L"PolicySet" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"PolicySet",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"PolicySet",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PolicySet (const ::middleware::lxacmlSchema::PolicySetType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::PolicySetType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"PolicySet",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"PolicySet",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::PolicySet (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const PolicySetType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Description
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Description ())
        {
          const PolicySetType::Description_type& x (*i.Description ());
          if (typeid (PolicySetType::Description_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Description",
                L"http://www.qut.com/middleware/lxacmlSchema",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"Description",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true, true, e, x);
        }
      }

      // Policy
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (PolicySetType::Policy_const_iterator
             b (i.Policy ().begin ()), n (i.Policy ().end ());
             b != n; ++b)
        {
          if (typeid (PolicySetType::Policy_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Policy",
                L"http://www.qut.com/middleware/lxacmlSchema",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Policy",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true, true, e, *b);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PolicySetType >
    _xsd_PolicySetType_type_serializer_init (
      L"PolicySetType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Policy (::std::ostream& o,
            const ::middleware::lxacmlSchema::PolicyType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Policy (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Policy (::std::ostream& o,
            const ::middleware::lxacmlSchema::PolicyType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Policy (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Policy (::std::ostream& o,
            const ::middleware::lxacmlSchema::PolicyType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Policy (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Policy (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::PolicyType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Policy (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Policy (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::PolicyType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Policy (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Policy (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::PolicyType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Policy (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Policy (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlSchema::PolicyType& s,
            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::PolicyType) == typeid (s))
      {
        if (n.name () == L"Policy" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Policy",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Policy",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Policy (const ::middleware::lxacmlSchema::PolicyType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::PolicyType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Policy",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Policy",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::Policy (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const PolicyType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Description
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const PolicyType::Description_type& x (i.Description ());
        if (typeid (PolicyType::Description_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Description",
              L"http://www.qut.com/middleware/lxacmlSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Description",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true, true, e, x);
      }

      // Target
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const PolicyType::Target_type& x (i.Target ());
        if (typeid (PolicyType::Target_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Target",
              L"http://www.qut.com/middleware/lxacmlSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Target",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true, true, e, x);
      }

      // Rule
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (PolicyType::Rule_const_iterator
             b (i.Rule ().begin ()), n (i.Rule ().end ());
             b != n; ++b)
        {
          if (typeid (PolicyType::Rule_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Rule",
                L"http://www.qut.com/middleware/lxacmlSchema",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Rule",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true, true, e, *b);
        }
      }

      // PolicyId
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"PolicyId",
            e));

        a << i.PolicyId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, PolicyType >
    _xsd_PolicyType_type_serializer_init (
      L"PolicyType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Rule (::std::ostream& o,
          const ::middleware::lxacmlSchema::RuleType& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::wstring& e,
          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Rule (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Rule (::std::ostream& o,
          const ::middleware::lxacmlSchema::RuleType& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::wstring& e,
          ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Rule (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Rule (::std::ostream& o,
          const ::middleware::lxacmlSchema::RuleType& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::wstring& e,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Rule (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Rule (::xercesc::XMLFormatTarget& t,
          const ::middleware::lxacmlSchema::RuleType& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::wstring& e,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Rule (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Rule (::xercesc::XMLFormatTarget& t,
          const ::middleware::lxacmlSchema::RuleType& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::wstring& e,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Rule (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Rule (::xercesc::XMLFormatTarget& t,
          const ::middleware::lxacmlSchema::RuleType& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::wstring& e,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Rule (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Rule (::xercesc::DOMDocument& d,
          const ::middleware::lxacmlSchema::RuleType& s,
          ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::RuleType) == typeid (s))
      {
        if (n.name () == L"Rule" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Rule",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Rule",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Rule (const ::middleware::lxacmlSchema::RuleType& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::RuleType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Rule",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Rule",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::Rule (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const RuleType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Description
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const RuleType::Description_type& x (i.Description ());
        if (typeid (RuleType::Description_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Description",
              L"http://www.qut.com/middleware/lxacmlSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Description",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true, true, e, x);
      }

      // Target
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Target ())
        {
          const RuleType::Target_type& x (*i.Target ());
          if (typeid (RuleType::Target_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Target",
                L"http://www.qut.com/middleware/lxacmlSchema",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"Target",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true, true, e, x);
        }
      }

      // Condition
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Condition ())
        {
          const RuleType::Condition_type& x (*i.Condition ());
          if (typeid (RuleType::Condition_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Condition",
                L"http://www.qut.com/middleware/lxacmlSchema",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"Condition",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true, true, e, x);
        }
      }

      // RuleId
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"RuleId",
            e));

        a << i.RuleId ();
      }

      // Effect
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Effect",
            e));

        a << i.Effect ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RuleType >
    _xsd_RuleType_type_serializer_init (
      L"RuleType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Target (::std::ostream& o,
            const ::middleware::lxacmlSchema::TargetType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Target (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Target (::std::ostream& o,
            const ::middleware::lxacmlSchema::TargetType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Target (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Target (::std::ostream& o,
            const ::middleware::lxacmlSchema::TargetType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Target (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Target (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::TargetType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Target (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Target (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::TargetType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Target (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Target (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::TargetType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Target (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Target (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlSchema::TargetType& s,
            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::TargetType) == typeid (s))
      {
        if (n.name () == L"Target" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Target",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Target",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Target (const ::middleware::lxacmlSchema::TargetType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::TargetType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Target",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Target",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::Target (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const TargetType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Resources
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const TargetType::Resources_type& x (i.Resources ());
        if (typeid (TargetType::Resources_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Resources",
              L"http://www.qut.com/middleware/lxacmlSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Resources",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true, true, e, x);
      }

      // Actions
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const TargetType::Actions_type& x (i.Actions ());
        if (typeid (TargetType::Actions_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Actions",
              L"http://www.qut.com/middleware/lxacmlSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Actions",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true, true, e, x);
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, TargetType >
    _xsd_TargetType_type_serializer_init (
      L"TargetType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Resources (::std::ostream& o,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resources (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Resources (::std::ostream& o,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resources (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resources (::std::ostream& o,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resources (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resources (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resources (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Resources (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resources (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resources (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resources (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resources (::xercesc::DOMDocument& d,
               const ::middleware::lxacmlSchema::ResourcesType& s,
               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::ResourcesType) == typeid (s))
      {
        if (n.name () == L"Resources" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Resources",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Resources",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Resources (const ::middleware::lxacmlSchema::ResourcesType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::ResourcesType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Resources",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Resources",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::Resources (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ResourcesType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Resource
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ResourcesType::Resource_const_iterator
             b (i.Resource ().begin ()), n (i.Resource ().end ());
             b != n; ++b)
        {
          if (typeid (ResourcesType::Resource_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Resource",
                L"http://www.qut.com/middleware/lxacmlSchema",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Resource",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true, true, e, *b);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ResourcesType >
    _xsd_ResourcesType_type_serializer_init (
      L"ResourcesType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Actions (::std::ostream& o,
             const ::middleware::lxacmlSchema::ActionsType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Actions (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Actions (::std::ostream& o,
             const ::middleware::lxacmlSchema::ActionsType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Actions (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Actions (::std::ostream& o,
             const ::middleware::lxacmlSchema::ActionsType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Actions (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Actions (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlSchema::ActionsType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Actions (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Actions (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlSchema::ActionsType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Actions (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Actions (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlSchema::ActionsType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Actions (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Actions (::xercesc::DOMDocument& d,
             const ::middleware::lxacmlSchema::ActionsType& s,
             ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::ActionsType) == typeid (s))
      {
        if (n.name () == L"Actions" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Actions",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Actions",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Actions (const ::middleware::lxacmlSchema::ActionsType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::ActionsType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Actions",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Actions",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::Actions (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ActionsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Action
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ActionsType::Action_const_iterator
             b (i.Action ().begin ()), n (i.Action ().end ());
             b != n; ++b)
        {
          if (typeid (ActionsType::Action_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Action",
                L"http://www.qut.com/middleware/lxacmlSchema",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Action",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true, true, e, *b);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ActionsType >
    _xsd_ActionsType_type_serializer_init (
      L"ActionsType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Resource (::std::ostream& o,
              const ::middleware::lxacmlSchema::ResourceType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resource (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Resource (::std::ostream& o,
              const ::middleware::lxacmlSchema::ResourceType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resource (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::std::ostream& o,
              const ::middleware::lxacmlSchema::ResourceType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resource (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlSchema::ResourceType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resource (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Resource (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlSchema::ResourceType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resource (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlSchema::ResourceType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Resource (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::xercesc::DOMDocument& d,
              const ::middleware::lxacmlSchema::ResourceType& s,
              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::ResourceType) == typeid (s))
      {
        if (n.name () == L"Resource" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Resource",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Resource",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Resource (const ::middleware::lxacmlSchema::ResourceType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::ResourceType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Resource",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Resource",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::Resource (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ResourceType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // AttributeValue
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ResourceType::AttributeValue_type& x (i.AttributeValue ());
        if (typeid (ResourceType::AttributeValue_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"AttributeValue",
              L"http://www.qut.com/middleware/lxacmlSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"AttributeValue",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true, true, e, x);
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ResourceType >
    _xsd_ResourceType_type_serializer_init (
      L"ResourceType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Action (::std::ostream& o,
            const ::middleware::lxacmlSchema::ActionType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Action (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Action (::std::ostream& o,
            const ::middleware::lxacmlSchema::ActionType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Action (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::std::ostream& o,
            const ::middleware::lxacmlSchema::ActionType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Action (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::ActionType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Action (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Action (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::ActionType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Action (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlSchema::ActionType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Action (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlSchema::ActionType& s,
            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::ActionType) == typeid (s))
      {
        if (n.name () == L"Action" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Action",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Action",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Action (const ::middleware::lxacmlSchema::ActionType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::ActionType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Action",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Action",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::Action (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ActionType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // AttributeValue
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ActionType::AttributeValue_type& x (i.AttributeValue ());
        if (typeid (ActionType::AttributeValue_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"AttributeValue",
              L"http://www.qut.com/middleware/lxacmlSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"AttributeValue",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true, true, e, x);
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ActionType >
    _xsd_ActionType_type_serializer_init (
      L"ActionType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Expression (::std::ostream& o,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Expression (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Expression (::std::ostream& o,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Expression (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Expression (::std::ostream& o,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Expression (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Expression (::xercesc::XMLFormatTarget& t,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Expression (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Expression (::xercesc::XMLFormatTarget& t,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Expression (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Expression (::xercesc::XMLFormatTarget& t,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Expression (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Expression (::xercesc::DOMDocument& d,
                const ::middleware::lxacmlSchema::ExpressionType& s,
                ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::ExpressionType) == typeid (s))
      {
        if (n.name () == L"Expression" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Expression",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Expression",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Expression (const ::middleware::lxacmlSchema::ExpressionType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::ExpressionType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Expression",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Expression",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::Expression (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ExpressionType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr&,const ExpressionType&)
    {
    }

    void
    operator<< (::xml_schema::list_stream&,
                const ExpressionType&)
    {
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ExpressionType >
    _xsd_ExpressionType_type_serializer_init (
      L"ExpressionType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ::middleware::lxacmlSchema::ConditionType >
    _xsd_Condition_element_name_init (
      L"Expression",
      L"http://www.qut.com/middleware/lxacmlSchema",
      L"Condition",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Condition (::std::ostream& o,
               const ::middleware::lxacmlSchema::ConditionType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Condition (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Condition (::std::ostream& o,
               const ::middleware::lxacmlSchema::ConditionType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Condition (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Condition (::std::ostream& o,
               const ::middleware::lxacmlSchema::ConditionType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Condition (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Condition (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::ConditionType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Condition (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Condition (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::ConditionType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Condition (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Condition (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlSchema::ConditionType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Condition (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Condition (::xercesc::DOMDocument& d,
               const ::middleware::lxacmlSchema::ConditionType& s,
               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::ConditionType) == typeid (s))
      {
        if (n.name () == L"Condition" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Condition",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Condition",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Condition (const ::middleware::lxacmlSchema::ConditionType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::ConditionType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Condition",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Condition",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::Condition (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ConditionType& i)
    {
      e << static_cast< const ::middleware::lxacmlSchema::ExpressionType& > (i);

      // Expression
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ConditionType::Expression_type& x (i.Expression ());
        if (typeid (ConditionType::Expression_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Expression",
              L"http://www.qut.com/middleware/lxacmlSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Expression",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true, true, e, x);
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ConditionType >
    _xsd_ConditionType_type_serializer_init (
      L"ConditionType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ::middleware::lxacmlSchema::ApplyType >
    _xsd_Apply_element_name_init (
      L"Expression",
      L"http://www.qut.com/middleware/lxacmlSchema",
      L"Apply",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Apply (::std::ostream& o,
           const ::middleware::lxacmlSchema::ApplyType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Apply (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Apply (::std::ostream& o,
           const ::middleware::lxacmlSchema::ApplyType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Apply (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Apply (::std::ostream& o,
           const ::middleware::lxacmlSchema::ApplyType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Apply (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Apply (::xercesc::XMLFormatTarget& t,
           const ::middleware::lxacmlSchema::ApplyType& s,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Apply (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Apply (::xercesc::XMLFormatTarget& t,
           const ::middleware::lxacmlSchema::ApplyType& s,
           ::xml_schema::error_handler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Apply (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Apply (::xercesc::XMLFormatTarget& t,
           const ::middleware::lxacmlSchema::ApplyType& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::namespace_infomap& m,
           const ::std::wstring& e,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Apply (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Apply (::xercesc::DOMDocument& d,
           const ::middleware::lxacmlSchema::ApplyType& s,
           ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::ApplyType) == typeid (s))
      {
        if (n.name () == L"Apply" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Apply",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Apply",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Apply (const ::middleware::lxacmlSchema::ApplyType& s,
           const ::xml_schema::namespace_infomap& m,
           ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::ApplyType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Apply",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Apply",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::Apply (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ApplyType& i)
    {
      e << static_cast< const ::middleware::lxacmlSchema::ExpressionType& > (i);

      // Expression
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ApplyType::Expression_const_iterator
             b (i.Expression ().begin ()), n (i.Expression ().end ());
             b != n; ++b)
        {
          if (typeid (ApplyType::Expression_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Expression",
                L"http://www.qut.com/middleware/lxacmlSchema",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Expression",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true, true, e, *b);
        }
      }

      // FunctionId
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"FunctionId",
            e));

        a << i.FunctionId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ApplyType >
    _xsd_ApplyType_type_serializer_init (
      L"ApplyType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    operator<< (::xercesc::DOMElement& e, const AttributeDesignatorType& i)
    {
      e << static_cast< const ::middleware::lxacmlSchema::ExpressionType& > (i);

      // AttributeId
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"AttributeId",
            e));

        a << i.AttributeId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeDesignatorType >
    _xsd_AttributeDesignatorType_type_serializer_init (
      L"AttributeDesignatorType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    _xsd_SubjectAttributeDesignator_element_name_init (
      L"Expression",
      L"http://www.qut.com/middleware/lxacmlSchema",
      L"SubjectAttributeDesignator",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    SubjectAttributeDesignator (::std::ostream& o,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::wstring& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SubjectAttributeDesignator (::std::ostream& o,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                ::xml_schema::error_handler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::wstring& e,
                                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SubjectAttributeDesignator (::std::ostream& o,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::wstring& e,
                                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SubjectAttributeDesignator (::xercesc::XMLFormatTarget& t,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::wstring& e,
                                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SubjectAttributeDesignator (::xercesc::XMLFormatTarget& t,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                ::xml_schema::error_handler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::wstring& e,
                                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SubjectAttributeDesignator (::xercesc::XMLFormatTarget& t,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                ::xercesc::DOMErrorHandler& h,
                                const ::xml_schema::namespace_infomap& m,
                                const ::std::wstring& e,
                                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::SubjectAttributeDesignator (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SubjectAttributeDesignator (::xercesc::DOMDocument& d,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::SubjectAttributeDesignatorType) == typeid (s))
      {
        if (n.name () == L"SubjectAttributeDesignator" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"SubjectAttributeDesignator",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"SubjectAttributeDesignator",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SubjectAttributeDesignator (const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& s,
                                const ::xml_schema::namespace_infomap& m,
                                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::SubjectAttributeDesignatorType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"SubjectAttributeDesignator",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"SubjectAttributeDesignator",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::SubjectAttributeDesignator (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const SubjectAttributeDesignatorType& i)
    {
      e << static_cast< const ::middleware::lxacmlSchema::AttributeDesignatorType& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SubjectAttributeDesignatorType >
    _xsd_SubjectAttributeDesignatorType_type_serializer_init (
      L"SubjectAttributeDesignatorType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ::middleware::lxacmlSchema::AttributeValueType >
    _xsd_AttributeValue_element_name_init (
      L"Expression",
      L"http://www.qut.com/middleware/lxacmlSchema",
      L"AttributeValue",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    AttributeValue (::std::ostream& o,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeValue (::std::ostream& o,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::std::ostream& o,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::xercesc::XMLFormatTarget& t,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeValue (::xercesc::XMLFormatTarget& t,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::xercesc::XMLFormatTarget& t,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::xercesc::DOMDocument& d,
                    const ::middleware::lxacmlSchema::AttributeValueType& s,
                    ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::AttributeValueType) == typeid (s))
      {
        if (n.name () == L"AttributeValue" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"AttributeValue",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeValue (const ::middleware::lxacmlSchema::AttributeValueType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::AttributeValueType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"AttributeValue",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"AttributeValue",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::AttributeValue (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const AttributeValueType& i)
    {
      e << static_cast< const ::middleware::lxacmlSchema::ExpressionType& > (i);

      // any_attribute
      //
      for (AttributeValueType::any_attribute_const_iterator
           b (i.any_attribute ().begin ()), n (i.any_attribute ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMAttr* a (
          static_cast< ::xercesc::DOMAttr* > (
            e.getOwnerDocument ()->importNode (
              const_cast< ::xercesc::DOMAttr* > (&(*b)), true)));

        if (a->getLocalName () == 0)
          e.setAttributeNode (a);
        else
          e.setAttributeNodeNS (a);
      }

      // any
      //
      for (AttributeValueType::any_const_iterator
           b (i.any ().begin ()), n (i.any ().end ());
           b != n; ++b)
      {
        e.appendChild (
          e.getOwnerDocument ()->importNode (
            const_cast< ::xercesc::DOMElement* > (&(*b)), true));
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeValueType >
    _xsd_AttributeValueType_type_serializer_init (
      L"AttributeValueType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Obligations (::std::ostream& o,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligations (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Obligations (::std::ostream& o,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligations (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligations (::std::ostream& o,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligations (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligations (::xercesc::XMLFormatTarget& t,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligations (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Obligations (::xercesc::XMLFormatTarget& t,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligations (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligations (::xercesc::XMLFormatTarget& t,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligations (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligations (::xercesc::DOMDocument& d,
                 const ::middleware::lxacmlSchema::ObligationsType& s,
                 ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::ObligationsType) == typeid (s))
      {
        if (n.name () == L"Obligations" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Obligations",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Obligations",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Obligations (const ::middleware::lxacmlSchema::ObligationsType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::ObligationsType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Obligations",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Obligations",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::Obligations (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ObligationsType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Obligation
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ObligationsType::Obligation_const_iterator
             b (i.Obligation ().begin ()), n (i.Obligation ().end ());
             b != n; ++b)
        {
          if (typeid (ObligationsType::Obligation_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Obligation",
                L"http://www.qut.com/middleware/lxacmlSchema",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Obligation",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true, true, e, *b);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ObligationsType >
    _xsd_ObligationsType_type_serializer_init (
      L"ObligationsType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Obligation (::std::ostream& o,
                const ::middleware::lxacmlSchema::ObligationType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligation (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Obligation (::std::ostream& o,
                const ::middleware::lxacmlSchema::ObligationType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligation (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligation (::std::ostream& o,
                const ::middleware::lxacmlSchema::ObligationType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligation (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligation (::xercesc::XMLFormatTarget& t,
                const ::middleware::lxacmlSchema::ObligationType& s,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligation (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Obligation (::xercesc::XMLFormatTarget& t,
                const ::middleware::lxacmlSchema::ObligationType& s,
                ::xml_schema::error_handler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligation (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligation (::xercesc::XMLFormatTarget& t,
                const ::middleware::lxacmlSchema::ObligationType& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::namespace_infomap& m,
                const ::std::wstring& e,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Obligation (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Obligation (::xercesc::DOMDocument& d,
                const ::middleware::lxacmlSchema::ObligationType& s,
                ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::ObligationType) == typeid (s))
      {
        if (n.name () == L"Obligation" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Obligation",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Obligation",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Obligation (const ::middleware::lxacmlSchema::ObligationType& s,
                const ::xml_schema::namespace_infomap& m,
                ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::ObligationType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Obligation",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Obligation",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::Obligation (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ObligationType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // AttributeAssignment
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (ObligationType::AttributeAssignment_const_iterator
             b (i.AttributeAssignment ().begin ()), n (i.AttributeAssignment ().end ());
             b != n; ++b)
        {
          if (typeid (ObligationType::AttributeAssignment_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"AttributeAssignment",
                L"http://www.qut.com/middleware/lxacmlSchema",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"AttributeAssignment",
              L"http://www.qut.com/middleware/lxacmlSchema",
              true, true, e, *b);
        }
      }

      // ObligationId
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"ObligationId",
            e));

        a << i.ObligationId ();
      }

      // FulfillOn
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"FulfillOn",
            e));

        a << i.FulfillOn ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ObligationType >
    _xsd_ObligationType_type_serializer_init (
      L"ObligationType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    operator<< (::xercesc::DOMElement& e, const EffectType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const EffectType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const EffectType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, EffectType >
    _xsd_EffectType_type_serializer_init (
      L"EffectType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    AttributeAssignment (::std::ostream& o,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeAssignment (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeAssignment (::std::ostream& o,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeAssignment (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeAssignment (::std::ostream& o,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeAssignment (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeAssignment (::xercesc::XMLFormatTarget& t,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeAssignment (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeAssignment (::xercesc::XMLFormatTarget& t,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeAssignment (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeAssignment (::xercesc::XMLFormatTarget& t,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::AttributeAssignment (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeAssignment (::xercesc::DOMDocument& d,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSchema::AttributeAssignmentType) == typeid (s))
      {
        if (n.name () == L"AttributeAssignment" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"AttributeAssignment",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"AttributeAssignment",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeAssignment (const ::middleware::lxacmlSchema::AttributeAssignmentType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSchema::AttributeAssignmentType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"AttributeAssignment",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"AttributeAssignment",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::AttributeAssignment (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const AttributeAssignmentType& i)
    {
      e << static_cast< const ::middleware::lxacmlSchema::AttributeValueType& > (i);

      // AttributeId
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"AttributeId",
            e));

        a << i.AttributeId ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeAssignmentType >
    _xsd_AttributeAssignmentType_type_serializer_init (
      L"AttributeAssignmentType",
      L"http://www.qut.com/middleware/lxacmlSchema");


    void
    Description (::std::ostream& o,
                 const ::xml_schema::string& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Description (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Description (::std::ostream& o,
                 const ::xml_schema::string& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Description (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Description (::std::ostream& o,
                 const ::xml_schema::string& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Description (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Description (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::string& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Description (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Description (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::string& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Description (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Description (::xercesc::XMLFormatTarget& t,
                 const ::xml_schema::string& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSchema::Description (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Description (::xercesc::DOMDocument& d,
                 const ::xml_schema::string& s,
                 ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::xml_schema::string) == typeid (s))
      {
        if (n.name () == L"Description" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Description",
            L"http://www.qut.com/middleware/lxacmlSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Description",
          L"http://www.qut.com/middleware/lxacmlSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Description (const ::xml_schema::string& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xml_schema::string) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Description",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Description",
            L"http://www.qut.com/middleware/lxacmlSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSchema::Description (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

