// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "saml2/bindings/lxacml-schema-saml-protocol.hxx"

namespace middleware
{
  namespace lxacmlSAMLProtocolSchema
  {
    // LXACMLAuthzDecisionQueryType
    // 

    const LXACMLAuthzDecisionQueryType::Request_type& LXACMLAuthzDecisionQueryType::
    Request () const
    {
      return this->Request_.get ();
    }

    LXACMLAuthzDecisionQueryType::Request_type& LXACMLAuthzDecisionQueryType::
    Request ()
    {
      return this->Request_.get ();
    }

    void LXACMLAuthzDecisionQueryType::
    Request (const Request_type& x)
    {
      this->Request_.set (x);
    }

    void LXACMLAuthzDecisionQueryType::
    Request (::std::auto_ptr< Request_type > x)
    {
      this->Request_.set (x);
    }

    const LXACMLAuthzDecisionQueryType::InputContextOnly_type& LXACMLAuthzDecisionQueryType::
    InputContextOnly () const
    {
      return this->InputContextOnly_.get ();
    }

    LXACMLAuthzDecisionQueryType::InputContextOnly_type& LXACMLAuthzDecisionQueryType::
    InputContextOnly ()
    {
      return this->InputContextOnly_.get ();
    }

    void LXACMLAuthzDecisionQueryType::
    InputContextOnly (const InputContextOnly_type& x)
    {
      this->InputContextOnly_.set (x);
    }

    const LXACMLAuthzDecisionQueryType::InputContextOnly_type& LXACMLAuthzDecisionQueryType::
    InputContextOnly_default_value ()
    {
      return InputContextOnly_default_value_;
    }

    const LXACMLAuthzDecisionQueryType::ReturnContext_type& LXACMLAuthzDecisionQueryType::
    ReturnContext () const
    {
      return this->ReturnContext_.get ();
    }

    LXACMLAuthzDecisionQueryType::ReturnContext_type& LXACMLAuthzDecisionQueryType::
    ReturnContext ()
    {
      return this->ReturnContext_.get ();
    }

    void LXACMLAuthzDecisionQueryType::
    ReturnContext (const ReturnContext_type& x)
    {
      this->ReturnContext_.set (x);
    }

    const LXACMLAuthzDecisionQueryType::ReturnContext_type& LXACMLAuthzDecisionQueryType::
    ReturnContext_default_value ()
    {
      return ReturnContext_default_value_;
    }
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace lxacmlSAMLProtocolSchema
  {
    // LXACMLAuthzDecisionQueryType
    //

    const LXACMLAuthzDecisionQueryType::InputContextOnly_type LXACMLAuthzDecisionQueryType::InputContextOnly_default_value_ (
      ::xsd::cxx::tree::traits< ::xml_schema::boolean, wchar_t >::create (
        ::std::wstring (L"false"), 0, 0, 0));

    const LXACMLAuthzDecisionQueryType::ReturnContext_type LXACMLAuthzDecisionQueryType::ReturnContext_default_value_ (
      ::xsd::cxx::tree::traits< ::xml_schema::boolean, wchar_t >::create (
        ::std::wstring (L"false"), 0, 0, 0));

    LXACMLAuthzDecisionQueryType::
    LXACMLAuthzDecisionQueryType ()
    : ::saml2::protocol::RequestAbstractType (),
      Request_ (::xml_schema::flags (), this),
      InputContextOnly_ (InputContextOnly_default_value (), ::xml_schema::flags (), this),
      ReturnContext_ (ReturnContext_default_value (), ::xml_schema::flags (), this)
    {
    }

    LXACMLAuthzDecisionQueryType::
    LXACMLAuthzDecisionQueryType (const ID_type& ID,
                                  const Version_type& Version,
                                  const IssueInstant_type& IssueInstant,
                                  const Request_type& Request)
    : ::saml2::protocol::RequestAbstractType (ID,
                                              Version,
                                              IssueInstant),
      Request_ (Request, ::xml_schema::flags (), this),
      InputContextOnly_ (InputContextOnly_default_value (), ::xml_schema::flags (), this),
      ReturnContext_ (ReturnContext_default_value (), ::xml_schema::flags (), this)
    {
    }

    LXACMLAuthzDecisionQueryType::
    LXACMLAuthzDecisionQueryType (const ID_type& ID,
                                  const Version_type& Version,
                                  const IssueInstant_type& IssueInstant,
                                  ::std::auto_ptr< Request_type >& Request)
    : ::saml2::protocol::RequestAbstractType (ID,
                                              Version,
                                              IssueInstant),
      Request_ (Request, ::xml_schema::flags (), this),
      InputContextOnly_ (InputContextOnly_default_value (), ::xml_schema::flags (), this),
      ReturnContext_ (ReturnContext_default_value (), ::xml_schema::flags (), this)
    {
    }

    LXACMLAuthzDecisionQueryType::
    LXACMLAuthzDecisionQueryType (const LXACMLAuthzDecisionQueryType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::saml2::protocol::RequestAbstractType (x, f, c),
      Request_ (x.Request_, f, this),
      InputContextOnly_ (x.InputContextOnly_, f, this),
      ReturnContext_ (x.ReturnContext_, f, this)
    {
    }

    LXACMLAuthzDecisionQueryType::
    LXACMLAuthzDecisionQueryType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::saml2::protocol::RequestAbstractType (e, f | ::xml_schema::flags::base, c),
      Request_ (f, this),
      InputContextOnly_ (f, this),
      ReturnContext_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void LXACMLAuthzDecisionQueryType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::saml2::protocol::RequestAbstractType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Request
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Request",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< Request_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Request_.present ())
            {
              ::std::auto_ptr< Request_type > r (
                dynamic_cast< Request_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Request_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Request_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Request",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"InputContextOnly" && n.namespace_ ().empty ())
        {
          this->InputContextOnly_.set (InputContextOnly_traits::create (i, f, this));
          continue;
        }

        if (n.name () == L"ReturnContext" && n.namespace_ ().empty ())
        {
          this->ReturnContext_.set (ReturnContext_traits::create (i, f, this));
          continue;
        }
      }

      if (!InputContextOnly_.present ())
      {
        this->InputContextOnly_.set (InputContextOnly_default_value ());
      }

      if (!ReturnContext_.present ())
      {
        this->ReturnContext_.set (ReturnContext_default_value ());
      }
    }

    LXACMLAuthzDecisionQueryType* LXACMLAuthzDecisionQueryType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LXACMLAuthzDecisionQueryType (*this, f, c);
    }

    LXACMLAuthzDecisionQueryType::
    ~LXACMLAuthzDecisionQueryType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LXACMLAuthzDecisionQueryType >
    _xsd_LXACMLAuthzDecisionQueryType_type_factory_init (
      L"LXACMLAuthzDecisionQueryType",
      L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace lxacmlSAMLProtocolSchema
  {
    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::std::wstring& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType > r (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::std::wstring& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType > r (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::std::wstring& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType > r (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream& is,
                              const ::std::wstring& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream& is,
                              const ::std::wstring& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::std::istream& is,
                              const ::std::wstring& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType > r (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType > r (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType > r (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType > r (
          ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"LXACMLAuthzDecisionQuery",
          L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType > r (
          dynamic_cast< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"LXACMLAuthzDecisionQuery",
        L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >
    LXACMLAuthzDecisionQuery (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"LXACMLAuthzDecisionQuery",
          L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType > r (
          dynamic_cast< ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"LXACMLAuthzDecisionQuery",
        L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace lxacmlSAMLProtocolSchema
  {
    void
    LXACMLAuthzDecisionQuery (::std::ostream& o,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::wstring& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLAuthzDecisionQuery (::std::ostream& o,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::wstring& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionQuery (::std::ostream& o,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::wstring& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionQuery (::xercesc::XMLFormatTarget& t,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::wstring& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLAuthzDecisionQuery (::xercesc::XMLFormatTarget& t,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::wstring& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionQuery (::xercesc::XMLFormatTarget& t,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::wstring& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLAuthzDecisionQuery (::xercesc::DOMDocument& d,
                              const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType) == typeid (s))
      {
        if (n.name () == L"LXACMLAuthzDecisionQuery" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"LXACMLAuthzDecisionQuery",
            L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"LXACMLAuthzDecisionQuery",
          L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LXACMLAuthzDecisionQuery (const ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQueryType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"LXACMLAuthzDecisionQuery",
            L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"LXACMLAuthzDecisionQuery",
            L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlSAMLProtocolSchema::LXACMLAuthzDecisionQuery (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const LXACMLAuthzDecisionQueryType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      // Request
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const LXACMLAuthzDecisionQueryType::Request_type& x (i.Request ());
        if (typeid (LXACMLAuthzDecisionQueryType::Request_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Request",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Request",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true, true, e, x);
      }

      // InputContextOnly
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"InputContextOnly",
            e));

        a << i.InputContextOnly ();
      }

      // ReturnContext
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"ReturnContext",
            e));

        a << i.ReturnContext ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LXACMLAuthzDecisionQueryType >
    _xsd_LXACMLAuthzDecisionQueryType_type_serializer_init (
      L"LXACMLAuthzDecisionQueryType",
      L"http://www.qut.com/middleware/lxacmlSAMLProtocolSchema");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

