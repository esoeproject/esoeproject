// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "saml2/bindings/lxacml-schema-metadata.hxx"

namespace middleware
{
  namespace lxacmlPDPSchema
  {
    // LXACMLPDPDescriptorType
    // 

    const LXACMLPDPDescriptorType::AuthzService_sequence& LXACMLPDPDescriptorType::
    AuthzService () const
    {
      return this->AuthzService_;
    }

    LXACMLPDPDescriptorType::AuthzService_sequence& LXACMLPDPDescriptorType::
    AuthzService ()
    {
      return this->AuthzService_;
    }

    void LXACMLPDPDescriptorType::
    AuthzService (const AuthzService_sequence& s)
    {
      this->AuthzService_ = s;
    }

    const LXACMLPDPDescriptorType::AssertionIDRequestService_sequence& LXACMLPDPDescriptorType::
    AssertionIDRequestService () const
    {
      return this->AssertionIDRequestService_;
    }

    LXACMLPDPDescriptorType::AssertionIDRequestService_sequence& LXACMLPDPDescriptorType::
    AssertionIDRequestService ()
    {
      return this->AssertionIDRequestService_;
    }

    void LXACMLPDPDescriptorType::
    AssertionIDRequestService (const AssertionIDRequestService_sequence& s)
    {
      this->AssertionIDRequestService_ = s;
    }

    const LXACMLPDPDescriptorType::NameIDFormat_sequence& LXACMLPDPDescriptorType::
    NameIDFormat () const
    {
      return this->NameIDFormat_;
    }

    LXACMLPDPDescriptorType::NameIDFormat_sequence& LXACMLPDPDescriptorType::
    NameIDFormat ()
    {
      return this->NameIDFormat_;
    }

    void LXACMLPDPDescriptorType::
    NameIDFormat (const NameIDFormat_sequence& s)
    {
      this->NameIDFormat_ = s;
    }
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace lxacmlPDPSchema
  {
    // LXACMLPDPDescriptorType
    //

    LXACMLPDPDescriptorType::
    LXACMLPDPDescriptorType ()
    : ::saml2::metadata::RoleDescriptorType (),
      AuthzService_ (::xml_schema::flags (), this),
      AssertionIDRequestService_ (::xml_schema::flags (), this),
      NameIDFormat_ (::xml_schema::flags (), this)
    {
    }

    LXACMLPDPDescriptorType::
    LXACMLPDPDescriptorType (const protocolSupportEnumeration_type& protocolSupportEnumeration)
    : ::saml2::metadata::RoleDescriptorType (protocolSupportEnumeration),
      AuthzService_ (::xml_schema::flags (), this),
      AssertionIDRequestService_ (::xml_schema::flags (), this),
      NameIDFormat_ (::xml_schema::flags (), this)
    {
    }

    LXACMLPDPDescriptorType::
    LXACMLPDPDescriptorType (const LXACMLPDPDescriptorType& x,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::saml2::metadata::RoleDescriptorType (x, f, c),
      AuthzService_ (x.AuthzService_, f, this),
      AssertionIDRequestService_ (x.AssertionIDRequestService_, f, this),
      NameIDFormat_ (x.NameIDFormat_, f, this)
    {
    }

    LXACMLPDPDescriptorType::
    LXACMLPDPDescriptorType (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f,
                             ::xml_schema::container* c)
    : ::saml2::metadata::RoleDescriptorType (e, f | ::xml_schema::flags::base, c),
      AuthzService_ (f, this),
      AssertionIDRequestService_ (f, this),
      NameIDFormat_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void LXACMLPDPDescriptorType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::saml2::metadata::RoleDescriptorType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // AuthzService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"AuthzService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              &::xsd::cxx::tree::factory_impl< AuthzService_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< AuthzService_type > r (
              dynamic_cast< AuthzService_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->AuthzService_.push_back (r);
            continue;
          }
        }

        // AssertionIDRequestService
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"AssertionIDRequestService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              &::xsd::cxx::tree::factory_impl< AssertionIDRequestService_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< AssertionIDRequestService_type > r (
              dynamic_cast< AssertionIDRequestService_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->AssertionIDRequestService_.push_back (r);
            continue;
          }
        }

        // NameIDFormat
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"NameIDFormat",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              &::xsd::cxx::tree::factory_impl< NameIDFormat_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< NameIDFormat_type > r (
              dynamic_cast< NameIDFormat_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->NameIDFormat_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    LXACMLPDPDescriptorType* LXACMLPDPDescriptorType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class LXACMLPDPDescriptorType (*this, f, c);
    }

    LXACMLPDPDescriptorType::
    ~LXACMLPDPDescriptorType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, LXACMLPDPDescriptorType >
    _xsd_LXACMLPDPDescriptorType_type_factory_init (
      L"LXACMLPDPDescriptorType",
      L"http://www.qut.com/middleware/lxacmlPDPSchema");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace lxacmlPDPSchema
  {
    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (const ::std::wstring& u,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType > r (
        ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (const ::std::wstring& u,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType > r (
        ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (const ::std::wstring& u,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType > r (
        ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (::std::istream& is,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (::std::istream& is,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (::std::istream& is,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (::std::istream& is,
                         const ::std::wstring& sid,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (::std::istream& is,
                         const ::std::wstring& sid,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (::std::istream& is,
                         const ::std::wstring& sid,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (::xercesc::InputSource& i,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType > r (
        ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (::xercesc::InputSource& i,
                         ::xml_schema::error_handler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType > r (
        ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (::xercesc::InputSource& i,
                         ::xercesc::DOMErrorHandler& h,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType > r (
        ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType > r (
          ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"LXACMLPDPDescriptor",
          L"http://www.qut.com/middleware/lxacmlPDPSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType > r (
          dynamic_cast< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"LXACMLPDPDescriptor",
        L"http://www.qut.com/middleware/lxacmlPDPSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >
    LXACMLPDPDescriptor (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f,
                         const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"LXACMLPDPDescriptor",
          L"http://www.qut.com/middleware/lxacmlPDPSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType > r (
          dynamic_cast< ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"LXACMLPDPDescriptor",
        L"http://www.qut.com/middleware/lxacmlPDPSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace lxacmlPDPSchema
  {
    void
    LXACMLPDPDescriptor (::std::ostream& o,
                         const ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLPDPDescriptor (::std::ostream& o,
                         const ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLPDPDescriptor (::std::ostream& o,
                         const ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLPDPDescriptor (::xercesc::XMLFormatTarget& t,
                         const ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType& s,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    LXACMLPDPDescriptor (::xercesc::XMLFormatTarget& t,
                         const ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType& s,
                         ::xml_schema::error_handler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLPDPDescriptor (::xercesc::XMLFormatTarget& t,
                         const ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType& s,
                         ::xercesc::DOMErrorHandler& h,
                         const ::xml_schema::namespace_infomap& m,
                         const ::std::wstring& e,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    LXACMLPDPDescriptor (::xercesc::DOMDocument& d,
                         const ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType& s,
                         ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType) == typeid (s))
      {
        if (n.name () == L"LXACMLPDPDescriptor" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlPDPSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"LXACMLPDPDescriptor",
            L"http://www.qut.com/middleware/lxacmlPDPSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"LXACMLPDPDescriptor",
          L"http://www.qut.com/middleware/lxacmlPDPSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LXACMLPDPDescriptor (const ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType& s,
                         const ::xml_schema::namespace_infomap& m,
                         ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlPDPSchema::LXACMLPDPDescriptorType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"LXACMLPDPDescriptor",
            L"http://www.qut.com/middleware/lxacmlPDPSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"LXACMLPDPDescriptor",
            L"http://www.qut.com/middleware/lxacmlPDPSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlPDPSchema::LXACMLPDPDescriptor (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const LXACMLPDPDescriptorType& i)
    {
      e << static_cast< const ::saml2::metadata::RoleDescriptorType& > (i);

      // AuthzService
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (LXACMLPDPDescriptorType::AuthzService_const_iterator
             b (i.AuthzService ().begin ()), n (i.AuthzService ().end ());
             b != n; ++b)
        {
          if (typeid (LXACMLPDPDescriptorType::AuthzService_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"AuthzService",
                L"urn:oasis:names:tc:SAML:2.0:metadata",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"AuthzService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true, true, e, *b);
        }
      }

      // AssertionIDRequestService
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (LXACMLPDPDescriptorType::AssertionIDRequestService_const_iterator
             b (i.AssertionIDRequestService ().begin ()), n (i.AssertionIDRequestService ().end ());
             b != n; ++b)
        {
          if (typeid (LXACMLPDPDescriptorType::AssertionIDRequestService_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"AssertionIDRequestService",
                L"urn:oasis:names:tc:SAML:2.0:metadata",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"AssertionIDRequestService",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true, true, e, *b);
        }
      }

      // NameIDFormat
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (LXACMLPDPDescriptorType::NameIDFormat_const_iterator
             b (i.NameIDFormat ().begin ()), n (i.NameIDFormat ().end ());
             b != n; ++b)
        {
          if (typeid (LXACMLPDPDescriptorType::NameIDFormat_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"NameIDFormat",
                L"urn:oasis:names:tc:SAML:2.0:metadata",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"NameIDFormat",
              L"urn:oasis:names:tc:SAML:2.0:metadata",
              true, true, e, *b);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, LXACMLPDPDescriptorType >
    _xsd_LXACMLPDPDescriptorType_type_serializer_init (
      L"LXACMLPDPDescriptorType",
      L"http://www.qut.com/middleware/lxacmlPDPSchema");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

