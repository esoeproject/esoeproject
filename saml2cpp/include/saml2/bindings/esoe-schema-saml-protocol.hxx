// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_ESOE_SCHEMA_SAML_PROTOCOL_HXX
#define CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_ESOE_SCHEMA_SAML_PROTOCOL_HXX

// Begin prologue.
//
#include "saml2/SAML2Defs.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "saml2/xsd/xml-schema.hxx"

// Forward declarations.
//
namespace middleware
{
  namespace ESOEProtocolSchema
  {
    class ClearAuthzCacheRequestType;
    class ClearAuthzCacheResponseType;
    class ValidateInitializationRequestType;
    class ValidateInitializationResponseType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "saml-schema-assertion-2.0.hxx"

#include "saml-schema-protocol-2.0.hxx"

#include "lxacml-schema.hxx"

#include "lxacml-schema-context.hxx"

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    class ClearAuthzCacheRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:
      // Subject
      // 
      typedef ::saml2::assertion::SubjectType Subject_type;
      typedef ::xsd::cxx::tree::optional< Subject_type > Subject_optional;
      typedef ::xsd::cxx::tree::traits< Subject_type, wchar_t > Subject_traits;

      const Subject_optional&
      Subject () const;

      Subject_optional&
      Subject ();

      void
      Subject (const Subject_type& x);

      void
      Subject (const Subject_optional& x);

      void
      Subject (::std::auto_ptr< Subject_type > p);

      // Reason
      // 
      typedef ::xml_schema::string Reason_type;
      typedef ::xsd::cxx::tree::traits< Reason_type, wchar_t > Reason_traits;

      const Reason_type&
      Reason () const;

      Reason_type&
      Reason ();

      void
      Reason (const Reason_type& x);

      void
      Reason (::std::auto_ptr< Reason_type > p);

      // Constructors.
      //
      ClearAuthzCacheRequestType ();

      ClearAuthzCacheRequestType (const ID_type&,
                                  const Version_type&,
                                  const IssueInstant_type&,
                                  const Reason_type&);

      ClearAuthzCacheRequestType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      ClearAuthzCacheRequestType (const ClearAuthzCacheRequestType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual ClearAuthzCacheRequestType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ClearAuthzCacheRequestType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Subject_optional Subject_;
      ::xsd::cxx::tree::one< Reason_type > Reason_;
    };

    class ClearAuthzCacheResponseType: public ::saml2::protocol::StatusResponseType
    {
      public:
      // Constructors.
      //
      ClearAuthzCacheResponseType ();

      ClearAuthzCacheResponseType (const Status_type&,
                                   const ID_type&,
                                   const Version_type&,
                                   const IssueInstant_type&);

      ClearAuthzCacheResponseType (::std::auto_ptr< Status_type >&,
                                   const ID_type&,
                                   const Version_type&,
                                   const IssueInstant_type&);

      ClearAuthzCacheResponseType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      ClearAuthzCacheResponseType (const ClearAuthzCacheResponseType& x,
                                   ::xml_schema::flags f = 0,
                                   ::xml_schema::container* c = 0);

      virtual ClearAuthzCacheResponseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ClearAuthzCacheResponseType ();
    };

    class ValidateInitializationRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:
      // ipAddress
      // 
      typedef ::xml_schema::string ipAddress_type;
      typedef ::xsd::cxx::tree::sequence< ipAddress_type > ipAddress_sequence;
      typedef ipAddress_sequence::iterator ipAddress_iterator;
      typedef ipAddress_sequence::const_iterator ipAddress_const_iterator;
      typedef ::xsd::cxx::tree::traits< ipAddress_type, wchar_t > ipAddress_traits;

      const ipAddress_sequence&
      ipAddress () const;

      ipAddress_sequence&
      ipAddress ();

      void
      ipAddress (const ipAddress_sequence& s);

      // compileDate
      // 
      typedef ::xml_schema::string compileDate_type;
      typedef ::xsd::cxx::tree::traits< compileDate_type, wchar_t > compileDate_traits;

      const compileDate_type&
      compileDate () const;

      compileDate_type&
      compileDate ();

      void
      compileDate (const compileDate_type& x);

      void
      compileDate (::std::auto_ptr< compileDate_type > p);

      // compileSystem
      // 
      typedef ::xml_schema::string compileSystem_type;
      typedef ::xsd::cxx::tree::traits< compileSystem_type, wchar_t > compileSystem_traits;

      const compileSystem_type&
      compileSystem () const;

      compileSystem_type&
      compileSystem ();

      void
      compileSystem (const compileSystem_type& x);

      void
      compileSystem (::std::auto_ptr< compileSystem_type > p);

      // sw-version
      // 
      typedef ::xml_schema::string sw_version_type;
      typedef ::xsd::cxx::tree::traits< sw_version_type, wchar_t > sw_version_traits;

      const sw_version_type&
      sw_version () const;

      sw_version_type&
      sw_version ();

      void
      sw_version (const sw_version_type& x);

      void
      sw_version (::std::auto_ptr< sw_version_type > p);

      // environment
      // 
      typedef ::xml_schema::string environment_type;
      typedef ::xsd::cxx::tree::traits< environment_type, wchar_t > environment_traits;

      const environment_type&
      environment () const;

      environment_type&
      environment ();

      void
      environment (const environment_type& x);

      void
      environment (::std::auto_ptr< environment_type > p);

      // nodeId
      // 
      typedef ::xml_schema::string nodeId_type;
      typedef ::xsd::cxx::tree::traits< nodeId_type, wchar_t > nodeId_traits;

      const nodeId_type&
      nodeId () const;

      nodeId_type&
      nodeId ();

      void
      nodeId (const nodeId_type& x);

      void
      nodeId (::std::auto_ptr< nodeId_type > p);

      // authzCacheIndex
      // 
      typedef ::xml_schema::unsigned_short authzCacheIndex_type;
      typedef ::xsd::cxx::tree::traits< authzCacheIndex_type, wchar_t > authzCacheIndex_traits;

      const authzCacheIndex_type&
      authzCacheIndex () const;

      authzCacheIndex_type&
      authzCacheIndex ();

      void
      authzCacheIndex (const authzCacheIndex_type& x);

      // Constructors.
      //
      ValidateInitializationRequestType ();

      ValidateInitializationRequestType (const ID_type&,
                                         const Version_type&,
                                         const IssueInstant_type&,
                                         const compileDate_type&,
                                         const compileSystem_type&,
                                         const sw_version_type&,
                                         const environment_type&,
                                         const nodeId_type&,
                                         const authzCacheIndex_type&);

      ValidateInitializationRequestType (const ID_type&,
                                         const Version_type&,
                                         const IssueInstant_type&,
                                         ::std::auto_ptr< compileDate_type >&,
                                         ::std::auto_ptr< compileSystem_type >&,
                                         ::std::auto_ptr< sw_version_type >&,
                                         ::std::auto_ptr< environment_type >&,
                                         ::std::auto_ptr< nodeId_type >&,
                                         const authzCacheIndex_type&);

      ValidateInitializationRequestType (const ::xercesc::DOMElement& e,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      ValidateInitializationRequestType (const ValidateInitializationRequestType& x,
                                         ::xml_schema::flags f = 0,
                                         ::xml_schema::container* c = 0);

      virtual ValidateInitializationRequestType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ValidateInitializationRequestType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ipAddress_sequence ipAddress_;
      ::xsd::cxx::tree::one< compileDate_type > compileDate_;
      ::xsd::cxx::tree::one< compileSystem_type > compileSystem_;
      ::xsd::cxx::tree::one< sw_version_type > sw_version_;
      ::xsd::cxx::tree::one< environment_type > environment_;
      ::xsd::cxx::tree::one< nodeId_type > nodeId_;
      ::xsd::cxx::tree::one< authzCacheIndex_type > authzCacheIndex_;
    };

    class ValidateInitializationResponseType: public ::saml2::protocol::StatusResponseType
    {
      public:
      // Constructors.
      //
      ValidateInitializationResponseType ();

      ValidateInitializationResponseType (const Status_type&,
                                          const ID_type&,
                                          const Version_type&,
                                          const IssueInstant_type&);

      ValidateInitializationResponseType (::std::auto_ptr< Status_type >&,
                                          const ID_type&,
                                          const Version_type&,
                                          const IssueInstant_type&);

      ValidateInitializationResponseType (const ::xercesc::DOMElement& e,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      ValidateInitializationResponseType (const ValidateInitializationResponseType& x,
                                          ::xml_schema::flags f = 0,
                                          ::xml_schema::container* c = 0);

      virtual ValidateInitializationResponseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ValidateInitializationResponseType ();
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::wstring& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::wstring& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::std::wstring& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            const ::std::wstring& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            const ::std::wstring& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::std::istream& is,
                            const ::std::wstring& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType >
    ClearAuthzCacheRequest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::wstring& uri,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::wstring& uri,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::std::wstring& uri,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             const ::std::wstring& id,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             const ::std::wstring& id,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::std::istream& is,
                             const ::std::wstring& id,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::xercesc::InputSource& is,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::xercesc::InputSource& is,
                             ::xml_schema::error_handler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::xercesc::InputSource& is,
                             ::xercesc::DOMErrorHandler& eh,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (const ::xercesc::DOMDocument& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType >
    ClearAuthzCacheResponse (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                             ::xml_schema::flags f = 0,
                             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::wstring& uri,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::wstring& uri,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::std::wstring& uri,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   const ::std::wstring& id,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   const ::std::wstring& id,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::std::istream& is,
                                   const ::std::wstring& id,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::xercesc::InputSource& is,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::xercesc::InputSource& is,
                                   ::xml_schema::error_handler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::xercesc::InputSource& is,
                                   ::xercesc::DOMErrorHandler& eh,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (const ::xercesc::DOMDocument& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType >
    ValidateInitializationRequest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                   ::xml_schema::flags f = 0,
                                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::wstring& uri,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::wstring& uri,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::std::wstring& uri,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    const ::std::wstring& id,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    const ::std::wstring& id,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::std::istream& is,
                                    const ::std::wstring& id,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::xercesc::InputSource& is,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::xercesc::InputSource& is,
                                    ::xml_schema::error_handler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::xercesc::InputSource& is,
                                    ::xercesc::DOMErrorHandler& eh,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (const ::xercesc::DOMDocument& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType >
    ValidateInitializationResponse (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                    ::xml_schema::flags f = 0,
                                    const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace middleware
{
  namespace ESOEProtocolSchema
  {
    // Serialize to std::ostream.
    //

    void
    ClearAuthzCacheRequest (::std::ostream& os,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    void
    ClearAuthzCacheRequest (::std::ostream& os,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    void
    ClearAuthzCacheRequest (::std::ostream& os,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget& ft,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget& ft,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            ::xml_schema::error_handler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    void
    ClearAuthzCacheRequest (::xercesc::XMLFormatTarget& ft,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            ::xercesc::DOMErrorHandler& eh,
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            const ::std::wstring& e = L"UTF-8",
                            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ClearAuthzCacheRequest (::xercesc::DOMDocument& d,
                            const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x,
                            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ClearAuthzCacheRequest (const ::middleware::ESOEProtocolSchema::ClearAuthzCacheRequestType& x, 
                            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ClearAuthzCacheRequestType&);

    // Serialize to std::ostream.
    //

    void
    ClearAuthzCacheResponse (::std::ostream& os,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    ClearAuthzCacheResponse (::std::ostream& os,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    ClearAuthzCacheResponse (::std::ostream& os,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget& ft,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget& ft,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             ::xml_schema::error_handler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    void
    ClearAuthzCacheResponse (::xercesc::XMLFormatTarget& ft,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             ::xercesc::DOMErrorHandler& eh,
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             const ::std::wstring& e = L"UTF-8",
                             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ClearAuthzCacheResponse (::xercesc::DOMDocument& d,
                             const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x,
                             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ClearAuthzCacheResponse (const ::middleware::ESOEProtocolSchema::ClearAuthzCacheResponseType& x, 
                             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                             ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ClearAuthzCacheResponseType&);

    // Serialize to std::ostream.
    //

    void
    ValidateInitializationRequest (::std::ostream& os,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::wstring& e = L"UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ValidateInitializationRequest (::std::ostream& os,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::wstring& e = L"UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ValidateInitializationRequest (::std::ostream& os,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::wstring& e = L"UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget& ft,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::wstring& e = L"UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget& ft,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   ::xml_schema::error_handler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::wstring& e = L"UTF-8",
                                   ::xml_schema::flags f = 0);

    void
    ValidateInitializationRequest (::xercesc::XMLFormatTarget& ft,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   ::xercesc::DOMErrorHandler& eh,
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   const ::std::wstring& e = L"UTF-8",
                                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ValidateInitializationRequest (::xercesc::DOMDocument& d,
                                   const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x,
                                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ValidateInitializationRequest (const ::middleware::ESOEProtocolSchema::ValidateInitializationRequestType& x, 
                                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                   ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ValidateInitializationRequestType&);

    // Serialize to std::ostream.
    //

    void
    ValidateInitializationResponse (::std::ostream& os,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::wstring& e = L"UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ValidateInitializationResponse (::std::ostream& os,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::wstring& e = L"UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ValidateInitializationResponse (::std::ostream& os,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::wstring& e = L"UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget& ft,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::wstring& e = L"UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget& ft,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    ::xml_schema::error_handler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::wstring& e = L"UTF-8",
                                    ::xml_schema::flags f = 0);

    void
    ValidateInitializationResponse (::xercesc::XMLFormatTarget& ft,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    ::xercesc::DOMErrorHandler& eh,
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    const ::std::wstring& e = L"UTF-8",
                                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ValidateInitializationResponse (::xercesc::DOMDocument& d,
                                    const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x,
                                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ValidateInitializationResponse (const ::middleware::ESOEProtocolSchema::ValidateInitializationResponseType& x, 
                                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                    ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ValidateInitializationResponseType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_ESOE_SCHEMA_SAML_PROTOCOL_HXX
