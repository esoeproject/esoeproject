// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "saml2/bindings/sessiondata-schema.hxx"

namespace middleware
{
  namespace SessionDataSchema
  {
    // SessionDataType
    // 

    const SessionDataType::Identity_sequence& SessionDataType::
    Identity () const
    {
      return this->Identity_;
    }

    SessionDataType::Identity_sequence& SessionDataType::
    Identity ()
    {
      return this->Identity_;
    }

    void SessionDataType::
    Identity (const Identity_sequence& s)
    {
      this->Identity_ = s;
    }


    // IdentityType
    // 

    const IdentityType::Attribute_sequence& IdentityType::
    Attribute () const
    {
      return this->Attribute_;
    }

    IdentityType::Attribute_sequence& IdentityType::
    Attribute ()
    {
      return this->Attribute_;
    }

    void IdentityType::
    Attribute (const Attribute_sequence& s)
    {
      this->Attribute_ = s;
    }


    // AttributeType
    // 

    const AttributeType::Handler_sequence& AttributeType::
    Handler () const
    {
      return this->Handler_;
    }

    AttributeType::Handler_sequence& AttributeType::
    Handler ()
    {
      return this->Handler_;
    }

    void AttributeType::
    Handler (const Handler_sequence& s)
    {
      this->Handler_ = s;
    }

    const AttributeType::Identifier_type& AttributeType::
    Identifier () const
    {
      return this->Identifier_.get ();
    }

    AttributeType::Identifier_type& AttributeType::
    Identifier ()
    {
      return this->Identifier_.get ();
    }

    void AttributeType::
    Identifier (const Identifier_type& x)
    {
      this->Identifier_.set (x);
    }

    void AttributeType::
    Identifier (::std::auto_ptr< Identifier_type > x)
    {
      this->Identifier_.set (x);
    }

    const AttributeType::Type_type& AttributeType::
    Type () const
    {
      return this->Type_.get ();
    }

    AttributeType::Type_type& AttributeType::
    Type ()
    {
      return this->Type_.get ();
    }

    void AttributeType::
    Type (const Type_type& x)
    {
      this->Type_.set (x);
    }

    void AttributeType::
    Type (::std::auto_ptr< Type_type > x)
    {
      this->Type_.set (x);
    }

    const AttributeType::Singleton_type& AttributeType::
    Singleton () const
    {
      return this->Singleton_.get ();
    }

    AttributeType::Singleton_type& AttributeType::
    Singleton ()
    {
      return this->Singleton_.get ();
    }

    void AttributeType::
    Singleton (const Singleton_type& x)
    {
      this->Singleton_.set (x);
    }


    // DataType
    // 

    DataType::
    DataType ()
    : ::xml_schema::string ()
    {
    }

    DataType::
    DataType (value v)
    : ::xml_schema::string (_xsd_DataType_literals_[v])
    {
    }

    DataType::
    DataType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    DataType::
    DataType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    DataType::
    DataType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    DataType::
    DataType (const DataType& v,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    DataType& DataType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_DataType_literals_[v]);

      return *this;
    }


    // HandlerType
    // 

    const HandlerType::Name_type& HandlerType::
    Name () const
    {
      return this->Name_.get ();
    }

    HandlerType::Name_type& HandlerType::
    Name ()
    {
      return this->Name_.get ();
    }

    void HandlerType::
    Name (const Name_type& x)
    {
      this->Name_.set (x);
    }

    void HandlerType::
    Name (::std::auto_ptr< Name_type > x)
    {
      this->Name_.set (x);
    }

    const HandlerType::LocalIdentifier_type& HandlerType::
    LocalIdentifier () const
    {
      return this->LocalIdentifier_.get ();
    }

    HandlerType::LocalIdentifier_type& HandlerType::
    LocalIdentifier ()
    {
      return this->LocalIdentifier_.get ();
    }

    void HandlerType::
    LocalIdentifier (const LocalIdentifier_type& x)
    {
      this->LocalIdentifier_.set (x);
    }

    void HandlerType::
    LocalIdentifier (::std::auto_ptr< LocalIdentifier_type > x)
    {
      this->LocalIdentifier_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace SessionDataSchema
  {
    // SessionDataType
    //

    SessionDataType::
    SessionDataType ()
    : ::xml_schema::type (),
      Identity_ (::xml_schema::flags (), this)
    {
    }

    SessionDataType::
    SessionDataType (const SessionDataType& x,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Identity_ (x.Identity_, f, this)
    {
    }

    SessionDataType::
    SessionDataType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f,
                     ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Identity_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SessionDataType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Identity
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Identity",
              L"http://www.qut.com/middleware/SessionDataSchema",
              &::xsd::cxx::tree::factory_impl< Identity_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Identity_type > r (
              dynamic_cast< Identity_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Identity_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    SessionDataType* SessionDataType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SessionDataType (*this, f, c);
    }

    SessionDataType::
    ~SessionDataType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SessionDataType >
    _xsd_SessionDataType_type_factory_init (
      L"SessionDataType",
      L"http://www.qut.com/middleware/SessionDataSchema");

    // IdentityType
    //

    IdentityType::
    IdentityType ()
    : ::xml_schema::type (),
      Attribute_ (::xml_schema::flags (), this)
    {
    }

    IdentityType::
    IdentityType (const IdentityType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attribute_ (x.Attribute_, f, this)
    {
    }

    IdentityType::
    IdentityType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attribute_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void IdentityType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Attribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Attribute",
              L"http://www.qut.com/middleware/SessionDataSchema",
              &::xsd::cxx::tree::factory_impl< Attribute_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Attribute_type > r (
              dynamic_cast< Attribute_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Attribute_.push_back (r);
            continue;
          }
        }

        break;
      }
    }

    IdentityType* IdentityType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class IdentityType (*this, f, c);
    }

    IdentityType::
    ~IdentityType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, IdentityType >
    _xsd_IdentityType_type_factory_init (
      L"IdentityType",
      L"http://www.qut.com/middleware/SessionDataSchema");

    // AttributeType
    //

    AttributeType::
    AttributeType ()
    : ::xml_schema::type (),
      Handler_ (::xml_schema::flags (), this),
      Identifier_ (::xml_schema::flags (), this),
      Type_ (::xml_schema::flags (), this),
      Singleton_ (::xml_schema::flags (), this)
    {
    }

    AttributeType::
    AttributeType (const Identifier_type& Identifier,
                   const Type_type& Type,
                   const Singleton_type& Singleton)
    : ::xml_schema::type (),
      Handler_ (::xml_schema::flags (), this),
      Identifier_ (Identifier, ::xml_schema::flags (), this),
      Type_ (Type, ::xml_schema::flags (), this),
      Singleton_ (Singleton, ::xml_schema::flags (), this)
    {
    }

    AttributeType::
    AttributeType (const AttributeType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Handler_ (x.Handler_, f, this),
      Identifier_ (x.Identifier_, f, this),
      Type_ (x.Type_, f, this),
      Singleton_ (x.Singleton_, f, this)
    {
    }

    AttributeType::
    AttributeType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Handler_ (f, this),
      Identifier_ (f, this),
      Type_ (f, this),
      Singleton_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AttributeType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Handler
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Handler",
              L"http://www.qut.com/middleware/SessionDataSchema",
              &::xsd::cxx::tree::factory_impl< Handler_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Handler_type > r (
              dynamic_cast< Handler_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Handler_.push_back (r);
            continue;
          }
        }

        break;
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Identifier" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Identifier_type > r (
            Identifier_traits::create (i, f, this));

          this->Identifier_.set (r);
          continue;
        }

        if (n.name () == L"Type" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Type_type > r (
            Type_traits::create (i, f, this));

          this->Type_.set (r);
          continue;
        }

        if (n.name () == L"Singleton" && n.namespace_ ().empty ())
        {
          this->Singleton_.set (Singleton_traits::create (i, f, this));
          continue;
        }
      }

      if (!Identifier_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Identifier",
          L"");
      }

      if (!Type_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Type",
          L"");
      }

      if (!Singleton_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Singleton",
          L"");
      }
    }

    AttributeType* AttributeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AttributeType (*this, f, c);
    }

    AttributeType::
    ~AttributeType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeType >
    _xsd_AttributeType_type_factory_init (
      L"AttributeType",
      L"http://www.qut.com/middleware/SessionDataSchema");

    // DataType
    //

    DataType::
    DataType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_DataType_convert ();
    }

    DataType::
    DataType (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_DataType_convert ();
    }

    DataType::
    DataType (const ::std::wstring& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_DataType_convert ();
    }

    DataType* DataType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DataType (*this, f, c);
    }

    DataType::value DataType::
    _xsd_DataType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_DataType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_DataType_indexes_,
                        _xsd_DataType_indexes_ + 6,
                        *this,
                        c));

      if (i == _xsd_DataType_indexes_ + 6 || _xsd_DataType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const DataType::
    _xsd_DataType_literals_[6] =
    {
      L"String",
      L"Integer",
      L"Float",
      L"Date",
      L"Boolean",
      L"Other"
    };

    const DataType::value DataType::
    _xsd_DataType_indexes_[6] =
    {
      ::middleware::SessionDataSchema::DataType::Boolean,
      ::middleware::SessionDataSchema::DataType::Date,
      ::middleware::SessionDataSchema::DataType::Float,
      ::middleware::SessionDataSchema::DataType::Integer,
      ::middleware::SessionDataSchema::DataType::Other,
      ::middleware::SessionDataSchema::DataType::String
    };

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DataType >
    _xsd_DataType_type_factory_init (
      L"DataType",
      L"http://www.qut.com/middleware/SessionDataSchema");

    // HandlerType
    //

    HandlerType::
    HandlerType ()
    : ::xml_schema::type (),
      Name_ (::xml_schema::flags (), this),
      LocalIdentifier_ (::xml_schema::flags (), this)
    {
    }

    HandlerType::
    HandlerType (const Name_type& Name,
                 const LocalIdentifier_type& LocalIdentifier)
    : ::xml_schema::type (),
      Name_ (Name, ::xml_schema::flags (), this),
      LocalIdentifier_ (LocalIdentifier, ::xml_schema::flags (), this)
    {
    }

    HandlerType::
    HandlerType (const HandlerType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Name_ (x.Name_, f, this),
      LocalIdentifier_ (x.LocalIdentifier_, f, this)
    {
    }

    HandlerType::
    HandlerType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Name_ (f, this),
      LocalIdentifier_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, false, true);
        this->parse (p, f);
      }
    }

    void HandlerType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Name" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Name_type > r (
            Name_traits::create (i, f, this));

          this->Name_.set (r);
          continue;
        }

        if (n.name () == L"LocalIdentifier" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< LocalIdentifier_type > r (
            LocalIdentifier_traits::create (i, f, this));

          this->LocalIdentifier_.set (r);
          continue;
        }
      }

      if (!Name_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Name",
          L"");
      }

      if (!LocalIdentifier_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"LocalIdentifier",
          L"");
      }
    }

    HandlerType* HandlerType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class HandlerType (*this, f, c);
    }

    HandlerType::
    ~HandlerType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, HandlerType >
    _xsd_HandlerType_type_factory_init (
      L"HandlerType",
      L"http://www.qut.com/middleware/SessionDataSchema");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace SessionDataSchema
  {
    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::std::wstring& u,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType > r (
        ::middleware::SessionDataSchema::SessionData (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::std::wstring& u,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType > r (
        ::middleware::SessionDataSchema::SessionData (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::std::wstring& u,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType > r (
        ::middleware::SessionDataSchema::SessionData (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::SessionDataSchema::SessionData (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::SessionDataSchema::SessionData (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::SessionDataSchema::SessionData (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::SessionDataSchema::SessionData (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::SessionDataSchema::SessionData (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 const ::std::wstring& sid,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::SessionDataSchema::SessionData (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::xercesc::InputSource& i,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType > r (
        ::middleware::SessionDataSchema::SessionData (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::xercesc::InputSource& i,
                 ::xml_schema::error_handler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType > r (
        ::middleware::SessionDataSchema::SessionData (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::xercesc::InputSource& i,
                 ::xercesc::DOMErrorHandler& h,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType > r (
        ::middleware::SessionDataSchema::SessionData (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType > r (
          ::middleware::SessionDataSchema::SessionData (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"SessionData",
          L"http://www.qut.com/middleware/SessionDataSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::SessionDataSchema::SessionDataType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType > r (
          dynamic_cast< ::middleware::SessionDataSchema::SessionDataType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SessionData",
        L"http://www.qut.com/middleware/SessionDataSchema");
    }

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f,
                 const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"SessionData",
          L"http://www.qut.com/middleware/SessionDataSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::SessionDataSchema::SessionDataType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType > r (
          dynamic_cast< ::middleware::SessionDataSchema::SessionDataType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"SessionData",
        L"http://www.qut.com/middleware/SessionDataSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace SessionDataSchema
  {
    void
    SessionData (::std::ostream& o,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::SessionDataSchema::SessionData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SessionData (::std::ostream& o,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::SessionDataSchema::SessionData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SessionData (::std::ostream& o,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::SessionDataSchema::SessionData (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SessionData (::xercesc::XMLFormatTarget& t,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::SessionDataSchema::SessionData (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    SessionData (::xercesc::XMLFormatTarget& t,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 ::xml_schema::error_handler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::SessionDataSchema::SessionData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SessionData (::xercesc::XMLFormatTarget& t,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 ::xercesc::DOMErrorHandler& h,
                 const ::xml_schema::namespace_infomap& m,
                 const ::std::wstring& e,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::SessionDataSchema::SessionData (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    SessionData (::xercesc::DOMDocument& d,
                 const ::middleware::SessionDataSchema::SessionDataType& s,
                 ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::SessionDataSchema::SessionDataType) == typeid (s))
      {
        if (n.name () == L"SessionData" &&
            n.namespace_ () == L"http://www.qut.com/middleware/SessionDataSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"SessionData",
            L"http://www.qut.com/middleware/SessionDataSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"SessionData",
          L"http://www.qut.com/middleware/SessionDataSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SessionData (const ::middleware::SessionDataSchema::SessionDataType& s,
                 const ::xml_schema::namespace_infomap& m,
                 ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::SessionDataSchema::SessionDataType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"SessionData",
            L"http://www.qut.com/middleware/SessionDataSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"SessionData",
            L"http://www.qut.com/middleware/SessionDataSchema",
            m, s, f));
        d = r;
      }

      ::middleware::SessionDataSchema::SessionData (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const SessionDataType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Identity
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (SessionDataType::Identity_const_iterator
             b (i.Identity ().begin ()), n (i.Identity ().end ());
             b != n; ++b)
        {
          if (typeid (SessionDataType::Identity_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Identity",
                L"http://www.qut.com/middleware/SessionDataSchema",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Identity",
              L"http://www.qut.com/middleware/SessionDataSchema",
              false, true, e, *b);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SessionDataType >
    _xsd_SessionDataType_type_serializer_init (
      L"SessionDataType",
      L"http://www.qut.com/middleware/SessionDataSchema");


    void
    operator<< (::xercesc::DOMElement& e, const IdentityType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attribute
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (IdentityType::Attribute_const_iterator
             b (i.Attribute ().begin ()), n (i.Attribute ().end ());
             b != n; ++b)
        {
          if (typeid (IdentityType::Attribute_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Attribute",
                L"http://www.qut.com/middleware/SessionDataSchema",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Attribute",
              L"http://www.qut.com/middleware/SessionDataSchema",
              false, true, e, *b);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, IdentityType >
    _xsd_IdentityType_type_serializer_init (
      L"IdentityType",
      L"http://www.qut.com/middleware/SessionDataSchema");


    void
    operator<< (::xercesc::DOMElement& e, const AttributeType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Handler
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (AttributeType::Handler_const_iterator
             b (i.Handler ().begin ()), n (i.Handler ().end ());
             b != n; ++b)
        {
          if (typeid (AttributeType::Handler_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Handler",
                L"http://www.qut.com/middleware/SessionDataSchema",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Handler",
              L"http://www.qut.com/middleware/SessionDataSchema",
              false, true, e, *b);
        }
      }

      // Identifier
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Identifier",
            e));

        a << i.Identifier ();
      }

      // Type
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Type",
            e));

        a << i.Type ();
      }

      // Singleton
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Singleton",
            e));

        a << i.Singleton ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeType >
    _xsd_AttributeType_type_serializer_init (
      L"AttributeType",
      L"http://www.qut.com/middleware/SessionDataSchema");


    void
    operator<< (::xercesc::DOMElement& e, const DataType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const DataType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const DataType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DataType >
    _xsd_DataType_type_serializer_init (
      L"DataType",
      L"http://www.qut.com/middleware/SessionDataSchema");


    void
    operator<< (::xercesc::DOMElement& e, const HandlerType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Name
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Name",
            e));

        a << i.Name ();
      }

      // LocalIdentifier
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"LocalIdentifier",
            e));

        a << i.LocalIdentifier ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, HandlerType >
    _xsd_HandlerType_type_serializer_init (
      L"HandlerType",
      L"http://www.qut.com/middleware/SessionDataSchema");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

