// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SAML_SCHEMA_PROTOCOL_2_0_HXX
#define CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SAML_SCHEMA_PROTOCOL_2_0_HXX

// Begin prologue.
//
#include "saml2/SAML2Defs.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "saml2/xsd/xml-schema.hxx"

// Forward declarations.
//
namespace saml2
{
  namespace protocol
  {
    class RequestAbstractType;
    class ExtensionsType;
    class StatusResponseType;
    class StatusType;
    class StatusCodeType;
    class StatusDetailType;
    class AssertionIDRequestType;
    class SubjectQueryAbstractType;
    class AuthnQueryType;
    class RequestedAuthnContextType;
    class AuthnContextComparisonType;
    class AttributeQueryType;
    class AuthzDecisionQueryType;
    class AuthnRequestType;
    class NameIDPolicyType;
    class ScopingType;
    class IDPListType;
    class IDPEntryType;
    class ResponseType;
    class ArtifactResolveType;
    class ArtifactResponseType;
    class ManageNameIDRequestType;
    class TerminateType;
    class LogoutRequestType;
    class NameIDMappingRequestType;
    class NameIDMappingResponseType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "saml-schema-assertion-2.0.hxx"

#include "xmldsig-core-schema.hxx"

namespace saml2
{
  namespace protocol
  {
    class RequestAbstractType: public ::xml_schema::type
    {
      public:
      // Issuer
      // 
      typedef ::saml2::assertion::NameIDType Issuer_type;
      typedef ::xsd::cxx::tree::optional< Issuer_type > Issuer_optional;
      typedef ::xsd::cxx::tree::traits< Issuer_type, wchar_t > Issuer_traits;

      const Issuer_optional&
      Issuer () const;

      Issuer_optional&
      Issuer ();

      void
      Issuer (const Issuer_type& x);

      void
      Issuer (const Issuer_optional& x);

      void
      Issuer (::std::auto_ptr< Issuer_type > p);

      // Signature
      // 
      typedef ::w3::xmldsig::SignatureType Signature_type;
      typedef ::xsd::cxx::tree::optional< Signature_type > Signature_optional;
      typedef ::xsd::cxx::tree::traits< Signature_type, wchar_t > Signature_traits;

      const Signature_optional&
      Signature () const;

      Signature_optional&
      Signature ();

      void
      Signature (const Signature_type& x);

      void
      Signature (const Signature_optional& x);

      void
      Signature (::std::auto_ptr< Signature_type > p);

      // Extensions
      // 
      typedef ::saml2::protocol::ExtensionsType Extensions_type;
      typedef ::xsd::cxx::tree::optional< Extensions_type > Extensions_optional;
      typedef ::xsd::cxx::tree::traits< Extensions_type, wchar_t > Extensions_traits;

      const Extensions_optional&
      Extensions () const;

      Extensions_optional&
      Extensions ();

      void
      Extensions (const Extensions_type& x);

      void
      Extensions (const Extensions_optional& x);

      void
      Extensions (::std::auto_ptr< Extensions_type > p);

      // ID
      // 
      typedef ::xml_schema::id ID_type;
      typedef ::xsd::cxx::tree::traits< ID_type, wchar_t > ID_traits;

      const ID_type&
      ID () const;

      ID_type&
      ID ();

      void
      ID (const ID_type& x);

      void
      ID (::std::auto_ptr< ID_type > p);

      // Version
      // 
      typedef ::xml_schema::string Version_type;
      typedef ::xsd::cxx::tree::traits< Version_type, wchar_t > Version_traits;

      const Version_type&
      Version () const;

      Version_type&
      Version ();

      void
      Version (const Version_type& x);

      void
      Version (::std::auto_ptr< Version_type > p);

      // IssueInstant
      // 
      typedef ::xml_schema::date_time IssueInstant_type;
      typedef ::xsd::cxx::tree::traits< IssueInstant_type, wchar_t > IssueInstant_traits;

      const IssueInstant_type&
      IssueInstant () const;

      IssueInstant_type&
      IssueInstant ();

      void
      IssueInstant (const IssueInstant_type& x);

      void
      IssueInstant (::std::auto_ptr< IssueInstant_type > p);

      // Destination
      // 
      typedef ::xml_schema::uri Destination_type;
      typedef ::xsd::cxx::tree::optional< Destination_type > Destination_optional;
      typedef ::xsd::cxx::tree::traits< Destination_type, wchar_t > Destination_traits;

      const Destination_optional&
      Destination () const;

      Destination_optional&
      Destination ();

      void
      Destination (const Destination_type& x);

      void
      Destination (const Destination_optional& x);

      void
      Destination (::std::auto_ptr< Destination_type > p);

      // Consent
      // 
      typedef ::xml_schema::uri Consent_type;
      typedef ::xsd::cxx::tree::optional< Consent_type > Consent_optional;
      typedef ::xsd::cxx::tree::traits< Consent_type, wchar_t > Consent_traits;

      const Consent_optional&
      Consent () const;

      Consent_optional&
      Consent ();

      void
      Consent (const Consent_type& x);

      void
      Consent (const Consent_optional& x);

      void
      Consent (::std::auto_ptr< Consent_type > p);

      // Constructors.
      //
      RequestAbstractType ();

      RequestAbstractType (const ID_type&,
                           const Version_type&,
                           const IssueInstant_type&);

      RequestAbstractType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      RequestAbstractType (const RequestAbstractType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual RequestAbstractType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RequestAbstractType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Issuer_optional Issuer_;
      Signature_optional Signature_;
      Extensions_optional Extensions_;
      ::xsd::cxx::tree::one< ID_type > ID_;
      ::xsd::cxx::tree::one< Version_type > Version_;
      ::xsd::cxx::tree::one< IssueInstant_type > IssueInstant_;
      Destination_optional Destination_;
      Consent_optional Consent_;
    };

    class ExtensionsType: public ::xml_schema::type
    {
      public:
      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      ExtensionsType ();

      ExtensionsType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ExtensionsType (const ExtensionsType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ExtensionsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ExtensionsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
    };

    class StatusResponseType: public ::xml_schema::type
    {
      public:
      // Issuer
      // 
      typedef ::saml2::assertion::NameIDType Issuer_type;
      typedef ::xsd::cxx::tree::optional< Issuer_type > Issuer_optional;
      typedef ::xsd::cxx::tree::traits< Issuer_type, wchar_t > Issuer_traits;

      const Issuer_optional&
      Issuer () const;

      Issuer_optional&
      Issuer ();

      void
      Issuer (const Issuer_type& x);

      void
      Issuer (const Issuer_optional& x);

      void
      Issuer (::std::auto_ptr< Issuer_type > p);

      // Signature
      // 
      typedef ::w3::xmldsig::SignatureType Signature_type;
      typedef ::xsd::cxx::tree::optional< Signature_type > Signature_optional;
      typedef ::xsd::cxx::tree::traits< Signature_type, wchar_t > Signature_traits;

      const Signature_optional&
      Signature () const;

      Signature_optional&
      Signature ();

      void
      Signature (const Signature_type& x);

      void
      Signature (const Signature_optional& x);

      void
      Signature (::std::auto_ptr< Signature_type > p);

      // Extensions
      // 
      typedef ::saml2::protocol::ExtensionsType Extensions_type;
      typedef ::xsd::cxx::tree::optional< Extensions_type > Extensions_optional;
      typedef ::xsd::cxx::tree::traits< Extensions_type, wchar_t > Extensions_traits;

      const Extensions_optional&
      Extensions () const;

      Extensions_optional&
      Extensions ();

      void
      Extensions (const Extensions_type& x);

      void
      Extensions (const Extensions_optional& x);

      void
      Extensions (::std::auto_ptr< Extensions_type > p);

      // Status
      // 
      typedef ::saml2::protocol::StatusType Status_type;
      typedef ::xsd::cxx::tree::traits< Status_type, wchar_t > Status_traits;

      const Status_type&
      Status () const;

      Status_type&
      Status ();

      void
      Status (const Status_type& x);

      void
      Status (::std::auto_ptr< Status_type > p);

      // ID
      // 
      typedef ::xml_schema::id ID_type;
      typedef ::xsd::cxx::tree::traits< ID_type, wchar_t > ID_traits;

      const ID_type&
      ID () const;

      ID_type&
      ID ();

      void
      ID (const ID_type& x);

      void
      ID (::std::auto_ptr< ID_type > p);

      // InResponseTo
      // 
      typedef ::xml_schema::ncname InResponseTo_type;
      typedef ::xsd::cxx::tree::optional< InResponseTo_type > InResponseTo_optional;
      typedef ::xsd::cxx::tree::traits< InResponseTo_type, wchar_t > InResponseTo_traits;

      const InResponseTo_optional&
      InResponseTo () const;

      InResponseTo_optional&
      InResponseTo ();

      void
      InResponseTo (const InResponseTo_type& x);

      void
      InResponseTo (const InResponseTo_optional& x);

      void
      InResponseTo (::std::auto_ptr< InResponseTo_type > p);

      // Version
      // 
      typedef ::xml_schema::string Version_type;
      typedef ::xsd::cxx::tree::traits< Version_type, wchar_t > Version_traits;

      const Version_type&
      Version () const;

      Version_type&
      Version ();

      void
      Version (const Version_type& x);

      void
      Version (::std::auto_ptr< Version_type > p);

      // IssueInstant
      // 
      typedef ::xml_schema::date_time IssueInstant_type;
      typedef ::xsd::cxx::tree::traits< IssueInstant_type, wchar_t > IssueInstant_traits;

      const IssueInstant_type&
      IssueInstant () const;

      IssueInstant_type&
      IssueInstant ();

      void
      IssueInstant (const IssueInstant_type& x);

      void
      IssueInstant (::std::auto_ptr< IssueInstant_type > p);

      // Destination
      // 
      typedef ::xml_schema::uri Destination_type;
      typedef ::xsd::cxx::tree::optional< Destination_type > Destination_optional;
      typedef ::xsd::cxx::tree::traits< Destination_type, wchar_t > Destination_traits;

      const Destination_optional&
      Destination () const;

      Destination_optional&
      Destination ();

      void
      Destination (const Destination_type& x);

      void
      Destination (const Destination_optional& x);

      void
      Destination (::std::auto_ptr< Destination_type > p);

      // Consent
      // 
      typedef ::xml_schema::uri Consent_type;
      typedef ::xsd::cxx::tree::optional< Consent_type > Consent_optional;
      typedef ::xsd::cxx::tree::traits< Consent_type, wchar_t > Consent_traits;

      const Consent_optional&
      Consent () const;

      Consent_optional&
      Consent ();

      void
      Consent (const Consent_type& x);

      void
      Consent (const Consent_optional& x);

      void
      Consent (::std::auto_ptr< Consent_type > p);

      // Constructors.
      //
      StatusResponseType ();

      StatusResponseType (const Status_type&,
                          const ID_type&,
                          const Version_type&,
                          const IssueInstant_type&);

      StatusResponseType (::std::auto_ptr< Status_type >&,
                          const ID_type&,
                          const Version_type&,
                          const IssueInstant_type&);

      StatusResponseType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      StatusResponseType (const StatusResponseType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual StatusResponseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~StatusResponseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Issuer_optional Issuer_;
      Signature_optional Signature_;
      Extensions_optional Extensions_;
      ::xsd::cxx::tree::one< Status_type > Status_;
      ::xsd::cxx::tree::one< ID_type > ID_;
      InResponseTo_optional InResponseTo_;
      ::xsd::cxx::tree::one< Version_type > Version_;
      ::xsd::cxx::tree::one< IssueInstant_type > IssueInstant_;
      Destination_optional Destination_;
      Consent_optional Consent_;
    };

    class StatusType: public ::xml_schema::type
    {
      public:
      // StatusCode
      // 
      typedef ::saml2::protocol::StatusCodeType StatusCode_type;
      typedef ::xsd::cxx::tree::traits< StatusCode_type, wchar_t > StatusCode_traits;

      const StatusCode_type&
      StatusCode () const;

      StatusCode_type&
      StatusCode ();

      void
      StatusCode (const StatusCode_type& x);

      void
      StatusCode (::std::auto_ptr< StatusCode_type > p);

      // StatusMessage
      // 
      typedef ::xml_schema::string StatusMessage_type;
      typedef ::xsd::cxx::tree::optional< StatusMessage_type > StatusMessage_optional;
      typedef ::xsd::cxx::tree::traits< StatusMessage_type, wchar_t > StatusMessage_traits;

      const StatusMessage_optional&
      StatusMessage () const;

      StatusMessage_optional&
      StatusMessage ();

      void
      StatusMessage (const StatusMessage_type& x);

      void
      StatusMessage (const StatusMessage_optional& x);

      void
      StatusMessage (::std::auto_ptr< StatusMessage_type > p);

      // StatusDetail
      // 
      typedef ::saml2::protocol::StatusDetailType StatusDetail_type;
      typedef ::xsd::cxx::tree::optional< StatusDetail_type > StatusDetail_optional;
      typedef ::xsd::cxx::tree::traits< StatusDetail_type, wchar_t > StatusDetail_traits;

      const StatusDetail_optional&
      StatusDetail () const;

      StatusDetail_optional&
      StatusDetail ();

      void
      StatusDetail (const StatusDetail_type& x);

      void
      StatusDetail (const StatusDetail_optional& x);

      void
      StatusDetail (::std::auto_ptr< StatusDetail_type > p);

      // Constructors.
      //
      StatusType ();

      StatusType (const StatusCode_type&);

      StatusType (::std::auto_ptr< StatusCode_type >&);

      StatusType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      StatusType (const StatusType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual StatusType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~StatusType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< StatusCode_type > StatusCode_;
      StatusMessage_optional StatusMessage_;
      StatusDetail_optional StatusDetail_;
    };

    class StatusCodeType: public ::xml_schema::type
    {
      public:
      // StatusCode
      // 
      typedef ::saml2::protocol::StatusCodeType StatusCode_type;
      typedef ::xsd::cxx::tree::optional< StatusCode_type > StatusCode_optional;
      typedef ::xsd::cxx::tree::traits< StatusCode_type, wchar_t > StatusCode_traits;

      const StatusCode_optional&
      StatusCode () const;

      StatusCode_optional&
      StatusCode ();

      void
      StatusCode (const StatusCode_type& x);

      void
      StatusCode (const StatusCode_optional& x);

      void
      StatusCode (::std::auto_ptr< StatusCode_type > p);

      // Value
      // 
      typedef ::xml_schema::uri Value_type;
      typedef ::xsd::cxx::tree::traits< Value_type, wchar_t > Value_traits;

      const Value_type&
      Value () const;

      Value_type&
      Value ();

      void
      Value (const Value_type& x);

      void
      Value (::std::auto_ptr< Value_type > p);

      // Constructors.
      //
      StatusCodeType ();

      StatusCodeType (const Value_type&);

      StatusCodeType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      StatusCodeType (const StatusCodeType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual StatusCodeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~StatusCodeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      StatusCode_optional StatusCode_;
      ::xsd::cxx::tree::one< Value_type > Value_;
    };

    class StatusDetailType: public ::xml_schema::type
    {
      public:
      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      StatusDetailType ();

      StatusDetailType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      StatusDetailType (const StatusDetailType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual StatusDetailType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~StatusDetailType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
    };

    class AssertionIDRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:
      // AssertionIDRef
      // 
      typedef ::xml_schema::ncname AssertionIDRef_type;
      typedef ::xsd::cxx::tree::sequence< AssertionIDRef_type > AssertionIDRef_sequence;
      typedef AssertionIDRef_sequence::iterator AssertionIDRef_iterator;
      typedef AssertionIDRef_sequence::const_iterator AssertionIDRef_const_iterator;
      typedef ::xsd::cxx::tree::traits< AssertionIDRef_type, wchar_t > AssertionIDRef_traits;

      const AssertionIDRef_sequence&
      AssertionIDRef () const;

      AssertionIDRef_sequence&
      AssertionIDRef ();

      void
      AssertionIDRef (const AssertionIDRef_sequence& s);

      // Constructors.
      //
      AssertionIDRequestType ();

      AssertionIDRequestType (const ID_type&,
                              const Version_type&,
                              const IssueInstant_type&);

      AssertionIDRequestType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      AssertionIDRequestType (const AssertionIDRequestType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual AssertionIDRequestType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AssertionIDRequestType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      AssertionIDRef_sequence AssertionIDRef_;
    };

    class SubjectQueryAbstractType: public ::saml2::protocol::RequestAbstractType
    {
      public:
      // Subject
      // 
      typedef ::saml2::assertion::SubjectType Subject_type;
      typedef ::xsd::cxx::tree::traits< Subject_type, wchar_t > Subject_traits;

      const Subject_type&
      Subject () const;

      Subject_type&
      Subject ();

      void
      Subject (const Subject_type& x);

      void
      Subject (::std::auto_ptr< Subject_type > p);

      // Constructors.
      //
      SubjectQueryAbstractType ();

      SubjectQueryAbstractType (const ID_type&,
                                const Version_type&,
                                const IssueInstant_type&,
                                const Subject_type&);

      SubjectQueryAbstractType (const ID_type&,
                                const Version_type&,
                                const IssueInstant_type&,
                                ::std::auto_ptr< Subject_type >&);

      SubjectQueryAbstractType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      SubjectQueryAbstractType (const SubjectQueryAbstractType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual SubjectQueryAbstractType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SubjectQueryAbstractType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Subject_type > Subject_;
    };

    class AuthnQueryType: public ::saml2::protocol::SubjectQueryAbstractType
    {
      public:
      // RequestedAuthnContext
      // 
      typedef ::saml2::protocol::RequestedAuthnContextType RequestedAuthnContext_type;
      typedef ::xsd::cxx::tree::optional< RequestedAuthnContext_type > RequestedAuthnContext_optional;
      typedef ::xsd::cxx::tree::traits< RequestedAuthnContext_type, wchar_t > RequestedAuthnContext_traits;

      const RequestedAuthnContext_optional&
      RequestedAuthnContext () const;

      RequestedAuthnContext_optional&
      RequestedAuthnContext ();

      void
      RequestedAuthnContext (const RequestedAuthnContext_type& x);

      void
      RequestedAuthnContext (const RequestedAuthnContext_optional& x);

      void
      RequestedAuthnContext (::std::auto_ptr< RequestedAuthnContext_type > p);

      // SessionIndex
      // 
      typedef ::xml_schema::string SessionIndex_type;
      typedef ::xsd::cxx::tree::optional< SessionIndex_type > SessionIndex_optional;
      typedef ::xsd::cxx::tree::traits< SessionIndex_type, wchar_t > SessionIndex_traits;

      const SessionIndex_optional&
      SessionIndex () const;

      SessionIndex_optional&
      SessionIndex ();

      void
      SessionIndex (const SessionIndex_type& x);

      void
      SessionIndex (const SessionIndex_optional& x);

      void
      SessionIndex (::std::auto_ptr< SessionIndex_type > p);

      // Constructors.
      //
      AuthnQueryType ();

      AuthnQueryType (const ID_type&,
                      const Version_type&,
                      const IssueInstant_type&,
                      const Subject_type&);

      AuthnQueryType (const ID_type&,
                      const Version_type&,
                      const IssueInstant_type&,
                      ::std::auto_ptr< Subject_type >&);

      AuthnQueryType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      AuthnQueryType (const AuthnQueryType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual AuthnQueryType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AuthnQueryType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      RequestedAuthnContext_optional RequestedAuthnContext_;
      SessionIndex_optional SessionIndex_;
    };

    class RequestedAuthnContextType: public ::xml_schema::type
    {
      public:
      // AuthnContextClassRef
      // 
      typedef ::xml_schema::uri AuthnContextClassRef_type;
      typedef ::xsd::cxx::tree::sequence< AuthnContextClassRef_type > AuthnContextClassRef_sequence;
      typedef AuthnContextClassRef_sequence::iterator AuthnContextClassRef_iterator;
      typedef AuthnContextClassRef_sequence::const_iterator AuthnContextClassRef_const_iterator;
      typedef ::xsd::cxx::tree::traits< AuthnContextClassRef_type, wchar_t > AuthnContextClassRef_traits;

      const AuthnContextClassRef_sequence&
      AuthnContextClassRef () const;

      AuthnContextClassRef_sequence&
      AuthnContextClassRef ();

      void
      AuthnContextClassRef (const AuthnContextClassRef_sequence& s);

      // AuthnContextDeclRef
      // 
      typedef ::xml_schema::uri AuthnContextDeclRef_type;
      typedef ::xsd::cxx::tree::sequence< AuthnContextDeclRef_type > AuthnContextDeclRef_sequence;
      typedef AuthnContextDeclRef_sequence::iterator AuthnContextDeclRef_iterator;
      typedef AuthnContextDeclRef_sequence::const_iterator AuthnContextDeclRef_const_iterator;
      typedef ::xsd::cxx::tree::traits< AuthnContextDeclRef_type, wchar_t > AuthnContextDeclRef_traits;

      const AuthnContextDeclRef_sequence&
      AuthnContextDeclRef () const;

      AuthnContextDeclRef_sequence&
      AuthnContextDeclRef ();

      void
      AuthnContextDeclRef (const AuthnContextDeclRef_sequence& s);

      // Comparison
      // 
      typedef ::saml2::protocol::AuthnContextComparisonType Comparison_type;
      typedef ::xsd::cxx::tree::optional< Comparison_type > Comparison_optional;
      typedef ::xsd::cxx::tree::traits< Comparison_type, wchar_t > Comparison_traits;

      const Comparison_optional&
      Comparison () const;

      Comparison_optional&
      Comparison ();

      void
      Comparison (const Comparison_type& x);

      void
      Comparison (const Comparison_optional& x);

      void
      Comparison (::std::auto_ptr< Comparison_type > p);

      // Constructors.
      //
      RequestedAuthnContextType ();

      RequestedAuthnContextType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      RequestedAuthnContextType (const RequestedAuthnContextType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual RequestedAuthnContextType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RequestedAuthnContextType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      AuthnContextClassRef_sequence AuthnContextClassRef_;
      AuthnContextDeclRef_sequence AuthnContextDeclRef_;
      Comparison_optional Comparison_;
    };

    class AuthnContextComparisonType: public ::xml_schema::string
    {
      public:
      enum value
      {
        exact,
        minimum,
        maximum,
        better
      };

      AuthnContextComparisonType ();

      AuthnContextComparisonType (value v);

      AuthnContextComparisonType (const wchar_t* v);

      AuthnContextComparisonType (const ::std::wstring& v);

      AuthnContextComparisonType (const ::xml_schema::string& v);

      AuthnContextComparisonType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      AuthnContextComparisonType (const ::xercesc::DOMAttr& a,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      AuthnContextComparisonType (const ::std::wstring& s,
                                  const ::xercesc::DOMElement* e,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      AuthnContextComparisonType (const AuthnContextComparisonType& x,
                                  ::xml_schema::flags f = 0,
                                  ::xml_schema::container* c = 0);

      virtual AuthnContextComparisonType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      AuthnContextComparisonType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_AuthnContextComparisonType_convert ();
      }

      protected:
      value
      _xsd_AuthnContextComparisonType_convert () const;

      public:
      static const wchar_t* const _xsd_AuthnContextComparisonType_literals_[4];
      static const value _xsd_AuthnContextComparisonType_indexes_[4];
    };

    class AttributeQueryType: public ::saml2::protocol::SubjectQueryAbstractType
    {
      public:
      // Attribute
      // 
      typedef ::saml2::assertion::AttributeType Attribute_type;
      typedef ::xsd::cxx::tree::sequence< Attribute_type > Attribute_sequence;
      typedef Attribute_sequence::iterator Attribute_iterator;
      typedef Attribute_sequence::const_iterator Attribute_const_iterator;
      typedef ::xsd::cxx::tree::traits< Attribute_type, wchar_t > Attribute_traits;

      const Attribute_sequence&
      Attribute () const;

      Attribute_sequence&
      Attribute ();

      void
      Attribute (const Attribute_sequence& s);

      // Constructors.
      //
      AttributeQueryType ();

      AttributeQueryType (const ID_type&,
                          const Version_type&,
                          const IssueInstant_type&,
                          const Subject_type&);

      AttributeQueryType (const ID_type&,
                          const Version_type&,
                          const IssueInstant_type&,
                          ::std::auto_ptr< Subject_type >&);

      AttributeQueryType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      AttributeQueryType (const AttributeQueryType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual AttributeQueryType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AttributeQueryType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Attribute_sequence Attribute_;
    };

    class AuthzDecisionQueryType: public ::saml2::protocol::SubjectQueryAbstractType
    {
      public:
      // Action
      // 
      typedef ::saml2::assertion::ActionType Action_type;
      typedef ::xsd::cxx::tree::sequence< Action_type > Action_sequence;
      typedef Action_sequence::iterator Action_iterator;
      typedef Action_sequence::const_iterator Action_const_iterator;
      typedef ::xsd::cxx::tree::traits< Action_type, wchar_t > Action_traits;

      const Action_sequence&
      Action () const;

      Action_sequence&
      Action ();

      void
      Action (const Action_sequence& s);

      // Evidence
      // 
      typedef ::saml2::assertion::EvidenceType Evidence_type;
      typedef ::xsd::cxx::tree::optional< Evidence_type > Evidence_optional;
      typedef ::xsd::cxx::tree::traits< Evidence_type, wchar_t > Evidence_traits;

      const Evidence_optional&
      Evidence () const;

      Evidence_optional&
      Evidence ();

      void
      Evidence (const Evidence_type& x);

      void
      Evidence (const Evidence_optional& x);

      void
      Evidence (::std::auto_ptr< Evidence_type > p);

      // Resource
      // 
      typedef ::xml_schema::uri Resource_type;
      typedef ::xsd::cxx::tree::traits< Resource_type, wchar_t > Resource_traits;

      const Resource_type&
      Resource () const;

      Resource_type&
      Resource ();

      void
      Resource (const Resource_type& x);

      void
      Resource (::std::auto_ptr< Resource_type > p);

      // Constructors.
      //
      AuthzDecisionQueryType ();

      AuthzDecisionQueryType (const ID_type&,
                              const Version_type&,
                              const IssueInstant_type&,
                              const Subject_type&,
                              const Resource_type&);

      AuthzDecisionQueryType (const ID_type&,
                              const Version_type&,
                              const IssueInstant_type&,
                              ::std::auto_ptr< Subject_type >&,
                              const Resource_type&);

      AuthzDecisionQueryType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      AuthzDecisionQueryType (const AuthzDecisionQueryType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual AuthzDecisionQueryType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AuthzDecisionQueryType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Action_sequence Action_;
      Evidence_optional Evidence_;
      ::xsd::cxx::tree::one< Resource_type > Resource_;
    };

    class AuthnRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:
      // Subject
      // 
      typedef ::saml2::assertion::SubjectType Subject_type;
      typedef ::xsd::cxx::tree::optional< Subject_type > Subject_optional;
      typedef ::xsd::cxx::tree::traits< Subject_type, wchar_t > Subject_traits;

      const Subject_optional&
      Subject () const;

      Subject_optional&
      Subject ();

      void
      Subject (const Subject_type& x);

      void
      Subject (const Subject_optional& x);

      void
      Subject (::std::auto_ptr< Subject_type > p);

      // NameIDPolicy
      // 
      typedef ::saml2::protocol::NameIDPolicyType NameIDPolicy_type;
      typedef ::xsd::cxx::tree::optional< NameIDPolicy_type > NameIDPolicy_optional;
      typedef ::xsd::cxx::tree::traits< NameIDPolicy_type, wchar_t > NameIDPolicy_traits;

      const NameIDPolicy_optional&
      NameIDPolicy () const;

      NameIDPolicy_optional&
      NameIDPolicy ();

      void
      NameIDPolicy (const NameIDPolicy_type& x);

      void
      NameIDPolicy (const NameIDPolicy_optional& x);

      void
      NameIDPolicy (::std::auto_ptr< NameIDPolicy_type > p);

      // Conditions
      // 
      typedef ::saml2::assertion::ConditionsType Conditions_type;
      typedef ::xsd::cxx::tree::optional< Conditions_type > Conditions_optional;
      typedef ::xsd::cxx::tree::traits< Conditions_type, wchar_t > Conditions_traits;

      const Conditions_optional&
      Conditions () const;

      Conditions_optional&
      Conditions ();

      void
      Conditions (const Conditions_type& x);

      void
      Conditions (const Conditions_optional& x);

      void
      Conditions (::std::auto_ptr< Conditions_type > p);

      // RequestedAuthnContext
      // 
      typedef ::saml2::protocol::RequestedAuthnContextType RequestedAuthnContext_type;
      typedef ::xsd::cxx::tree::optional< RequestedAuthnContext_type > RequestedAuthnContext_optional;
      typedef ::xsd::cxx::tree::traits< RequestedAuthnContext_type, wchar_t > RequestedAuthnContext_traits;

      const RequestedAuthnContext_optional&
      RequestedAuthnContext () const;

      RequestedAuthnContext_optional&
      RequestedAuthnContext ();

      void
      RequestedAuthnContext (const RequestedAuthnContext_type& x);

      void
      RequestedAuthnContext (const RequestedAuthnContext_optional& x);

      void
      RequestedAuthnContext (::std::auto_ptr< RequestedAuthnContext_type > p);

      // Scoping
      // 
      typedef ::saml2::protocol::ScopingType Scoping_type;
      typedef ::xsd::cxx::tree::optional< Scoping_type > Scoping_optional;
      typedef ::xsd::cxx::tree::traits< Scoping_type, wchar_t > Scoping_traits;

      const Scoping_optional&
      Scoping () const;

      Scoping_optional&
      Scoping ();

      void
      Scoping (const Scoping_type& x);

      void
      Scoping (const Scoping_optional& x);

      void
      Scoping (::std::auto_ptr< Scoping_type > p);

      // ForceAuthn
      // 
      typedef ::xml_schema::boolean ForceAuthn_type;
      typedef ::xsd::cxx::tree::optional< ForceAuthn_type > ForceAuthn_optional;
      typedef ::xsd::cxx::tree::traits< ForceAuthn_type, wchar_t > ForceAuthn_traits;

      const ForceAuthn_optional&
      ForceAuthn () const;

      ForceAuthn_optional&
      ForceAuthn ();

      void
      ForceAuthn (const ForceAuthn_type& x);

      void
      ForceAuthn (const ForceAuthn_optional& x);

      // IsPassive
      // 
      typedef ::xml_schema::boolean IsPassive_type;
      typedef ::xsd::cxx::tree::optional< IsPassive_type > IsPassive_optional;
      typedef ::xsd::cxx::tree::traits< IsPassive_type, wchar_t > IsPassive_traits;

      const IsPassive_optional&
      IsPassive () const;

      IsPassive_optional&
      IsPassive ();

      void
      IsPassive (const IsPassive_type& x);

      void
      IsPassive (const IsPassive_optional& x);

      // ProtocolBinding
      // 
      typedef ::xml_schema::uri ProtocolBinding_type;
      typedef ::xsd::cxx::tree::optional< ProtocolBinding_type > ProtocolBinding_optional;
      typedef ::xsd::cxx::tree::traits< ProtocolBinding_type, wchar_t > ProtocolBinding_traits;

      const ProtocolBinding_optional&
      ProtocolBinding () const;

      ProtocolBinding_optional&
      ProtocolBinding ();

      void
      ProtocolBinding (const ProtocolBinding_type& x);

      void
      ProtocolBinding (const ProtocolBinding_optional& x);

      void
      ProtocolBinding (::std::auto_ptr< ProtocolBinding_type > p);

      // AssertionConsumerServiceIndex
      // 
      typedef ::xml_schema::unsigned_short AssertionConsumerServiceIndex_type;
      typedef ::xsd::cxx::tree::optional< AssertionConsumerServiceIndex_type > AssertionConsumerServiceIndex_optional;
      typedef ::xsd::cxx::tree::traits< AssertionConsumerServiceIndex_type, wchar_t > AssertionConsumerServiceIndex_traits;

      const AssertionConsumerServiceIndex_optional&
      AssertionConsumerServiceIndex () const;

      AssertionConsumerServiceIndex_optional&
      AssertionConsumerServiceIndex ();

      void
      AssertionConsumerServiceIndex (const AssertionConsumerServiceIndex_type& x);

      void
      AssertionConsumerServiceIndex (const AssertionConsumerServiceIndex_optional& x);

      // AssertionConsumerServiceURL
      // 
      typedef ::xml_schema::uri AssertionConsumerServiceURL_type;
      typedef ::xsd::cxx::tree::optional< AssertionConsumerServiceURL_type > AssertionConsumerServiceURL_optional;
      typedef ::xsd::cxx::tree::traits< AssertionConsumerServiceURL_type, wchar_t > AssertionConsumerServiceURL_traits;

      const AssertionConsumerServiceURL_optional&
      AssertionConsumerServiceURL () const;

      AssertionConsumerServiceURL_optional&
      AssertionConsumerServiceURL ();

      void
      AssertionConsumerServiceURL (const AssertionConsumerServiceURL_type& x);

      void
      AssertionConsumerServiceURL (const AssertionConsumerServiceURL_optional& x);

      void
      AssertionConsumerServiceURL (::std::auto_ptr< AssertionConsumerServiceURL_type > p);

      // AttributeConsumingServiceIndex
      // 
      typedef ::xml_schema::unsigned_short AttributeConsumingServiceIndex_type;
      typedef ::xsd::cxx::tree::optional< AttributeConsumingServiceIndex_type > AttributeConsumingServiceIndex_optional;
      typedef ::xsd::cxx::tree::traits< AttributeConsumingServiceIndex_type, wchar_t > AttributeConsumingServiceIndex_traits;

      const AttributeConsumingServiceIndex_optional&
      AttributeConsumingServiceIndex () const;

      AttributeConsumingServiceIndex_optional&
      AttributeConsumingServiceIndex ();

      void
      AttributeConsumingServiceIndex (const AttributeConsumingServiceIndex_type& x);

      void
      AttributeConsumingServiceIndex (const AttributeConsumingServiceIndex_optional& x);

      // ProviderName
      // 
      typedef ::xml_schema::string ProviderName_type;
      typedef ::xsd::cxx::tree::optional< ProviderName_type > ProviderName_optional;
      typedef ::xsd::cxx::tree::traits< ProviderName_type, wchar_t > ProviderName_traits;

      const ProviderName_optional&
      ProviderName () const;

      ProviderName_optional&
      ProviderName ();

      void
      ProviderName (const ProviderName_type& x);

      void
      ProviderName (const ProviderName_optional& x);

      void
      ProviderName (::std::auto_ptr< ProviderName_type > p);

      // Constructors.
      //
      AuthnRequestType ();

      AuthnRequestType (const ID_type&,
                        const Version_type&,
                        const IssueInstant_type&);

      AuthnRequestType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      AuthnRequestType (const AuthnRequestType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual AuthnRequestType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AuthnRequestType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Subject_optional Subject_;
      NameIDPolicy_optional NameIDPolicy_;
      Conditions_optional Conditions_;
      RequestedAuthnContext_optional RequestedAuthnContext_;
      Scoping_optional Scoping_;
      ForceAuthn_optional ForceAuthn_;
      IsPassive_optional IsPassive_;
      ProtocolBinding_optional ProtocolBinding_;
      AssertionConsumerServiceIndex_optional AssertionConsumerServiceIndex_;
      AssertionConsumerServiceURL_optional AssertionConsumerServiceURL_;
      AttributeConsumingServiceIndex_optional AttributeConsumingServiceIndex_;
      ProviderName_optional ProviderName_;
    };

    class NameIDPolicyType: public ::xml_schema::type
    {
      public:
      // Format
      // 
      typedef ::xml_schema::uri Format_type;
      typedef ::xsd::cxx::tree::optional< Format_type > Format_optional;
      typedef ::xsd::cxx::tree::traits< Format_type, wchar_t > Format_traits;

      const Format_optional&
      Format () const;

      Format_optional&
      Format ();

      void
      Format (const Format_type& x);

      void
      Format (const Format_optional& x);

      void
      Format (::std::auto_ptr< Format_type > p);

      // SPNameQualifier
      // 
      typedef ::xml_schema::string SPNameQualifier_type;
      typedef ::xsd::cxx::tree::optional< SPNameQualifier_type > SPNameQualifier_optional;
      typedef ::xsd::cxx::tree::traits< SPNameQualifier_type, wchar_t > SPNameQualifier_traits;

      const SPNameQualifier_optional&
      SPNameQualifier () const;

      SPNameQualifier_optional&
      SPNameQualifier ();

      void
      SPNameQualifier (const SPNameQualifier_type& x);

      void
      SPNameQualifier (const SPNameQualifier_optional& x);

      void
      SPNameQualifier (::std::auto_ptr< SPNameQualifier_type > p);

      // AllowCreate
      // 
      typedef ::xml_schema::boolean AllowCreate_type;
      typedef ::xsd::cxx::tree::optional< AllowCreate_type > AllowCreate_optional;
      typedef ::xsd::cxx::tree::traits< AllowCreate_type, wchar_t > AllowCreate_traits;

      const AllowCreate_optional&
      AllowCreate () const;

      AllowCreate_optional&
      AllowCreate ();

      void
      AllowCreate (const AllowCreate_type& x);

      void
      AllowCreate (const AllowCreate_optional& x);

      // Constructors.
      //
      NameIDPolicyType ();

      NameIDPolicyType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      NameIDPolicyType (const NameIDPolicyType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual NameIDPolicyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~NameIDPolicyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Format_optional Format_;
      SPNameQualifier_optional SPNameQualifier_;
      AllowCreate_optional AllowCreate_;
    };

    class ScopingType: public ::xml_schema::type
    {
      public:
      // IDPList
      // 
      typedef ::saml2::protocol::IDPListType IDPList_type;
      typedef ::xsd::cxx::tree::optional< IDPList_type > IDPList_optional;
      typedef ::xsd::cxx::tree::traits< IDPList_type, wchar_t > IDPList_traits;

      const IDPList_optional&
      IDPList () const;

      IDPList_optional&
      IDPList ();

      void
      IDPList (const IDPList_type& x);

      void
      IDPList (const IDPList_optional& x);

      void
      IDPList (::std::auto_ptr< IDPList_type > p);

      // RequesterID
      // 
      typedef ::xml_schema::uri RequesterID_type;
      typedef ::xsd::cxx::tree::sequence< RequesterID_type > RequesterID_sequence;
      typedef RequesterID_sequence::iterator RequesterID_iterator;
      typedef RequesterID_sequence::const_iterator RequesterID_const_iterator;
      typedef ::xsd::cxx::tree::traits< RequesterID_type, wchar_t > RequesterID_traits;

      const RequesterID_sequence&
      RequesterID () const;

      RequesterID_sequence&
      RequesterID ();

      void
      RequesterID (const RequesterID_sequence& s);

      // ProxyCount
      // 
      typedef ::xml_schema::non_negative_integer ProxyCount_type;
      typedef ::xsd::cxx::tree::optional< ProxyCount_type > ProxyCount_optional;
      typedef ::xsd::cxx::tree::traits< ProxyCount_type, wchar_t > ProxyCount_traits;

      const ProxyCount_optional&
      ProxyCount () const;

      ProxyCount_optional&
      ProxyCount ();

      void
      ProxyCount (const ProxyCount_type& x);

      void
      ProxyCount (const ProxyCount_optional& x);

      // Constructors.
      //
      ScopingType ();

      ScopingType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      ScopingType (const ScopingType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual ScopingType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ScopingType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      IDPList_optional IDPList_;
      RequesterID_sequence RequesterID_;
      ProxyCount_optional ProxyCount_;
    };

    class IDPListType: public ::xml_schema::type
    {
      public:
      // IDPEntry
      // 
      typedef ::saml2::protocol::IDPEntryType IDPEntry_type;
      typedef ::xsd::cxx::tree::sequence< IDPEntry_type > IDPEntry_sequence;
      typedef IDPEntry_sequence::iterator IDPEntry_iterator;
      typedef IDPEntry_sequence::const_iterator IDPEntry_const_iterator;
      typedef ::xsd::cxx::tree::traits< IDPEntry_type, wchar_t > IDPEntry_traits;

      const IDPEntry_sequence&
      IDPEntry () const;

      IDPEntry_sequence&
      IDPEntry ();

      void
      IDPEntry (const IDPEntry_sequence& s);

      // GetComplete
      // 
      typedef ::xml_schema::uri GetComplete_type;
      typedef ::xsd::cxx::tree::optional< GetComplete_type > GetComplete_optional;
      typedef ::xsd::cxx::tree::traits< GetComplete_type, wchar_t > GetComplete_traits;

      const GetComplete_optional&
      GetComplete () const;

      GetComplete_optional&
      GetComplete ();

      void
      GetComplete (const GetComplete_type& x);

      void
      GetComplete (const GetComplete_optional& x);

      void
      GetComplete (::std::auto_ptr< GetComplete_type > p);

      // Constructors.
      //
      IDPListType ();

      IDPListType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      IDPListType (const IDPListType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual IDPListType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~IDPListType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      IDPEntry_sequence IDPEntry_;
      GetComplete_optional GetComplete_;
    };

    class IDPEntryType: public ::xml_schema::type
    {
      public:
      // ProviderID
      // 
      typedef ::xml_schema::uri ProviderID_type;
      typedef ::xsd::cxx::tree::traits< ProviderID_type, wchar_t > ProviderID_traits;

      const ProviderID_type&
      ProviderID () const;

      ProviderID_type&
      ProviderID ();

      void
      ProviderID (const ProviderID_type& x);

      void
      ProviderID (::std::auto_ptr< ProviderID_type > p);

      // Name
      // 
      typedef ::xml_schema::string Name_type;
      typedef ::xsd::cxx::tree::optional< Name_type > Name_optional;
      typedef ::xsd::cxx::tree::traits< Name_type, wchar_t > Name_traits;

      const Name_optional&
      Name () const;

      Name_optional&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (const Name_optional& x);

      void
      Name (::std::auto_ptr< Name_type > p);

      // Loc
      // 
      typedef ::xml_schema::uri Loc_type;
      typedef ::xsd::cxx::tree::optional< Loc_type > Loc_optional;
      typedef ::xsd::cxx::tree::traits< Loc_type, wchar_t > Loc_traits;

      const Loc_optional&
      Loc () const;

      Loc_optional&
      Loc ();

      void
      Loc (const Loc_type& x);

      void
      Loc (const Loc_optional& x);

      void
      Loc (::std::auto_ptr< Loc_type > p);

      // Constructors.
      //
      IDPEntryType ();

      IDPEntryType (const ProviderID_type&);

      IDPEntryType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      IDPEntryType (const IDPEntryType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual IDPEntryType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~IDPEntryType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< ProviderID_type > ProviderID_;
      Name_optional Name_;
      Loc_optional Loc_;
    };

    class ResponseType: public ::saml2::protocol::StatusResponseType
    {
      public:
      // Assertion
      // 
      typedef ::saml2::assertion::AssertionType Assertion_type;
      typedef ::xsd::cxx::tree::sequence< Assertion_type > Assertion_sequence;
      typedef Assertion_sequence::iterator Assertion_iterator;
      typedef Assertion_sequence::const_iterator Assertion_const_iterator;
      typedef ::xsd::cxx::tree::traits< Assertion_type, wchar_t > Assertion_traits;

      const Assertion_sequence&
      Assertion () const;

      Assertion_sequence&
      Assertion ();

      void
      Assertion (const Assertion_sequence& s);

      // EncryptedAssertion
      // 
      typedef ::saml2::assertion::EncryptedElementType EncryptedAssertion_type;
      typedef ::xsd::cxx::tree::sequence< EncryptedAssertion_type > EncryptedAssertion_sequence;
      typedef EncryptedAssertion_sequence::iterator EncryptedAssertion_iterator;
      typedef EncryptedAssertion_sequence::const_iterator EncryptedAssertion_const_iterator;
      typedef ::xsd::cxx::tree::traits< EncryptedAssertion_type, wchar_t > EncryptedAssertion_traits;

      const EncryptedAssertion_sequence&
      EncryptedAssertion () const;

      EncryptedAssertion_sequence&
      EncryptedAssertion ();

      void
      EncryptedAssertion (const EncryptedAssertion_sequence& s);

      // Constructors.
      //
      ResponseType ();

      ResponseType (const Status_type&,
                    const ID_type&,
                    const Version_type&,
                    const IssueInstant_type&);

      ResponseType (::std::auto_ptr< Status_type >&,
                    const ID_type&,
                    const Version_type&,
                    const IssueInstant_type&);

      ResponseType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      ResponseType (const ResponseType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual ResponseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ResponseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Assertion_sequence Assertion_;
      EncryptedAssertion_sequence EncryptedAssertion_;
    };

    class ArtifactResolveType: public ::saml2::protocol::RequestAbstractType
    {
      public:
      // Artifact
      // 
      typedef ::xml_schema::string Artifact_type;
      typedef ::xsd::cxx::tree::traits< Artifact_type, wchar_t > Artifact_traits;

      const Artifact_type&
      Artifact () const;

      Artifact_type&
      Artifact ();

      void
      Artifact (const Artifact_type& x);

      void
      Artifact (::std::auto_ptr< Artifact_type > p);

      // Constructors.
      //
      ArtifactResolveType ();

      ArtifactResolveType (const ID_type&,
                           const Version_type&,
                           const IssueInstant_type&,
                           const Artifact_type&);

      ArtifactResolveType (const ID_type&,
                           const Version_type&,
                           const IssueInstant_type&,
                           ::std::auto_ptr< Artifact_type >&);

      ArtifactResolveType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      ArtifactResolveType (const ArtifactResolveType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual ArtifactResolveType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ArtifactResolveType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Artifact_type > Artifact_;
    };

    class ArtifactResponseType: public ::saml2::protocol::StatusResponseType
    {
      public:
      // any
      // 
      typedef ::xsd::cxx::tree::element_optional any_optional;

      const any_optional&
      any () const;

      any_optional&
      any ();

      void
      any (const ::xercesc::DOMElement& e);

      void
      any (::xercesc::DOMElement* p);

      void
      any (const any_optional& x);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      ArtifactResponseType ();

      ArtifactResponseType (const Status_type&,
                            const ID_type&,
                            const Version_type&,
                            const IssueInstant_type&);

      ArtifactResponseType (::std::auto_ptr< Status_type >&,
                            const ID_type&,
                            const Version_type&,
                            const IssueInstant_type&);

      ArtifactResponseType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      ArtifactResponseType (const ArtifactResponseType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual ArtifactResponseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ArtifactResponseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_optional any_;
    };

    class ManageNameIDRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:
      // NameID
      // 
      typedef ::saml2::assertion::NameIDType NameID_type;
      typedef ::xsd::cxx::tree::optional< NameID_type > NameID_optional;
      typedef ::xsd::cxx::tree::traits< NameID_type, wchar_t > NameID_traits;

      const NameID_optional&
      NameID () const;

      NameID_optional&
      NameID ();

      void
      NameID (const NameID_type& x);

      void
      NameID (const NameID_optional& x);

      void
      NameID (::std::auto_ptr< NameID_type > p);

      // EncryptedID
      // 
      typedef ::saml2::assertion::EncryptedElementType EncryptedID_type;
      typedef ::xsd::cxx::tree::optional< EncryptedID_type > EncryptedID_optional;
      typedef ::xsd::cxx::tree::traits< EncryptedID_type, wchar_t > EncryptedID_traits;

      const EncryptedID_optional&
      EncryptedID () const;

      EncryptedID_optional&
      EncryptedID ();

      void
      EncryptedID (const EncryptedID_type& x);

      void
      EncryptedID (const EncryptedID_optional& x);

      void
      EncryptedID (::std::auto_ptr< EncryptedID_type > p);

      // NewID
      // 
      typedef ::xml_schema::string NewID_type;
      typedef ::xsd::cxx::tree::optional< NewID_type > NewID_optional;
      typedef ::xsd::cxx::tree::traits< NewID_type, wchar_t > NewID_traits;

      const NewID_optional&
      NewID () const;

      NewID_optional&
      NewID ();

      void
      NewID (const NewID_type& x);

      void
      NewID (const NewID_optional& x);

      void
      NewID (::std::auto_ptr< NewID_type > p);

      // NewEncryptedID
      // 
      typedef ::saml2::assertion::EncryptedElementType NewEncryptedID_type;
      typedef ::xsd::cxx::tree::optional< NewEncryptedID_type > NewEncryptedID_optional;
      typedef ::xsd::cxx::tree::traits< NewEncryptedID_type, wchar_t > NewEncryptedID_traits;

      const NewEncryptedID_optional&
      NewEncryptedID () const;

      NewEncryptedID_optional&
      NewEncryptedID ();

      void
      NewEncryptedID (const NewEncryptedID_type& x);

      void
      NewEncryptedID (const NewEncryptedID_optional& x);

      void
      NewEncryptedID (::std::auto_ptr< NewEncryptedID_type > p);

      // Terminate
      // 
      typedef ::saml2::protocol::TerminateType Terminate_type;
      typedef ::xsd::cxx::tree::optional< Terminate_type > Terminate_optional;
      typedef ::xsd::cxx::tree::traits< Terminate_type, wchar_t > Terminate_traits;

      const Terminate_optional&
      Terminate () const;

      Terminate_optional&
      Terminate ();

      void
      Terminate (const Terminate_type& x);

      void
      Terminate (const Terminate_optional& x);

      void
      Terminate (::std::auto_ptr< Terminate_type > p);

      // Constructors.
      //
      ManageNameIDRequestType ();

      ManageNameIDRequestType (const ID_type&,
                               const Version_type&,
                               const IssueInstant_type&);

      ManageNameIDRequestType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      ManageNameIDRequestType (const ManageNameIDRequestType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual ManageNameIDRequestType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ManageNameIDRequestType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      NameID_optional NameID_;
      EncryptedID_optional EncryptedID_;
      NewID_optional NewID_;
      NewEncryptedID_optional NewEncryptedID_;
      Terminate_optional Terminate_;
    };

    class TerminateType: public ::xml_schema::type
    {
      public:
      // Constructors.
      //
      TerminateType ();

      TerminateType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      TerminateType (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      TerminateType (const ::std::wstring& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      TerminateType (const TerminateType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual TerminateType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~TerminateType ();
    };

    class LogoutRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:
      // BaseID
      // 
      typedef ::saml2::assertion::BaseIDAbstractType BaseID_type;
      typedef ::xsd::cxx::tree::optional< BaseID_type > BaseID_optional;
      typedef ::xsd::cxx::tree::traits< BaseID_type, wchar_t > BaseID_traits;

      const BaseID_optional&
      BaseID () const;

      BaseID_optional&
      BaseID ();

      void
      BaseID (const BaseID_type& x);

      void
      BaseID (const BaseID_optional& x);

      void
      BaseID (::std::auto_ptr< BaseID_type > p);

      // NameID
      // 
      typedef ::saml2::assertion::NameIDType NameID_type;
      typedef ::xsd::cxx::tree::optional< NameID_type > NameID_optional;
      typedef ::xsd::cxx::tree::traits< NameID_type, wchar_t > NameID_traits;

      const NameID_optional&
      NameID () const;

      NameID_optional&
      NameID ();

      void
      NameID (const NameID_type& x);

      void
      NameID (const NameID_optional& x);

      void
      NameID (::std::auto_ptr< NameID_type > p);

      // EncryptedID
      // 
      typedef ::saml2::assertion::EncryptedElementType EncryptedID_type;
      typedef ::xsd::cxx::tree::optional< EncryptedID_type > EncryptedID_optional;
      typedef ::xsd::cxx::tree::traits< EncryptedID_type, wchar_t > EncryptedID_traits;

      const EncryptedID_optional&
      EncryptedID () const;

      EncryptedID_optional&
      EncryptedID ();

      void
      EncryptedID (const EncryptedID_type& x);

      void
      EncryptedID (const EncryptedID_optional& x);

      void
      EncryptedID (::std::auto_ptr< EncryptedID_type > p);

      // SessionIndex
      // 
      typedef ::xml_schema::string SessionIndex_type;
      typedef ::xsd::cxx::tree::sequence< SessionIndex_type > SessionIndex_sequence;
      typedef SessionIndex_sequence::iterator SessionIndex_iterator;
      typedef SessionIndex_sequence::const_iterator SessionIndex_const_iterator;
      typedef ::xsd::cxx::tree::traits< SessionIndex_type, wchar_t > SessionIndex_traits;

      const SessionIndex_sequence&
      SessionIndex () const;

      SessionIndex_sequence&
      SessionIndex ();

      void
      SessionIndex (const SessionIndex_sequence& s);

      // Reason
      // 
      typedef ::xml_schema::string Reason_type;
      typedef ::xsd::cxx::tree::optional< Reason_type > Reason_optional;
      typedef ::xsd::cxx::tree::traits< Reason_type, wchar_t > Reason_traits;

      const Reason_optional&
      Reason () const;

      Reason_optional&
      Reason ();

      void
      Reason (const Reason_type& x);

      void
      Reason (const Reason_optional& x);

      void
      Reason (::std::auto_ptr< Reason_type > p);

      // NotOnOrAfter
      // 
      typedef ::xml_schema::date_time NotOnOrAfter_type;
      typedef ::xsd::cxx::tree::optional< NotOnOrAfter_type > NotOnOrAfter_optional;
      typedef ::xsd::cxx::tree::traits< NotOnOrAfter_type, wchar_t > NotOnOrAfter_traits;

      const NotOnOrAfter_optional&
      NotOnOrAfter () const;

      NotOnOrAfter_optional&
      NotOnOrAfter ();

      void
      NotOnOrAfter (const NotOnOrAfter_type& x);

      void
      NotOnOrAfter (const NotOnOrAfter_optional& x);

      void
      NotOnOrAfter (::std::auto_ptr< NotOnOrAfter_type > p);

      // Constructors.
      //
      LogoutRequestType ();

      LogoutRequestType (const ID_type&,
                         const Version_type&,
                         const IssueInstant_type&);

      LogoutRequestType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      LogoutRequestType (const LogoutRequestType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual LogoutRequestType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LogoutRequestType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      BaseID_optional BaseID_;
      NameID_optional NameID_;
      EncryptedID_optional EncryptedID_;
      SessionIndex_sequence SessionIndex_;
      Reason_optional Reason_;
      NotOnOrAfter_optional NotOnOrAfter_;
    };

    class NameIDMappingRequestType: public ::saml2::protocol::RequestAbstractType
    {
      public:
      // BaseID
      // 
      typedef ::saml2::assertion::BaseIDAbstractType BaseID_type;
      typedef ::xsd::cxx::tree::optional< BaseID_type > BaseID_optional;
      typedef ::xsd::cxx::tree::traits< BaseID_type, wchar_t > BaseID_traits;

      const BaseID_optional&
      BaseID () const;

      BaseID_optional&
      BaseID ();

      void
      BaseID (const BaseID_type& x);

      void
      BaseID (const BaseID_optional& x);

      void
      BaseID (::std::auto_ptr< BaseID_type > p);

      // NameID
      // 
      typedef ::saml2::assertion::NameIDType NameID_type;
      typedef ::xsd::cxx::tree::optional< NameID_type > NameID_optional;
      typedef ::xsd::cxx::tree::traits< NameID_type, wchar_t > NameID_traits;

      const NameID_optional&
      NameID () const;

      NameID_optional&
      NameID ();

      void
      NameID (const NameID_type& x);

      void
      NameID (const NameID_optional& x);

      void
      NameID (::std::auto_ptr< NameID_type > p);

      // EncryptedID
      // 
      typedef ::saml2::assertion::EncryptedElementType EncryptedID_type;
      typedef ::xsd::cxx::tree::optional< EncryptedID_type > EncryptedID_optional;
      typedef ::xsd::cxx::tree::traits< EncryptedID_type, wchar_t > EncryptedID_traits;

      const EncryptedID_optional&
      EncryptedID () const;

      EncryptedID_optional&
      EncryptedID ();

      void
      EncryptedID (const EncryptedID_type& x);

      void
      EncryptedID (const EncryptedID_optional& x);

      void
      EncryptedID (::std::auto_ptr< EncryptedID_type > p);

      // NameIDPolicy
      // 
      typedef ::saml2::protocol::NameIDPolicyType NameIDPolicy_type;
      typedef ::xsd::cxx::tree::traits< NameIDPolicy_type, wchar_t > NameIDPolicy_traits;

      const NameIDPolicy_type&
      NameIDPolicy () const;

      NameIDPolicy_type&
      NameIDPolicy ();

      void
      NameIDPolicy (const NameIDPolicy_type& x);

      void
      NameIDPolicy (::std::auto_ptr< NameIDPolicy_type > p);

      // Constructors.
      //
      NameIDMappingRequestType ();

      NameIDMappingRequestType (const ID_type&,
                                const Version_type&,
                                const IssueInstant_type&,
                                const NameIDPolicy_type&);

      NameIDMappingRequestType (const ID_type&,
                                const Version_type&,
                                const IssueInstant_type&,
                                ::std::auto_ptr< NameIDPolicy_type >&);

      NameIDMappingRequestType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      NameIDMappingRequestType (const NameIDMappingRequestType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual NameIDMappingRequestType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~NameIDMappingRequestType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      BaseID_optional BaseID_;
      NameID_optional NameID_;
      EncryptedID_optional EncryptedID_;
      ::xsd::cxx::tree::one< NameIDPolicy_type > NameIDPolicy_;
    };

    class NameIDMappingResponseType: public ::saml2::protocol::StatusResponseType
    {
      public:
      // NameID
      // 
      typedef ::saml2::assertion::NameIDType NameID_type;
      typedef ::xsd::cxx::tree::optional< NameID_type > NameID_optional;
      typedef ::xsd::cxx::tree::traits< NameID_type, wchar_t > NameID_traits;

      const NameID_optional&
      NameID () const;

      NameID_optional&
      NameID ();

      void
      NameID (const NameID_type& x);

      void
      NameID (const NameID_optional& x);

      void
      NameID (::std::auto_ptr< NameID_type > p);

      // EncryptedID
      // 
      typedef ::saml2::assertion::EncryptedElementType EncryptedID_type;
      typedef ::xsd::cxx::tree::optional< EncryptedID_type > EncryptedID_optional;
      typedef ::xsd::cxx::tree::traits< EncryptedID_type, wchar_t > EncryptedID_traits;

      const EncryptedID_optional&
      EncryptedID () const;

      EncryptedID_optional&
      EncryptedID ();

      void
      EncryptedID (const EncryptedID_type& x);

      void
      EncryptedID (const EncryptedID_optional& x);

      void
      EncryptedID (::std::auto_ptr< EncryptedID_type > p);

      // Constructors.
      //
      NameIDMappingResponseType ();

      NameIDMappingResponseType (const Status_type&,
                                 const ID_type&,
                                 const Version_type&,
                                 const IssueInstant_type&);

      NameIDMappingResponseType (::std::auto_ptr< Status_type >&,
                                 const ID_type&,
                                 const Version_type&,
                                 const IssueInstant_type&);

      NameIDMappingResponseType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      NameIDMappingResponseType (const NameIDMappingResponseType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual NameIDMappingResponseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~NameIDMappingResponseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      NameID_optional NameID_;
      EncryptedID_optional EncryptedID_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace saml2
{
  namespace protocol
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::std::wstring& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::std::wstring& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::std::wstring& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::std::istream& is,
                const ::std::wstring& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ExtensionsType >
    Extensions (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusType >
    Status (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::std::wstring& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::std::wstring& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::std::wstring& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::std::istream& is,
                const ::std::wstring& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusCodeType >
    StatusCode (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::wstring& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::wstring& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::wstring& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::wstring& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::std::wstring& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::std::wstring& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::std::wstring& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::std::istream& is,
                  const ::std::wstring& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusDetailType >
    StatusDetail (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::std::wstring& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::std::wstring& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::std::wstring& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::std::istream& is,
                        const ::std::wstring& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AssertionIDRequestType >
    AssertionIDRequest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::std::wstring& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::std::wstring& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::std::wstring& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::std::istream& is,
                  const ::std::wstring& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::SubjectQueryAbstractType >
    SubjectQuery (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::std::wstring& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::std::wstring& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::std::wstring& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::std::istream& is,
                const ::std::wstring& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnQueryType >
    AuthnQuery (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::std::wstring& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::std::wstring& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::std::wstring& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream& is,
                           const ::std::wstring& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream& is,
                           const ::std::wstring& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::std::istream& is,
                           const ::std::wstring& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::RequestedAuthnContextType >
    RequestedAuthnContext (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::std::wstring& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::std::wstring& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::std::wstring& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::std::istream& is,
                    const ::std::wstring& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AttributeQueryType >
    AttributeQuery (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::std::wstring& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::std::wstring& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::std::wstring& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::std::istream& is,
                        const ::std::wstring& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthzDecisionQueryType >
    AuthzDecisionQuery (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::std::wstring& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::std::wstring& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::std::wstring& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::std::istream& is,
                  const ::std::wstring& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::AuthnRequestType >
    AuthnRequest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::std::wstring& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::std::wstring& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::std::wstring& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::std::istream& is,
                  const ::std::wstring& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDPolicyType >
    NameIDPolicy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::std::wstring& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::std::wstring& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::std::wstring& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::std::istream& is,
             const ::std::wstring& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ScopingType >
    Scoping (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::std::wstring& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::std::wstring& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::std::wstring& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::std::istream& is,
                 const ::std::wstring& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    RequesterID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::std::wstring& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::std::wstring& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::std::wstring& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::std::istream& is,
             const ::std::wstring& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPListType >
    IDPList (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::std::wstring& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::std::wstring& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::std::wstring& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::std::istream& is,
              const ::std::wstring& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::IDPEntryType >
    IDPEntry (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::std::wstring& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::std::wstring& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::std::wstring& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::std::istream& is,
                 const ::std::wstring& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::uri >
    GetComplete (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::std::wstring& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::std::wstring& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::std::wstring& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::std::istream& is,
              const ::std::wstring& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ResponseType >
    Response (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::std::wstring& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::std::wstring& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::std::wstring& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::std::istream& is,
                     const ::std::wstring& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResolveType >
    ArtifactResolve (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::std::wstring& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::std::wstring& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::std::wstring& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::std::istream& is,
              const ::std::wstring& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Artifact (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::std::wstring& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::std::wstring& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::std::wstring& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream& is,
                      const ::std::wstring& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::std::istream& is,
                      const ::std::wstring& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ArtifactResponseType >
    ArtifactResponse (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::std::wstring& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::std::wstring& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::std::wstring& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::std::istream& is,
                         const ::std::wstring& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::ManageNameIDRequestType >
    ManageNameIDRequest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::std::wstring& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::std::wstring& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::std::wstring& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream& is,
           const ::std::wstring& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream& is,
           const ::std::wstring& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::std::istream& is,
           const ::std::wstring& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    NewID (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    NewID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::std::wstring& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::std::wstring& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::std::wstring& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::std::istream& is,
                    const ::std::wstring& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::assertion::EncryptedElementType >
    NewEncryptedID (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::std::wstring& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::std::wstring& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::std::wstring& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::std::istream& is,
               const ::std::wstring& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::TerminateType >
    Terminate (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::std::wstring& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::std::wstring& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::std::wstring& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream& is,
                          const ::std::wstring& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream& is,
                          const ::std::wstring& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::std::istream& is,
                          const ::std::wstring& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    ManageNameIDResponse (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::std::wstring& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::std::wstring& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::std::wstring& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::std::istream& is,
                   const ::std::wstring& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::LogoutRequestType >
    LogoutRequest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::std::wstring& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::std::wstring& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::std::wstring& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::std::istream& is,
                  const ::std::wstring& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    SessionIndex (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::std::wstring& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::std::wstring& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::std::wstring& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::std::istream& is,
                    const ::std::wstring& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::StatusResponseType >
    LogoutResponse (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::std::wstring& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::std::wstring& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::std::wstring& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream& is,
                          const ::std::wstring& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream& is,
                          const ::std::wstring& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::std::istream& is,
                          const ::std::wstring& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingRequestType >
    NameIDMappingRequest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::std::wstring& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::std::wstring& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::std::wstring& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream& is,
                           const ::std::wstring& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream& is,
                           const ::std::wstring& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::std::istream& is,
                           const ::std::wstring& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::saml2::protocol::NameIDMappingResponseType >
    NameIDMappingResponse (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace saml2
{
  namespace protocol
  {
    void
    operator<< (::xercesc::DOMElement&, const RequestAbstractType&);

    // Serialize to std::ostream.
    //

    void
    Extensions (::std::ostream& os,
                const ::saml2::protocol::ExtensionsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Extensions (::std::ostream& os,
                const ::saml2::protocol::ExtensionsType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Extensions (::std::ostream& os,
                const ::saml2::protocol::ExtensionsType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Extensions (::xercesc::XMLFormatTarget& ft,
                const ::saml2::protocol::ExtensionsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Extensions (::xercesc::XMLFormatTarget& ft,
                const ::saml2::protocol::ExtensionsType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Extensions (::xercesc::XMLFormatTarget& ft,
                const ::saml2::protocol::ExtensionsType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Extensions (::xercesc::DOMDocument& d,
                const ::saml2::protocol::ExtensionsType& x,
                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Extensions (const ::saml2::protocol::ExtensionsType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ExtensionsType&);

    void
    operator<< (::xercesc::DOMElement&, const StatusResponseType&);

    // Serialize to std::ostream.
    //

    void
    Status (::std::ostream& os,
            const ::saml2::protocol::StatusType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Status (::std::ostream& os,
            const ::saml2::protocol::StatusType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Status (::std::ostream& os,
            const ::saml2::protocol::StatusType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Status (::xercesc::XMLFormatTarget& ft,
            const ::saml2::protocol::StatusType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Status (::xercesc::XMLFormatTarget& ft,
            const ::saml2::protocol::StatusType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Status (::xercesc::XMLFormatTarget& ft,
            const ::saml2::protocol::StatusType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Status (::xercesc::DOMDocument& d,
            const ::saml2::protocol::StatusType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Status (const ::saml2::protocol::StatusType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const StatusType&);

    // Serialize to std::ostream.
    //

    void
    StatusCode (::std::ostream& os,
                const ::saml2::protocol::StatusCodeType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    StatusCode (::std::ostream& os,
                const ::saml2::protocol::StatusCodeType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    StatusCode (::std::ostream& os,
                const ::saml2::protocol::StatusCodeType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    StatusCode (::xercesc::XMLFormatTarget& ft,
                const ::saml2::protocol::StatusCodeType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    StatusCode (::xercesc::XMLFormatTarget& ft,
                const ::saml2::protocol::StatusCodeType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    StatusCode (::xercesc::XMLFormatTarget& ft,
                const ::saml2::protocol::StatusCodeType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    StatusCode (::xercesc::DOMDocument& d,
                const ::saml2::protocol::StatusCodeType& x,
                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StatusCode (const ::saml2::protocol::StatusCodeType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const StatusCodeType&);

    // Serialize to std::ostream.
    //

    void
    StatusMessage (::std::ostream& os,
                   const ::xml_schema::string& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    StatusMessage (::std::ostream& os,
                   const ::xml_schema::string& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    StatusMessage (::std::ostream& os,
                   const ::xml_schema::string& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    StatusMessage (::xercesc::XMLFormatTarget& ft,
                   const ::xml_schema::string& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    StatusMessage (::xercesc::XMLFormatTarget& ft,
                   const ::xml_schema::string& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    StatusMessage (::xercesc::XMLFormatTarget& ft,
                   const ::xml_schema::string& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    StatusMessage (::xercesc::DOMDocument& d,
                   const ::xml_schema::string& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StatusMessage (const ::xml_schema::string& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    StatusDetail (::std::ostream& os,
                  const ::saml2::protocol::StatusDetailType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    StatusDetail (::std::ostream& os,
                  const ::saml2::protocol::StatusDetailType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    StatusDetail (::std::ostream& os,
                  const ::saml2::protocol::StatusDetailType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    StatusDetail (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::protocol::StatusDetailType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    StatusDetail (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::protocol::StatusDetailType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    StatusDetail (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::protocol::StatusDetailType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    StatusDetail (::xercesc::DOMDocument& d,
                  const ::saml2::protocol::StatusDetailType& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StatusDetail (const ::saml2::protocol::StatusDetailType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const StatusDetailType&);

    // Serialize to std::ostream.
    //

    void
    AssertionIDRequest (::std::ostream& os,
                        const ::saml2::protocol::AssertionIDRequestType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    AssertionIDRequest (::std::ostream& os,
                        const ::saml2::protocol::AssertionIDRequestType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    AssertionIDRequest (::std::ostream& os,
                        const ::saml2::protocol::AssertionIDRequestType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AssertionIDRequest (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::protocol::AssertionIDRequestType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    AssertionIDRequest (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::protocol::AssertionIDRequestType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    AssertionIDRequest (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::protocol::AssertionIDRequestType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AssertionIDRequest (::xercesc::DOMDocument& d,
                        const ::saml2::protocol::AssertionIDRequestType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AssertionIDRequest (const ::saml2::protocol::AssertionIDRequestType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AssertionIDRequestType&);

    // Serialize to std::ostream.
    //

    void
    SubjectQuery (::std::ostream& os,
                  const ::saml2::protocol::SubjectQueryAbstractType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    SubjectQuery (::std::ostream& os,
                  const ::saml2::protocol::SubjectQueryAbstractType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    SubjectQuery (::std::ostream& os,
                  const ::saml2::protocol::SubjectQueryAbstractType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SubjectQuery (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::protocol::SubjectQueryAbstractType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    SubjectQuery (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::protocol::SubjectQueryAbstractType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    SubjectQuery (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::protocol::SubjectQueryAbstractType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SubjectQuery (::xercesc::DOMDocument& d,
                  const ::saml2::protocol::SubjectQueryAbstractType& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SubjectQuery (const ::saml2::protocol::SubjectQueryAbstractType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SubjectQueryAbstractType&);

    // Serialize to std::ostream.
    //

    void
    AuthnQuery (::std::ostream& os,
                const ::saml2::protocol::AuthnQueryType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    AuthnQuery (::std::ostream& os,
                const ::saml2::protocol::AuthnQueryType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    AuthnQuery (::std::ostream& os,
                const ::saml2::protocol::AuthnQueryType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AuthnQuery (::xercesc::XMLFormatTarget& ft,
                const ::saml2::protocol::AuthnQueryType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    AuthnQuery (::xercesc::XMLFormatTarget& ft,
                const ::saml2::protocol::AuthnQueryType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    AuthnQuery (::xercesc::XMLFormatTarget& ft,
                const ::saml2::protocol::AuthnQueryType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AuthnQuery (::xercesc::DOMDocument& d,
                const ::saml2::protocol::AuthnQueryType& x,
                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnQuery (const ::saml2::protocol::AuthnQueryType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AuthnQueryType&);

    // Serialize to std::ostream.
    //

    void
    RequestedAuthnContext (::std::ostream& os,
                           const ::saml2::protocol::RequestedAuthnContextType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    RequestedAuthnContext (::std::ostream& os,
                           const ::saml2::protocol::RequestedAuthnContextType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    RequestedAuthnContext (::std::ostream& os,
                           const ::saml2::protocol::RequestedAuthnContextType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RequestedAuthnContext (::xercesc::XMLFormatTarget& ft,
                           const ::saml2::protocol::RequestedAuthnContextType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    RequestedAuthnContext (::xercesc::XMLFormatTarget& ft,
                           const ::saml2::protocol::RequestedAuthnContextType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    RequestedAuthnContext (::xercesc::XMLFormatTarget& ft,
                           const ::saml2::protocol::RequestedAuthnContextType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RequestedAuthnContext (::xercesc::DOMDocument& d,
                           const ::saml2::protocol::RequestedAuthnContextType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RequestedAuthnContext (const ::saml2::protocol::RequestedAuthnContextType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const RequestedAuthnContextType&);

    void
    operator<< (::xercesc::DOMElement&, const AuthnContextComparisonType&);

    void
    operator<< (::xercesc::DOMAttr&, const AuthnContextComparisonType&);

    void
    operator<< (::xml_schema::list_stream&,
                const AuthnContextComparisonType&);

    // Serialize to std::ostream.
    //

    void
    AttributeQuery (::std::ostream& os,
                    const ::saml2::protocol::AttributeQueryType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeQuery (::std::ostream& os,
                    const ::saml2::protocol::AttributeQueryType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeQuery (::std::ostream& os,
                    const ::saml2::protocol::AttributeQueryType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AttributeQuery (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::protocol::AttributeQueryType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeQuery (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::protocol::AttributeQueryType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeQuery (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::protocol::AttributeQueryType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AttributeQuery (::xercesc::DOMDocument& d,
                    const ::saml2::protocol::AttributeQueryType& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeQuery (const ::saml2::protocol::AttributeQueryType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AttributeQueryType&);

    // Serialize to std::ostream.
    //

    void
    AuthzDecisionQuery (::std::ostream& os,
                        const ::saml2::protocol::AuthzDecisionQueryType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    AuthzDecisionQuery (::std::ostream& os,
                        const ::saml2::protocol::AuthzDecisionQueryType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    AuthzDecisionQuery (::std::ostream& os,
                        const ::saml2::protocol::AuthzDecisionQueryType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AuthzDecisionQuery (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::protocol::AuthzDecisionQueryType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    AuthzDecisionQuery (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::protocol::AuthzDecisionQueryType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    AuthzDecisionQuery (::xercesc::XMLFormatTarget& ft,
                        const ::saml2::protocol::AuthzDecisionQueryType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AuthzDecisionQuery (::xercesc::DOMDocument& d,
                        const ::saml2::protocol::AuthzDecisionQueryType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthzDecisionQuery (const ::saml2::protocol::AuthzDecisionQueryType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AuthzDecisionQueryType&);

    // Serialize to std::ostream.
    //

    void
    AuthnRequest (::std::ostream& os,
                  const ::saml2::protocol::AuthnRequestType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    AuthnRequest (::std::ostream& os,
                  const ::saml2::protocol::AuthnRequestType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    AuthnRequest (::std::ostream& os,
                  const ::saml2::protocol::AuthnRequestType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AuthnRequest (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::protocol::AuthnRequestType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    AuthnRequest (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::protocol::AuthnRequestType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    AuthnRequest (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::protocol::AuthnRequestType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AuthnRequest (::xercesc::DOMDocument& d,
                  const ::saml2::protocol::AuthnRequestType& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AuthnRequest (const ::saml2::protocol::AuthnRequestType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AuthnRequestType&);

    // Serialize to std::ostream.
    //

    void
    NameIDPolicy (::std::ostream& os,
                  const ::saml2::protocol::NameIDPolicyType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    NameIDPolicy (::std::ostream& os,
                  const ::saml2::protocol::NameIDPolicyType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    NameIDPolicy (::std::ostream& os,
                  const ::saml2::protocol::NameIDPolicyType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    NameIDPolicy (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::protocol::NameIDPolicyType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    NameIDPolicy (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::protocol::NameIDPolicyType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    NameIDPolicy (::xercesc::XMLFormatTarget& ft,
                  const ::saml2::protocol::NameIDPolicyType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    NameIDPolicy (::xercesc::DOMDocument& d,
                  const ::saml2::protocol::NameIDPolicyType& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDPolicy (const ::saml2::protocol::NameIDPolicyType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const NameIDPolicyType&);

    // Serialize to std::ostream.
    //

    void
    Scoping (::std::ostream& os,
             const ::saml2::protocol::ScopingType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Scoping (::std::ostream& os,
             const ::saml2::protocol::ScopingType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Scoping (::std::ostream& os,
             const ::saml2::protocol::ScopingType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Scoping (::xercesc::XMLFormatTarget& ft,
             const ::saml2::protocol::ScopingType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Scoping (::xercesc::XMLFormatTarget& ft,
             const ::saml2::protocol::ScopingType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Scoping (::xercesc::XMLFormatTarget& ft,
             const ::saml2::protocol::ScopingType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Scoping (::xercesc::DOMDocument& d,
             const ::saml2::protocol::ScopingType& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Scoping (const ::saml2::protocol::ScopingType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ScopingType&);

    // Serialize to std::ostream.
    //

    void
    RequesterID (::std::ostream& os,
                 const ::xml_schema::uri& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    RequesterID (::std::ostream& os,
                 const ::xml_schema::uri& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    RequesterID (::std::ostream& os,
                 const ::xml_schema::uri& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    RequesterID (::xercesc::XMLFormatTarget& ft,
                 const ::xml_schema::uri& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    RequesterID (::xercesc::XMLFormatTarget& ft,
                 const ::xml_schema::uri& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    RequesterID (::xercesc::XMLFormatTarget& ft,
                 const ::xml_schema::uri& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    RequesterID (::xercesc::DOMDocument& d,
                 const ::xml_schema::uri& x,
                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RequesterID (const ::xml_schema::uri& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    IDPList (::std::ostream& os,
             const ::saml2::protocol::IDPListType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    IDPList (::std::ostream& os,
             const ::saml2::protocol::IDPListType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    IDPList (::std::ostream& os,
             const ::saml2::protocol::IDPListType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    IDPList (::xercesc::XMLFormatTarget& ft,
             const ::saml2::protocol::IDPListType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    IDPList (::xercesc::XMLFormatTarget& ft,
             const ::saml2::protocol::IDPListType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    IDPList (::xercesc::XMLFormatTarget& ft,
             const ::saml2::protocol::IDPListType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    IDPList (::xercesc::DOMDocument& d,
             const ::saml2::protocol::IDPListType& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    IDPList (const ::saml2::protocol::IDPListType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const IDPListType&);

    // Serialize to std::ostream.
    //

    void
    IDPEntry (::std::ostream& os,
              const ::saml2::protocol::IDPEntryType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    IDPEntry (::std::ostream& os,
              const ::saml2::protocol::IDPEntryType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    IDPEntry (::std::ostream& os,
              const ::saml2::protocol::IDPEntryType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    IDPEntry (::xercesc::XMLFormatTarget& ft,
              const ::saml2::protocol::IDPEntryType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    IDPEntry (::xercesc::XMLFormatTarget& ft,
              const ::saml2::protocol::IDPEntryType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    IDPEntry (::xercesc::XMLFormatTarget& ft,
              const ::saml2::protocol::IDPEntryType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    IDPEntry (::xercesc::DOMDocument& d,
              const ::saml2::protocol::IDPEntryType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    IDPEntry (const ::saml2::protocol::IDPEntryType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const IDPEntryType&);

    // Serialize to std::ostream.
    //

    void
    GetComplete (::std::ostream& os,
                 const ::xml_schema::uri& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    GetComplete (::std::ostream& os,
                 const ::xml_schema::uri& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    GetComplete (::std::ostream& os,
                 const ::xml_schema::uri& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    GetComplete (::xercesc::XMLFormatTarget& ft,
                 const ::xml_schema::uri& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    GetComplete (::xercesc::XMLFormatTarget& ft,
                 const ::xml_schema::uri& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    GetComplete (::xercesc::XMLFormatTarget& ft,
                 const ::xml_schema::uri& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    GetComplete (::xercesc::DOMDocument& d,
                 const ::xml_schema::uri& x,
                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    GetComplete (const ::xml_schema::uri& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Response (::std::ostream& os,
              const ::saml2::protocol::ResponseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Response (::std::ostream& os,
              const ::saml2::protocol::ResponseType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Response (::std::ostream& os,
              const ::saml2::protocol::ResponseType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Response (::xercesc::XMLFormatTarget& ft,
              const ::saml2::protocol::ResponseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Response (::xercesc::XMLFormatTarget& ft,
              const ::saml2::protocol::ResponseType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Response (::xercesc::XMLFormatTarget& ft,
              const ::saml2::protocol::ResponseType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Response (::xercesc::DOMDocument& d,
              const ::saml2::protocol::ResponseType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Response (const ::saml2::protocol::ResponseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ResponseType&);

    // Serialize to std::ostream.
    //

    void
    ArtifactResolve (::std::ostream& os,
                     const ::saml2::protocol::ArtifactResolveType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    ArtifactResolve (::std::ostream& os,
                     const ::saml2::protocol::ArtifactResolveType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    ArtifactResolve (::std::ostream& os,
                     const ::saml2::protocol::ArtifactResolveType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ArtifactResolve (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::protocol::ArtifactResolveType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    ArtifactResolve (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::protocol::ArtifactResolveType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    ArtifactResolve (::xercesc::XMLFormatTarget& ft,
                     const ::saml2::protocol::ArtifactResolveType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ArtifactResolve (::xercesc::DOMDocument& d,
                     const ::saml2::protocol::ArtifactResolveType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ArtifactResolve (const ::saml2::protocol::ArtifactResolveType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ArtifactResolveType&);

    // Serialize to std::ostream.
    //

    void
    Artifact (::std::ostream& os,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Artifact (::std::ostream& os,
              const ::xml_schema::string& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Artifact (::std::ostream& os,
              const ::xml_schema::string& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Artifact (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Artifact (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::string& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Artifact (::xercesc::XMLFormatTarget& ft,
              const ::xml_schema::string& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Artifact (::xercesc::DOMDocument& d,
              const ::xml_schema::string& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Artifact (const ::xml_schema::string& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    ArtifactResponse (::std::ostream& os,
                      const ::saml2::protocol::ArtifactResponseType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ArtifactResponse (::std::ostream& os,
                      const ::saml2::protocol::ArtifactResponseType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ArtifactResponse (::std::ostream& os,
                      const ::saml2::protocol::ArtifactResponseType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ArtifactResponse (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::protocol::ArtifactResponseType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ArtifactResponse (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::protocol::ArtifactResponseType& x, 
                      ::xml_schema::error_handler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    void
    ArtifactResponse (::xercesc::XMLFormatTarget& ft,
                      const ::saml2::protocol::ArtifactResponseType& x, 
                      ::xercesc::DOMErrorHandler& eh,
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      const ::std::wstring& e = L"UTF-8",
                      ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ArtifactResponse (::xercesc::DOMDocument& d,
                      const ::saml2::protocol::ArtifactResponseType& x,
                      ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ArtifactResponse (const ::saml2::protocol::ArtifactResponseType& x, 
                      const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                      ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ArtifactResponseType&);

    // Serialize to std::ostream.
    //

    void
    ManageNameIDRequest (::std::ostream& os,
                         const ::saml2::protocol::ManageNameIDRequestType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ManageNameIDRequest (::std::ostream& os,
                         const ::saml2::protocol::ManageNameIDRequestType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ManageNameIDRequest (::std::ostream& os,
                         const ::saml2::protocol::ManageNameIDRequestType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ManageNameIDRequest (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::protocol::ManageNameIDRequestType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ManageNameIDRequest (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::protocol::ManageNameIDRequestType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    ManageNameIDRequest (::xercesc::XMLFormatTarget& ft,
                         const ::saml2::protocol::ManageNameIDRequestType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ManageNameIDRequest (::xercesc::DOMDocument& d,
                         const ::saml2::protocol::ManageNameIDRequestType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ManageNameIDRequest (const ::saml2::protocol::ManageNameIDRequestType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ManageNameIDRequestType&);

    // Serialize to std::ostream.
    //

    void
    NewID (::std::ostream& os,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    void
    NewID (::std::ostream& os,
           const ::xml_schema::string& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    void
    NewID (::std::ostream& os,
           const ::xml_schema::string& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    NewID (::xercesc::XMLFormatTarget& ft,
           const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    void
    NewID (::xercesc::XMLFormatTarget& ft,
           const ::xml_schema::string& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    void
    NewID (::xercesc::XMLFormatTarget& ft,
           const ::xml_schema::string& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    NewID (::xercesc::DOMDocument& d,
           const ::xml_schema::string& x,
           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    NewID (const ::xml_schema::string& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    NewEncryptedID (::std::ostream& os,
                    const ::saml2::assertion::EncryptedElementType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    NewEncryptedID (::std::ostream& os,
                    const ::saml2::assertion::EncryptedElementType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    NewEncryptedID (::std::ostream& os,
                    const ::saml2::assertion::EncryptedElementType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    NewEncryptedID (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::assertion::EncryptedElementType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    NewEncryptedID (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::assertion::EncryptedElementType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    NewEncryptedID (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::assertion::EncryptedElementType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    NewEncryptedID (::xercesc::DOMDocument& d,
                    const ::saml2::assertion::EncryptedElementType& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    NewEncryptedID (const ::saml2::assertion::EncryptedElementType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Terminate (::std::ostream& os,
               const ::saml2::protocol::TerminateType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Terminate (::std::ostream& os,
               const ::saml2::protocol::TerminateType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Terminate (::std::ostream& os,
               const ::saml2::protocol::TerminateType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Terminate (::xercesc::XMLFormatTarget& ft,
               const ::saml2::protocol::TerminateType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Terminate (::xercesc::XMLFormatTarget& ft,
               const ::saml2::protocol::TerminateType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Terminate (::xercesc::XMLFormatTarget& ft,
               const ::saml2::protocol::TerminateType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Terminate (::xercesc::DOMDocument& d,
               const ::saml2::protocol::TerminateType& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Terminate (const ::saml2::protocol::TerminateType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const TerminateType&);

    void
    operator<< (::xercesc::DOMAttr&, const TerminateType&);

    void
    operator<< (::xml_schema::list_stream&,
                const TerminateType&);

    // Serialize to std::ostream.
    //

    void
    ManageNameIDResponse (::std::ostream& os,
                          const ::saml2::protocol::StatusResponseType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    ManageNameIDResponse (::std::ostream& os,
                          const ::saml2::protocol::StatusResponseType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    ManageNameIDResponse (::std::ostream& os,
                          const ::saml2::protocol::StatusResponseType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ManageNameIDResponse (::xercesc::XMLFormatTarget& ft,
                          const ::saml2::protocol::StatusResponseType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    ManageNameIDResponse (::xercesc::XMLFormatTarget& ft,
                          const ::saml2::protocol::StatusResponseType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    ManageNameIDResponse (::xercesc::XMLFormatTarget& ft,
                          const ::saml2::protocol::StatusResponseType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ManageNameIDResponse (::xercesc::DOMDocument& d,
                          const ::saml2::protocol::StatusResponseType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ManageNameIDResponse (const ::saml2::protocol::StatusResponseType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LogoutRequest (::std::ostream& os,
                   const ::saml2::protocol::LogoutRequestType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    LogoutRequest (::std::ostream& os,
                   const ::saml2::protocol::LogoutRequestType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    LogoutRequest (::std::ostream& os,
                   const ::saml2::protocol::LogoutRequestType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LogoutRequest (::xercesc::XMLFormatTarget& ft,
                   const ::saml2::protocol::LogoutRequestType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    LogoutRequest (::xercesc::XMLFormatTarget& ft,
                   const ::saml2::protocol::LogoutRequestType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    LogoutRequest (::xercesc::XMLFormatTarget& ft,
                   const ::saml2::protocol::LogoutRequestType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LogoutRequest (::xercesc::DOMDocument& d,
                   const ::saml2::protocol::LogoutRequestType& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LogoutRequest (const ::saml2::protocol::LogoutRequestType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const LogoutRequestType&);

    // Serialize to std::ostream.
    //

    void
    SessionIndex (::std::ostream& os,
                  const ::xml_schema::string& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    SessionIndex (::std::ostream& os,
                  const ::xml_schema::string& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    SessionIndex (::std::ostream& os,
                  const ::xml_schema::string& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SessionIndex (::xercesc::XMLFormatTarget& ft,
                  const ::xml_schema::string& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    SessionIndex (::xercesc::XMLFormatTarget& ft,
                  const ::xml_schema::string& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    SessionIndex (::xercesc::XMLFormatTarget& ft,
                  const ::xml_schema::string& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SessionIndex (::xercesc::DOMDocument& d,
                  const ::xml_schema::string& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SessionIndex (const ::xml_schema::string& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    LogoutResponse (::std::ostream& os,
                    const ::saml2::protocol::StatusResponseType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    LogoutResponse (::std::ostream& os,
                    const ::saml2::protocol::StatusResponseType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    LogoutResponse (::std::ostream& os,
                    const ::saml2::protocol::StatusResponseType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LogoutResponse (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::protocol::StatusResponseType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    LogoutResponse (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::protocol::StatusResponseType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    LogoutResponse (::xercesc::XMLFormatTarget& ft,
                    const ::saml2::protocol::StatusResponseType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LogoutResponse (::xercesc::DOMDocument& d,
                    const ::saml2::protocol::StatusResponseType& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LogoutResponse (const ::saml2::protocol::StatusResponseType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    NameIDMappingRequest (::std::ostream& os,
                          const ::saml2::protocol::NameIDMappingRequestType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    NameIDMappingRequest (::std::ostream& os,
                          const ::saml2::protocol::NameIDMappingRequestType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    NameIDMappingRequest (::std::ostream& os,
                          const ::saml2::protocol::NameIDMappingRequestType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    NameIDMappingRequest (::xercesc::XMLFormatTarget& ft,
                          const ::saml2::protocol::NameIDMappingRequestType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    NameIDMappingRequest (::xercesc::XMLFormatTarget& ft,
                          const ::saml2::protocol::NameIDMappingRequestType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    NameIDMappingRequest (::xercesc::XMLFormatTarget& ft,
                          const ::saml2::protocol::NameIDMappingRequestType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    NameIDMappingRequest (::xercesc::DOMDocument& d,
                          const ::saml2::protocol::NameIDMappingRequestType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDMappingRequest (const ::saml2::protocol::NameIDMappingRequestType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const NameIDMappingRequestType&);

    // Serialize to std::ostream.
    //

    void
    NameIDMappingResponse (::std::ostream& os,
                           const ::saml2::protocol::NameIDMappingResponseType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    NameIDMappingResponse (::std::ostream& os,
                           const ::saml2::protocol::NameIDMappingResponseType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    NameIDMappingResponse (::std::ostream& os,
                           const ::saml2::protocol::NameIDMappingResponseType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    NameIDMappingResponse (::xercesc::XMLFormatTarget& ft,
                           const ::saml2::protocol::NameIDMappingResponseType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    NameIDMappingResponse (::xercesc::XMLFormatTarget& ft,
                           const ::saml2::protocol::NameIDMappingResponseType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    NameIDMappingResponse (::xercesc::XMLFormatTarget& ft,
                           const ::saml2::protocol::NameIDMappingResponseType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    NameIDMappingResponse (::xercesc::DOMDocument& d,
                           const ::saml2::protocol::NameIDMappingResponseType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    NameIDMappingResponse (const ::saml2::protocol::NameIDMappingResponseType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const NameIDMappingResponseType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SAML_SCHEMA_PROTOCOL_2_0_HXX
