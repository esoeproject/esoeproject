// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_XENC_SCHEMA_HXX
#define CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_XENC_SCHEMA_HXX

// Begin prologue.
//
#include "saml2/SAML2Defs.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "saml2/xsd/xml-schema.hxx"

// Forward declarations.
//
namespace w3
{
  namespace xmlenc
  {
    class EncryptedType;
    class EncryptionMethodType;
    class KeySizeType;
    class CipherDataType;
    class CipherReferenceType;
    class TransformsType;
    class EncryptedDataType;
    class EncryptedKeyType;
    class AgreementMethodType;
    class ReferenceType;
    class EncryptionPropertiesType;
    class EncryptionPropertyType;
    class ReferenceList;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "xmldsig-core-schema.hxx"

namespace w3
{
  namespace xmlenc
  {
    class EncryptedType: public ::xml_schema::type
    {
      public:
      // EncryptionMethod
      // 
      typedef ::w3::xmlenc::EncryptionMethodType EncryptionMethod_type;
      typedef ::xsd::cxx::tree::optional< EncryptionMethod_type > EncryptionMethod_optional;
      typedef ::xsd::cxx::tree::traits< EncryptionMethod_type, wchar_t > EncryptionMethod_traits;

      const EncryptionMethod_optional&
      EncryptionMethod () const;

      EncryptionMethod_optional&
      EncryptionMethod ();

      void
      EncryptionMethod (const EncryptionMethod_type& x);

      void
      EncryptionMethod (const EncryptionMethod_optional& x);

      void
      EncryptionMethod (::std::auto_ptr< EncryptionMethod_type > p);

      // KeyInfo
      // 
      typedef ::w3::xmldsig::KeyInfoType KeyInfo_type;
      typedef ::xsd::cxx::tree::optional< KeyInfo_type > KeyInfo_optional;
      typedef ::xsd::cxx::tree::traits< KeyInfo_type, wchar_t > KeyInfo_traits;

      const KeyInfo_optional&
      KeyInfo () const;

      KeyInfo_optional&
      KeyInfo ();

      void
      KeyInfo (const KeyInfo_type& x);

      void
      KeyInfo (const KeyInfo_optional& x);

      void
      KeyInfo (::std::auto_ptr< KeyInfo_type > p);

      // CipherData
      // 
      typedef ::w3::xmlenc::CipherDataType CipherData_type;
      typedef ::xsd::cxx::tree::traits< CipherData_type, wchar_t > CipherData_traits;

      const CipherData_type&
      CipherData () const;

      CipherData_type&
      CipherData ();

      void
      CipherData (const CipherData_type& x);

      void
      CipherData (::std::auto_ptr< CipherData_type > p);

      // EncryptionProperties
      // 
      typedef ::w3::xmlenc::EncryptionPropertiesType EncryptionProperties_type;
      typedef ::xsd::cxx::tree::optional< EncryptionProperties_type > EncryptionProperties_optional;
      typedef ::xsd::cxx::tree::traits< EncryptionProperties_type, wchar_t > EncryptionProperties_traits;

      const EncryptionProperties_optional&
      EncryptionProperties () const;

      EncryptionProperties_optional&
      EncryptionProperties ();

      void
      EncryptionProperties (const EncryptionProperties_type& x);

      void
      EncryptionProperties (const EncryptionProperties_optional& x);

      void
      EncryptionProperties (::std::auto_ptr< EncryptionProperties_type > p);

      // Id
      // 
      typedef ::xml_schema::id Id_type;
      typedef ::xsd::cxx::tree::optional< Id_type > Id_optional;
      typedef ::xsd::cxx::tree::traits< Id_type, wchar_t > Id_traits;

      const Id_optional&
      Id () const;

      Id_optional&
      Id ();

      void
      Id (const Id_type& x);

      void
      Id (const Id_optional& x);

      void
      Id (::std::auto_ptr< Id_type > p);

      // Type
      // 
      typedef ::xml_schema::uri Type_type;
      typedef ::xsd::cxx::tree::optional< Type_type > Type_optional;
      typedef ::xsd::cxx::tree::traits< Type_type, wchar_t > Type_traits;

      const Type_optional&
      Type () const;

      Type_optional&
      Type ();

      void
      Type (const Type_type& x);

      void
      Type (const Type_optional& x);

      void
      Type (::std::auto_ptr< Type_type > p);

      // MimeType
      // 
      typedef ::xml_schema::string MimeType_type;
      typedef ::xsd::cxx::tree::optional< MimeType_type > MimeType_optional;
      typedef ::xsd::cxx::tree::traits< MimeType_type, wchar_t > MimeType_traits;

      const MimeType_optional&
      MimeType () const;

      MimeType_optional&
      MimeType ();

      void
      MimeType (const MimeType_type& x);

      void
      MimeType (const MimeType_optional& x);

      void
      MimeType (::std::auto_ptr< MimeType_type > p);

      // Encoding
      // 
      typedef ::xml_schema::uri Encoding_type;
      typedef ::xsd::cxx::tree::optional< Encoding_type > Encoding_optional;
      typedef ::xsd::cxx::tree::traits< Encoding_type, wchar_t > Encoding_traits;

      const Encoding_optional&
      Encoding () const;

      Encoding_optional&
      Encoding ();

      void
      Encoding (const Encoding_type& x);

      void
      Encoding (const Encoding_optional& x);

      void
      Encoding (::std::auto_ptr< Encoding_type > p);

      // Constructors.
      //
      EncryptedType ();

      EncryptedType (const CipherData_type&);

      EncryptedType (::std::auto_ptr< CipherData_type >&);

      EncryptedType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      EncryptedType (const EncryptedType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual EncryptedType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~EncryptedType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      EncryptionMethod_optional EncryptionMethod_;
      KeyInfo_optional KeyInfo_;
      ::xsd::cxx::tree::one< CipherData_type > CipherData_;
      EncryptionProperties_optional EncryptionProperties_;
      Id_optional Id_;
      Type_optional Type_;
      MimeType_optional MimeType_;
      Encoding_optional Encoding_;
    };

    class EncryptionMethodType: public ::xml_schema::type
    {
      public:
      // KeySize
      // 
      typedef ::w3::xmlenc::KeySizeType KeySize_type;
      typedef ::xsd::cxx::tree::optional< KeySize_type > KeySize_optional;
      typedef ::xsd::cxx::tree::traits< KeySize_type, wchar_t > KeySize_traits;

      const KeySize_optional&
      KeySize () const;

      KeySize_optional&
      KeySize ();

      void
      KeySize (const KeySize_type& x);

      void
      KeySize (const KeySize_optional& x);

      void
      KeySize (::std::auto_ptr< KeySize_type > p);

      // OAEPparams
      // 
      typedef ::xml_schema::base64_binary OAEPparams_type;
      typedef ::xsd::cxx::tree::optional< OAEPparams_type > OAEPparams_optional;
      typedef ::xsd::cxx::tree::traits< OAEPparams_type, wchar_t > OAEPparams_traits;

      const OAEPparams_optional&
      OAEPparams () const;

      OAEPparams_optional&
      OAEPparams ();

      void
      OAEPparams (const OAEPparams_type& x);

      void
      OAEPparams (const OAEPparams_optional& x);

      void
      OAEPparams (::std::auto_ptr< OAEPparams_type > p);

      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // Algorithm
      // 
      typedef ::xml_schema::uri Algorithm_type;
      typedef ::xsd::cxx::tree::traits< Algorithm_type, wchar_t > Algorithm_traits;

      const Algorithm_type&
      Algorithm () const;

      Algorithm_type&
      Algorithm ();

      void
      Algorithm (const Algorithm_type& x);

      void
      Algorithm (::std::auto_ptr< Algorithm_type > p);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      EncryptionMethodType ();

      EncryptionMethodType (const Algorithm_type&);

      EncryptionMethodType (const ::xercesc::DOMElement& e,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      EncryptionMethodType (const EncryptionMethodType& x,
                            ::xml_schema::flags f = 0,
                            ::xml_schema::container* c = 0);

      virtual EncryptionMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~EncryptionMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      KeySize_optional KeySize_;
      OAEPparams_optional OAEPparams_;
      any_sequence any_;
      ::xsd::cxx::tree::one< Algorithm_type > Algorithm_;
    };

    class KeySizeType: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::integer, wchar_t, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      KeySizeType ();

      KeySizeType (const ::xml_schema::integer&);

      KeySizeType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      KeySizeType (const ::xercesc::DOMAttr& a,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      KeySizeType (const ::std::wstring& s,
                   const ::xercesc::DOMElement* e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      KeySizeType (const KeySizeType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual KeySizeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~KeySizeType ();
    };

    class CipherDataType: public ::xml_schema::type
    {
      public:
      // CipherValue
      // 
      typedef ::xml_schema::base64_binary CipherValue_type;
      typedef ::xsd::cxx::tree::optional< CipherValue_type > CipherValue_optional;
      typedef ::xsd::cxx::tree::traits< CipherValue_type, wchar_t > CipherValue_traits;

      const CipherValue_optional&
      CipherValue () const;

      CipherValue_optional&
      CipherValue ();

      void
      CipherValue (const CipherValue_type& x);

      void
      CipherValue (const CipherValue_optional& x);

      void
      CipherValue (::std::auto_ptr< CipherValue_type > p);

      // CipherReference
      // 
      typedef ::w3::xmlenc::CipherReferenceType CipherReference_type;
      typedef ::xsd::cxx::tree::optional< CipherReference_type > CipherReference_optional;
      typedef ::xsd::cxx::tree::traits< CipherReference_type, wchar_t > CipherReference_traits;

      const CipherReference_optional&
      CipherReference () const;

      CipherReference_optional&
      CipherReference ();

      void
      CipherReference (const CipherReference_type& x);

      void
      CipherReference (const CipherReference_optional& x);

      void
      CipherReference (::std::auto_ptr< CipherReference_type > p);

      // Constructors.
      //
      CipherDataType ();

      CipherDataType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      CipherDataType (const CipherDataType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual CipherDataType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CipherDataType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      CipherValue_optional CipherValue_;
      CipherReference_optional CipherReference_;
    };

    class CipherReferenceType: public ::xml_schema::type
    {
      public:
      // Transforms
      // 
      typedef ::w3::xmlenc::TransformsType Transforms_type;
      typedef ::xsd::cxx::tree::optional< Transforms_type > Transforms_optional;
      typedef ::xsd::cxx::tree::traits< Transforms_type, wchar_t > Transforms_traits;

      const Transforms_optional&
      Transforms () const;

      Transforms_optional&
      Transforms ();

      void
      Transforms (const Transforms_type& x);

      void
      Transforms (const Transforms_optional& x);

      void
      Transforms (::std::auto_ptr< Transforms_type > p);

      // URI
      // 
      typedef ::xml_schema::uri URI_type;
      typedef ::xsd::cxx::tree::traits< URI_type, wchar_t > URI_traits;

      const URI_type&
      URI () const;

      URI_type&
      URI ();

      void
      URI (const URI_type& x);

      void
      URI (::std::auto_ptr< URI_type > p);

      // Constructors.
      //
      CipherReferenceType ();

      CipherReferenceType (const URI_type&);

      CipherReferenceType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      CipherReferenceType (const CipherReferenceType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual CipherReferenceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~CipherReferenceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Transforms_optional Transforms_;
      ::xsd::cxx::tree::one< URI_type > URI_;
    };

    class TransformsType: public ::xml_schema::type
    {
      public:
      // Transform
      // 
      typedef ::w3::xmldsig::TransformType Transform_type;
      typedef ::xsd::cxx::tree::sequence< Transform_type > Transform_sequence;
      typedef Transform_sequence::iterator Transform_iterator;
      typedef Transform_sequence::const_iterator Transform_const_iterator;
      typedef ::xsd::cxx::tree::traits< Transform_type, wchar_t > Transform_traits;

      const Transform_sequence&
      Transform () const;

      Transform_sequence&
      Transform ();

      void
      Transform (const Transform_sequence& s);

      // Constructors.
      //
      TransformsType ();

      TransformsType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      TransformsType (const TransformsType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual TransformsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~TransformsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Transform_sequence Transform_;
    };

    class EncryptedDataType: public ::w3::xmlenc::EncryptedType
    {
      public:
      // Constructors.
      //
      EncryptedDataType ();

      EncryptedDataType (const CipherData_type&);

      EncryptedDataType (::std::auto_ptr< CipherData_type >&);

      EncryptedDataType (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      EncryptedDataType (const EncryptedDataType& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

      virtual EncryptedDataType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~EncryptedDataType ();
    };

    class EncryptedKeyType: public ::w3::xmlenc::EncryptedType
    {
      public:
      // ReferenceList
      // 
      typedef ::w3::xmlenc::ReferenceList ReferenceList_type;
      typedef ::xsd::cxx::tree::optional< ReferenceList_type > ReferenceList_optional;
      typedef ::xsd::cxx::tree::traits< ReferenceList_type, wchar_t > ReferenceList_traits;

      const ReferenceList_optional&
      ReferenceList () const;

      ReferenceList_optional&
      ReferenceList ();

      void
      ReferenceList (const ReferenceList_type& x);

      void
      ReferenceList (const ReferenceList_optional& x);

      void
      ReferenceList (::std::auto_ptr< ReferenceList_type > p);

      // CarriedKeyName
      // 
      typedef ::xml_schema::string CarriedKeyName_type;
      typedef ::xsd::cxx::tree::optional< CarriedKeyName_type > CarriedKeyName_optional;
      typedef ::xsd::cxx::tree::traits< CarriedKeyName_type, wchar_t > CarriedKeyName_traits;

      const CarriedKeyName_optional&
      CarriedKeyName () const;

      CarriedKeyName_optional&
      CarriedKeyName ();

      void
      CarriedKeyName (const CarriedKeyName_type& x);

      void
      CarriedKeyName (const CarriedKeyName_optional& x);

      void
      CarriedKeyName (::std::auto_ptr< CarriedKeyName_type > p);

      // Recipient
      // 
      typedef ::xml_schema::string Recipient_type;
      typedef ::xsd::cxx::tree::optional< Recipient_type > Recipient_optional;
      typedef ::xsd::cxx::tree::traits< Recipient_type, wchar_t > Recipient_traits;

      const Recipient_optional&
      Recipient () const;

      Recipient_optional&
      Recipient ();

      void
      Recipient (const Recipient_type& x);

      void
      Recipient (const Recipient_optional& x);

      void
      Recipient (::std::auto_ptr< Recipient_type > p);

      // Constructors.
      //
      EncryptedKeyType ();

      EncryptedKeyType (const CipherData_type&);

      EncryptedKeyType (::std::auto_ptr< CipherData_type >&);

      EncryptedKeyType (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      EncryptedKeyType (const EncryptedKeyType& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

      virtual EncryptedKeyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~EncryptedKeyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ReferenceList_optional ReferenceList_;
      CarriedKeyName_optional CarriedKeyName_;
      Recipient_optional Recipient_;
    };

    class AgreementMethodType: public ::xml_schema::type
    {
      public:
      // KA-Nonce
      // 
      typedef ::xml_schema::base64_binary KA_Nonce_type;
      typedef ::xsd::cxx::tree::optional< KA_Nonce_type > KA_Nonce_optional;
      typedef ::xsd::cxx::tree::traits< KA_Nonce_type, wchar_t > KA_Nonce_traits;

      const KA_Nonce_optional&
      KA_Nonce () const;

      KA_Nonce_optional&
      KA_Nonce ();

      void
      KA_Nonce (const KA_Nonce_type& x);

      void
      KA_Nonce (const KA_Nonce_optional& x);

      void
      KA_Nonce (::std::auto_ptr< KA_Nonce_type > p);

      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // OriginatorKeyInfo
      // 
      typedef ::w3::xmldsig::KeyInfoType OriginatorKeyInfo_type;
      typedef ::xsd::cxx::tree::optional< OriginatorKeyInfo_type > OriginatorKeyInfo_optional;
      typedef ::xsd::cxx::tree::traits< OriginatorKeyInfo_type, wchar_t > OriginatorKeyInfo_traits;

      const OriginatorKeyInfo_optional&
      OriginatorKeyInfo () const;

      OriginatorKeyInfo_optional&
      OriginatorKeyInfo ();

      void
      OriginatorKeyInfo (const OriginatorKeyInfo_type& x);

      void
      OriginatorKeyInfo (const OriginatorKeyInfo_optional& x);

      void
      OriginatorKeyInfo (::std::auto_ptr< OriginatorKeyInfo_type > p);

      // RecipientKeyInfo
      // 
      typedef ::w3::xmldsig::KeyInfoType RecipientKeyInfo_type;
      typedef ::xsd::cxx::tree::optional< RecipientKeyInfo_type > RecipientKeyInfo_optional;
      typedef ::xsd::cxx::tree::traits< RecipientKeyInfo_type, wchar_t > RecipientKeyInfo_traits;

      const RecipientKeyInfo_optional&
      RecipientKeyInfo () const;

      RecipientKeyInfo_optional&
      RecipientKeyInfo ();

      void
      RecipientKeyInfo (const RecipientKeyInfo_type& x);

      void
      RecipientKeyInfo (const RecipientKeyInfo_optional& x);

      void
      RecipientKeyInfo (::std::auto_ptr< RecipientKeyInfo_type > p);

      // Algorithm
      // 
      typedef ::xml_schema::uri Algorithm_type;
      typedef ::xsd::cxx::tree::traits< Algorithm_type, wchar_t > Algorithm_traits;

      const Algorithm_type&
      Algorithm () const;

      Algorithm_type&
      Algorithm ();

      void
      Algorithm (const Algorithm_type& x);

      void
      Algorithm (::std::auto_ptr< Algorithm_type > p);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      AgreementMethodType ();

      AgreementMethodType (const Algorithm_type&);

      AgreementMethodType (const ::xercesc::DOMElement& e,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      AgreementMethodType (const AgreementMethodType& x,
                           ::xml_schema::flags f = 0,
                           ::xml_schema::container* c = 0);

      virtual AgreementMethodType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AgreementMethodType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      KA_Nonce_optional KA_Nonce_;
      any_sequence any_;
      OriginatorKeyInfo_optional OriginatorKeyInfo_;
      RecipientKeyInfo_optional RecipientKeyInfo_;
      ::xsd::cxx::tree::one< Algorithm_type > Algorithm_;
    };

    class ReferenceType: public ::xml_schema::type
    {
      public:
      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // URI
      // 
      typedef ::xml_schema::uri URI_type;
      typedef ::xsd::cxx::tree::traits< URI_type, wchar_t > URI_traits;

      const URI_type&
      URI () const;

      URI_type&
      URI ();

      void
      URI (const URI_type& x);

      void
      URI (::std::auto_ptr< URI_type > p);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      ReferenceType ();

      ReferenceType (const URI_type&);

      ReferenceType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      ReferenceType (const ReferenceType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual ReferenceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ReferenceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
      ::xsd::cxx::tree::one< URI_type > URI_;
    };

    class EncryptionPropertiesType: public ::xml_schema::type
    {
      public:
      // EncryptionProperty
      // 
      typedef ::w3::xmlenc::EncryptionPropertyType EncryptionProperty_type;
      typedef ::xsd::cxx::tree::sequence< EncryptionProperty_type > EncryptionProperty_sequence;
      typedef EncryptionProperty_sequence::iterator EncryptionProperty_iterator;
      typedef EncryptionProperty_sequence::const_iterator EncryptionProperty_const_iterator;
      typedef ::xsd::cxx::tree::traits< EncryptionProperty_type, wchar_t > EncryptionProperty_traits;

      const EncryptionProperty_sequence&
      EncryptionProperty () const;

      EncryptionProperty_sequence&
      EncryptionProperty ();

      void
      EncryptionProperty (const EncryptionProperty_sequence& s);

      // Id
      // 
      typedef ::xml_schema::id Id_type;
      typedef ::xsd::cxx::tree::optional< Id_type > Id_optional;
      typedef ::xsd::cxx::tree::traits< Id_type, wchar_t > Id_traits;

      const Id_optional&
      Id () const;

      Id_optional&
      Id ();

      void
      Id (const Id_type& x);

      void
      Id (const Id_optional& x);

      void
      Id (::std::auto_ptr< Id_type > p);

      // Constructors.
      //
      EncryptionPropertiesType ();

      EncryptionPropertiesType (const ::xercesc::DOMElement& e,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      EncryptionPropertiesType (const EncryptionPropertiesType& x,
                                ::xml_schema::flags f = 0,
                                ::xml_schema::container* c = 0);

      virtual EncryptionPropertiesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~EncryptionPropertiesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      EncryptionProperty_sequence EncryptionProperty_;
      Id_optional Id_;
    };

    class EncryptionPropertyType: public ::xml_schema::type
    {
      public:
      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // Target
      // 
      typedef ::xml_schema::uri Target_type;
      typedef ::xsd::cxx::tree::optional< Target_type > Target_optional;
      typedef ::xsd::cxx::tree::traits< Target_type, wchar_t > Target_traits;

      const Target_optional&
      Target () const;

      Target_optional&
      Target ();

      void
      Target (const Target_type& x);

      void
      Target (const Target_optional& x);

      void
      Target (::std::auto_ptr< Target_type > p);

      // Id
      // 
      typedef ::xml_schema::id Id_type;
      typedef ::xsd::cxx::tree::optional< Id_type > Id_optional;
      typedef ::xsd::cxx::tree::traits< Id_type, wchar_t > Id_traits;

      const Id_optional&
      Id () const;

      Id_optional&
      Id ();

      void
      Id (const Id_type& x);

      void
      Id (const Id_optional& x);

      void
      Id (::std::auto_ptr< Id_type > p);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      EncryptionPropertyType ();

      EncryptionPropertyType (const ::xercesc::DOMElement& e,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      EncryptionPropertyType (const EncryptionPropertyType& x,
                              ::xml_schema::flags f = 0,
                              ::xml_schema::container* c = 0);

      virtual EncryptionPropertyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~EncryptionPropertyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
      Target_optional Target_;
      Id_optional Id_;
      any_attribute_set any_attribute_;
    };

    class ReferenceList: public ::xml_schema::type
    {
      public:
      // DataReference
      // 
      typedef ::w3::xmlenc::ReferenceType DataReference_type;
      typedef ::xsd::cxx::tree::sequence< DataReference_type > DataReference_sequence;
      typedef DataReference_sequence::iterator DataReference_iterator;
      typedef DataReference_sequence::const_iterator DataReference_const_iterator;
      typedef ::xsd::cxx::tree::traits< DataReference_type, wchar_t > DataReference_traits;

      const DataReference_sequence&
      DataReference () const;

      DataReference_sequence&
      DataReference ();

      void
      DataReference (const DataReference_sequence& s);

      // KeyReference
      // 
      typedef ::w3::xmlenc::ReferenceType KeyReference_type;
      typedef ::xsd::cxx::tree::sequence< KeyReference_type > KeyReference_sequence;
      typedef KeyReference_sequence::iterator KeyReference_iterator;
      typedef KeyReference_sequence::const_iterator KeyReference_const_iterator;
      typedef ::xsd::cxx::tree::traits< KeyReference_type, wchar_t > KeyReference_traits;

      const KeyReference_sequence&
      KeyReference () const;

      KeyReference_sequence&
      KeyReference ();

      void
      KeyReference (const KeyReference_sequence& s);

      // Constructors.
      //
      ReferenceList ();

      ReferenceList (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      ReferenceList (const ReferenceList& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual ReferenceList*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ReferenceList ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      DataReference_sequence DataReference_;
      KeyReference_sequence KeyReference_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace w3
{
  namespace xmlenc
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::std::wstring& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::std::wstring& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::std::wstring& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::std::istream& is,
                const ::std::wstring& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherDataType >
    CipherData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::std::wstring& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::std::wstring& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::std::wstring& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::std::istream& is,
                     const ::std::wstring& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::CipherReferenceType >
    CipherReference (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::std::wstring& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::std::wstring& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::std::wstring& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::std::istream& is,
                   const ::std::wstring& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedDataType >
    EncryptedData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::std::wstring& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::std::wstring& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::std::wstring& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream& is,
                  const ::std::wstring& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::std::istream& is,
                  const ::std::wstring& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptedKeyType >
    EncryptedKey (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::std::wstring& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::std::wstring& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::std::wstring& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream& is,
                     const ::std::wstring& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::std::istream& is,
                     const ::std::wstring& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::AgreementMethodType >
    AgreementMethod (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::std::wstring& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::std::wstring& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::std::wstring& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::std::istream& is,
                    const ::std::wstring& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::ReferenceList >
    ReferenceList_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::std::wstring& uri,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::std::wstring& uri,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::std::wstring& uri,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream& is,
                          const ::std::wstring& id,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream& is,
                          const ::std::wstring& id,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::std::istream& is,
                          const ::std::wstring& id,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::xercesc::InputSource& is,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::xercesc::InputSource& is,
                          ::xml_schema::error_handler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::xercesc::InputSource& is,
                          ::xercesc::DOMErrorHandler& eh,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (const ::xercesc::DOMDocument& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertiesType >
    EncryptionProperties (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                          ::xml_schema::flags f = 0,
                          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::std::wstring& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::std::wstring& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::std::wstring& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream& is,
                        const ::std::wstring& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::std::istream& is,
                        const ::std::wstring& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::w3::xmlenc::EncryptionPropertyType >
    EncryptionProperty (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace w3
{
  namespace xmlenc
  {
    void
    operator<< (::xercesc::DOMElement&, const EncryptedType&);

    void
    operator<< (::xercesc::DOMElement&, const EncryptionMethodType&);

    void
    operator<< (::xercesc::DOMElement&, const KeySizeType&);

    void
    operator<< (::xercesc::DOMAttr&, const KeySizeType&);

    void
    operator<< (::xml_schema::list_stream&,
                const KeySizeType&);

    // Serialize to std::ostream.
    //

    void
    CipherData (::std::ostream& os,
                const ::w3::xmlenc::CipherDataType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    CipherData (::std::ostream& os,
                const ::w3::xmlenc::CipherDataType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    CipherData (::std::ostream& os,
                const ::w3::xmlenc::CipherDataType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CipherData (::xercesc::XMLFormatTarget& ft,
                const ::w3::xmlenc::CipherDataType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    CipherData (::xercesc::XMLFormatTarget& ft,
                const ::w3::xmlenc::CipherDataType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    CipherData (::xercesc::XMLFormatTarget& ft,
                const ::w3::xmlenc::CipherDataType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CipherData (::xercesc::DOMDocument& d,
                const ::w3::xmlenc::CipherDataType& x,
                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CipherData (const ::w3::xmlenc::CipherDataType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const CipherDataType&);

    // Serialize to std::ostream.
    //

    void
    CipherReference (::std::ostream& os,
                     const ::w3::xmlenc::CipherReferenceType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    CipherReference (::std::ostream& os,
                     const ::w3::xmlenc::CipherReferenceType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    CipherReference (::std::ostream& os,
                     const ::w3::xmlenc::CipherReferenceType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    CipherReference (::xercesc::XMLFormatTarget& ft,
                     const ::w3::xmlenc::CipherReferenceType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    CipherReference (::xercesc::XMLFormatTarget& ft,
                     const ::w3::xmlenc::CipherReferenceType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    CipherReference (::xercesc::XMLFormatTarget& ft,
                     const ::w3::xmlenc::CipherReferenceType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    CipherReference (::xercesc::DOMDocument& d,
                     const ::w3::xmlenc::CipherReferenceType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    CipherReference (const ::w3::xmlenc::CipherReferenceType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const CipherReferenceType&);

    void
    operator<< (::xercesc::DOMElement&, const TransformsType&);

    // Serialize to std::ostream.
    //

    void
    EncryptedData (::std::ostream& os,
                   const ::w3::xmlenc::EncryptedDataType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    EncryptedData (::std::ostream& os,
                   const ::w3::xmlenc::EncryptedDataType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    EncryptedData (::std::ostream& os,
                   const ::w3::xmlenc::EncryptedDataType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EncryptedData (::xercesc::XMLFormatTarget& ft,
                   const ::w3::xmlenc::EncryptedDataType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    EncryptedData (::xercesc::XMLFormatTarget& ft,
                   const ::w3::xmlenc::EncryptedDataType& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    EncryptedData (::xercesc::XMLFormatTarget& ft,
                   const ::w3::xmlenc::EncryptedDataType& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EncryptedData (::xercesc::DOMDocument& d,
                   const ::w3::xmlenc::EncryptedDataType& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptedData (const ::w3::xmlenc::EncryptedDataType& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const EncryptedDataType&);

    // Serialize to std::ostream.
    //

    void
    EncryptedKey (::std::ostream& os,
                  const ::w3::xmlenc::EncryptedKeyType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    EncryptedKey (::std::ostream& os,
                  const ::w3::xmlenc::EncryptedKeyType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    EncryptedKey (::std::ostream& os,
                  const ::w3::xmlenc::EncryptedKeyType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EncryptedKey (::xercesc::XMLFormatTarget& ft,
                  const ::w3::xmlenc::EncryptedKeyType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    EncryptedKey (::xercesc::XMLFormatTarget& ft,
                  const ::w3::xmlenc::EncryptedKeyType& x, 
                  ::xml_schema::error_handler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    void
    EncryptedKey (::xercesc::XMLFormatTarget& ft,
                  const ::w3::xmlenc::EncryptedKeyType& x, 
                  ::xercesc::DOMErrorHandler& eh,
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  const ::std::wstring& e = L"UTF-8",
                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EncryptedKey (::xercesc::DOMDocument& d,
                  const ::w3::xmlenc::EncryptedKeyType& x,
                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptedKey (const ::w3::xmlenc::EncryptedKeyType& x, 
                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                  ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const EncryptedKeyType&);

    // Serialize to std::ostream.
    //

    void
    AgreementMethod (::std::ostream& os,
                     const ::w3::xmlenc::AgreementMethodType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AgreementMethod (::std::ostream& os,
                     const ::w3::xmlenc::AgreementMethodType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AgreementMethod (::std::ostream& os,
                     const ::w3::xmlenc::AgreementMethodType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AgreementMethod (::xercesc::XMLFormatTarget& ft,
                     const ::w3::xmlenc::AgreementMethodType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AgreementMethod (::xercesc::XMLFormatTarget& ft,
                     const ::w3::xmlenc::AgreementMethodType& x, 
                     ::xml_schema::error_handler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    void
    AgreementMethod (::xercesc::XMLFormatTarget& ft,
                     const ::w3::xmlenc::AgreementMethodType& x, 
                     ::xercesc::DOMErrorHandler& eh,
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     const ::std::wstring& e = L"UTF-8",
                     ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AgreementMethod (::xercesc::DOMDocument& d,
                     const ::w3::xmlenc::AgreementMethodType& x,
                     ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AgreementMethod (const ::w3::xmlenc::AgreementMethodType& x, 
                     const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                     ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AgreementMethodType&);

    // Serialize to std::ostream.
    //

    void
    ReferenceList_ (::std::ostream& os,
                    const ::w3::xmlenc::ReferenceList& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    ReferenceList_ (::std::ostream& os,
                    const ::w3::xmlenc::ReferenceList& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    ReferenceList_ (::std::ostream& os,
                    const ::w3::xmlenc::ReferenceList& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    ReferenceList_ (::xercesc::XMLFormatTarget& ft,
                    const ::w3::xmlenc::ReferenceList& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    ReferenceList_ (::xercesc::XMLFormatTarget& ft,
                    const ::w3::xmlenc::ReferenceList& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    ReferenceList_ (::xercesc::XMLFormatTarget& ft,
                    const ::w3::xmlenc::ReferenceList& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    ReferenceList_ (::xercesc::DOMDocument& d,
                    const ::w3::xmlenc::ReferenceList& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    ReferenceList_ (const ::w3::xmlenc::ReferenceList& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ReferenceType&);

    // Serialize to std::ostream.
    //

    void
    EncryptionProperties (::std::ostream& os,
                          const ::w3::xmlenc::EncryptionPropertiesType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    EncryptionProperties (::std::ostream& os,
                          const ::w3::xmlenc::EncryptionPropertiesType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    EncryptionProperties (::std::ostream& os,
                          const ::w3::xmlenc::EncryptionPropertiesType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EncryptionProperties (::xercesc::XMLFormatTarget& ft,
                          const ::w3::xmlenc::EncryptionPropertiesType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    EncryptionProperties (::xercesc::XMLFormatTarget& ft,
                          const ::w3::xmlenc::EncryptionPropertiesType& x, 
                          ::xml_schema::error_handler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    void
    EncryptionProperties (::xercesc::XMLFormatTarget& ft,
                          const ::w3::xmlenc::EncryptionPropertiesType& x, 
                          ::xercesc::DOMErrorHandler& eh,
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          const ::std::wstring& e = L"UTF-8",
                          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EncryptionProperties (::xercesc::DOMDocument& d,
                          const ::w3::xmlenc::EncryptionPropertiesType& x,
                          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptionProperties (const ::w3::xmlenc::EncryptionPropertiesType& x, 
                          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                          ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const EncryptionPropertiesType&);

    // Serialize to std::ostream.
    //

    void
    EncryptionProperty (::std::ostream& os,
                        const ::w3::xmlenc::EncryptionPropertyType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EncryptionProperty (::std::ostream& os,
                        const ::w3::xmlenc::EncryptionPropertyType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EncryptionProperty (::std::ostream& os,
                        const ::w3::xmlenc::EncryptionPropertyType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    EncryptionProperty (::xercesc::XMLFormatTarget& ft,
                        const ::w3::xmlenc::EncryptionPropertyType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EncryptionProperty (::xercesc::XMLFormatTarget& ft,
                        const ::w3::xmlenc::EncryptionPropertyType& x, 
                        ::xml_schema::error_handler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    void
    EncryptionProperty (::xercesc::XMLFormatTarget& ft,
                        const ::w3::xmlenc::EncryptionPropertyType& x, 
                        ::xercesc::DOMErrorHandler& eh,
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        const ::std::wstring& e = L"UTF-8",
                        ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    EncryptionProperty (::xercesc::DOMDocument& d,
                        const ::w3::xmlenc::EncryptionPropertyType& x,
                        ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    EncryptionProperty (const ::w3::xmlenc::EncryptionPropertyType& x, 
                        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                        ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const EncryptionPropertyType&);

    void
    operator<< (::xercesc::DOMElement&, const ReferenceList&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_XENC_SCHEMA_HXX
