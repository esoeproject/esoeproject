// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SESSIONDATA_SCHEMA_HXX
#define CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SESSIONDATA_SCHEMA_HXX

// Begin prologue.
//
#include "saml2/SAML2Defs.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "saml2/xsd/xml-schema.hxx"

// Forward declarations.
//
namespace middleware
{
  namespace SessionDataSchema
  {
    class SessionDataType;
    class IdentityType;
    class AttributeType;
    class DataType;
    class HandlerType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

namespace middleware
{
  namespace SessionDataSchema
  {
    class SessionDataType: public ::xml_schema::type
    {
      public:
      // Identity
      // 
      typedef ::middleware::SessionDataSchema::IdentityType Identity_type;
      typedef ::xsd::cxx::tree::sequence< Identity_type > Identity_sequence;
      typedef Identity_sequence::iterator Identity_iterator;
      typedef Identity_sequence::const_iterator Identity_const_iterator;
      typedef ::xsd::cxx::tree::traits< Identity_type, wchar_t > Identity_traits;

      const Identity_sequence&
      Identity () const;

      Identity_sequence&
      Identity ();

      void
      Identity (const Identity_sequence& s);

      // Constructors.
      //
      SessionDataType ();

      SessionDataType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      SessionDataType (const SessionDataType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual SessionDataType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SessionDataType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Identity_sequence Identity_;
    };

    class IdentityType: public ::xml_schema::type
    {
      public:
      // Attribute
      // 
      typedef ::middleware::SessionDataSchema::AttributeType Attribute_type;
      typedef ::xsd::cxx::tree::sequence< Attribute_type > Attribute_sequence;
      typedef Attribute_sequence::iterator Attribute_iterator;
      typedef Attribute_sequence::const_iterator Attribute_const_iterator;
      typedef ::xsd::cxx::tree::traits< Attribute_type, wchar_t > Attribute_traits;

      const Attribute_sequence&
      Attribute () const;

      Attribute_sequence&
      Attribute ();

      void
      Attribute (const Attribute_sequence& s);

      // Constructors.
      //
      IdentityType ();

      IdentityType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      IdentityType (const IdentityType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual IdentityType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~IdentityType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Attribute_sequence Attribute_;
    };

    class AttributeType: public ::xml_schema::type
    {
      public:
      // Handler
      // 
      typedef ::middleware::SessionDataSchema::HandlerType Handler_type;
      typedef ::xsd::cxx::tree::sequence< Handler_type > Handler_sequence;
      typedef Handler_sequence::iterator Handler_iterator;
      typedef Handler_sequence::const_iterator Handler_const_iterator;
      typedef ::xsd::cxx::tree::traits< Handler_type, wchar_t > Handler_traits;

      const Handler_sequence&
      Handler () const;

      Handler_sequence&
      Handler ();

      void
      Handler (const Handler_sequence& s);

      // Identifier
      // 
      typedef ::xml_schema::string Identifier_type;
      typedef ::xsd::cxx::tree::traits< Identifier_type, wchar_t > Identifier_traits;

      const Identifier_type&
      Identifier () const;

      Identifier_type&
      Identifier ();

      void
      Identifier (const Identifier_type& x);

      void
      Identifier (::std::auto_ptr< Identifier_type > p);

      // Type
      // 
      typedef ::middleware::SessionDataSchema::DataType Type_type;
      typedef ::xsd::cxx::tree::traits< Type_type, wchar_t > Type_traits;

      const Type_type&
      Type () const;

      Type_type&
      Type ();

      void
      Type (const Type_type& x);

      void
      Type (::std::auto_ptr< Type_type > p);

      // Singleton
      // 
      typedef ::xml_schema::boolean Singleton_type;
      typedef ::xsd::cxx::tree::traits< Singleton_type, wchar_t > Singleton_traits;

      const Singleton_type&
      Singleton () const;

      Singleton_type&
      Singleton ();

      void
      Singleton (const Singleton_type& x);

      // Constructors.
      //
      AttributeType ();

      AttributeType (const Identifier_type&,
                     const Type_type&,
                     const Singleton_type&);

      AttributeType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      AttributeType (const AttributeType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual AttributeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AttributeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Handler_sequence Handler_;
      ::xsd::cxx::tree::one< Identifier_type > Identifier_;
      ::xsd::cxx::tree::one< Type_type > Type_;
      ::xsd::cxx::tree::one< Singleton_type > Singleton_;
    };

    class DataType: public ::xml_schema::string
    {
      public:
      enum value
      {
        String,
        Integer,
        Float,
        Date,
        Boolean,
        Other
      };

      DataType ();

      DataType (value v);

      DataType (const wchar_t* v);

      DataType (const ::std::wstring& v);

      DataType (const ::xml_schema::string& v);

      DataType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      DataType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      DataType (const ::std::wstring& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      DataType (const DataType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual DataType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DataType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_DataType_convert ();
      }

      protected:
      value
      _xsd_DataType_convert () const;

      public:
      static const wchar_t* const _xsd_DataType_literals_[6];
      static const value _xsd_DataType_indexes_[6];
    };

    class HandlerType: public ::xml_schema::type
    {
      public:
      // Name
      // 
      typedef ::xml_schema::string Name_type;
      typedef ::xsd::cxx::tree::traits< Name_type, wchar_t > Name_traits;

      const Name_type&
      Name () const;

      Name_type&
      Name ();

      void
      Name (const Name_type& x);

      void
      Name (::std::auto_ptr< Name_type > p);

      // LocalIdentifier
      // 
      typedef ::xml_schema::string LocalIdentifier_type;
      typedef ::xsd::cxx::tree::traits< LocalIdentifier_type, wchar_t > LocalIdentifier_traits;

      const LocalIdentifier_type&
      LocalIdentifier () const;

      LocalIdentifier_type&
      LocalIdentifier ();

      void
      LocalIdentifier (const LocalIdentifier_type& x);

      void
      LocalIdentifier (::std::auto_ptr< LocalIdentifier_type > p);

      // Constructors.
      //
      HandlerType ();

      HandlerType (const Name_type&,
                   const LocalIdentifier_type&);

      HandlerType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      HandlerType (const HandlerType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual HandlerType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~HandlerType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Name_type > Name_;
      ::xsd::cxx::tree::one< LocalIdentifier_type > LocalIdentifier_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace middleware
{
  namespace SessionDataSchema
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::std::wstring& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::std::wstring& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::std::wstring& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::std::istream& is,
                 const ::std::wstring& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::SessionDataSchema::SessionDataType >
    SessionData (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace middleware
{
  namespace SessionDataSchema
  {
    // Serialize to std::ostream.
    //

    void
    SessionData (::std::ostream& os,
                 const ::middleware::SessionDataSchema::SessionDataType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    SessionData (::std::ostream& os,
                 const ::middleware::SessionDataSchema::SessionDataType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    SessionData (::std::ostream& os,
                 const ::middleware::SessionDataSchema::SessionDataType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SessionData (::xercesc::XMLFormatTarget& ft,
                 const ::middleware::SessionDataSchema::SessionDataType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    SessionData (::xercesc::XMLFormatTarget& ft,
                 const ::middleware::SessionDataSchema::SessionDataType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    SessionData (::xercesc::XMLFormatTarget& ft,
                 const ::middleware::SessionDataSchema::SessionDataType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SessionData (::xercesc::DOMDocument& d,
                 const ::middleware::SessionDataSchema::SessionDataType& x,
                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SessionData (const ::middleware::SessionDataSchema::SessionDataType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SessionDataType&);

    void
    operator<< (::xercesc::DOMElement&, const IdentityType&);

    void
    operator<< (::xercesc::DOMElement&, const AttributeType&);

    void
    operator<< (::xercesc::DOMElement&, const DataType&);

    void
    operator<< (::xercesc::DOMAttr&, const DataType&);

    void
    operator<< (::xml_schema::list_stream&,
                const DataType&);

    void
    operator<< (::xercesc::DOMElement&, const HandlerType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SESSIONDATA_SCHEMA_HXX
