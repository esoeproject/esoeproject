// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_LXACML_SCHEMA_CONTEXT_HXX
#define CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_LXACML_SCHEMA_CONTEXT_HXX

// Begin prologue.
//
#include "saml2/SAML2Defs.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "saml2/xsd/xml-schema.hxx"

// Forward declarations.
//
namespace middleware
{
  namespace lxacmlContextSchema
  {
    class RequestType;
    class SubjectType;
    class ResourceType;
    class ActionType;
    class AttributeType;
    class AttributeValueType;
    class ResponseType;
    class ResultType;
    class DecisionType;
    class StatusType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "lxacml-schema.hxx"

namespace middleware
{
  namespace lxacmlContextSchema
  {
    class RequestType: public ::xml_schema::type
    {
      public:
      // Subject
      // 
      typedef ::middleware::lxacmlContextSchema::SubjectType Subject_type;
      typedef ::xsd::cxx::tree::traits< Subject_type, wchar_t > Subject_traits;

      const Subject_type&
      Subject () const;

      Subject_type&
      Subject ();

      void
      Subject (const Subject_type& x);

      void
      Subject (::std::auto_ptr< Subject_type > p);

      // Resource
      // 
      typedef ::middleware::lxacmlContextSchema::ResourceType Resource_type;
      typedef ::xsd::cxx::tree::traits< Resource_type, wchar_t > Resource_traits;

      const Resource_type&
      Resource () const;

      Resource_type&
      Resource ();

      void
      Resource (const Resource_type& x);

      void
      Resource (::std::auto_ptr< Resource_type > p);

      // Action
      // 
      typedef ::middleware::lxacmlContextSchema::ActionType Action_type;
      typedef ::xsd::cxx::tree::optional< Action_type > Action_optional;
      typedef ::xsd::cxx::tree::traits< Action_type, wchar_t > Action_traits;

      const Action_optional&
      Action () const;

      Action_optional&
      Action ();

      void
      Action (const Action_type& x);

      void
      Action (const Action_optional& x);

      void
      Action (::std::auto_ptr< Action_type > p);

      // Constructors.
      //
      RequestType ();

      RequestType (const Subject_type&,
                   const Resource_type&);

      RequestType (::std::auto_ptr< Subject_type >&,
                   ::std::auto_ptr< Resource_type >&);

      RequestType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      RequestType (const RequestType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual RequestType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RequestType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Subject_type > Subject_;
      ::xsd::cxx::tree::one< Resource_type > Resource_;
      Action_optional Action_;
    };

    class SubjectType: public ::xml_schema::type
    {
      public:
      // Attribute
      // 
      typedef ::middleware::lxacmlContextSchema::AttributeType Attribute_type;
      typedef ::xsd::cxx::tree::traits< Attribute_type, wchar_t > Attribute_traits;

      const Attribute_type&
      Attribute () const;

      Attribute_type&
      Attribute ();

      void
      Attribute (const Attribute_type& x);

      void
      Attribute (::std::auto_ptr< Attribute_type > p);

      // Constructors.
      //
      SubjectType ();

      SubjectType (const Attribute_type&);

      SubjectType (::std::auto_ptr< Attribute_type >&);

      SubjectType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      SubjectType (const SubjectType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual SubjectType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SubjectType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Attribute_type > Attribute_;
    };

    class ResourceType: public ::xml_schema::type
    {
      public:
      // Attribute
      // 
      typedef ::middleware::lxacmlContextSchema::AttributeType Attribute_type;
      typedef ::xsd::cxx::tree::traits< Attribute_type, wchar_t > Attribute_traits;

      const Attribute_type&
      Attribute () const;

      Attribute_type&
      Attribute ();

      void
      Attribute (const Attribute_type& x);

      void
      Attribute (::std::auto_ptr< Attribute_type > p);

      // Constructors.
      //
      ResourceType ();

      ResourceType (const Attribute_type&);

      ResourceType (::std::auto_ptr< Attribute_type >&);

      ResourceType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      ResourceType (const ResourceType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual ResourceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ResourceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Attribute_type > Attribute_;
    };

    class ActionType: public ::xml_schema::type
    {
      public:
      // Attribute
      // 
      typedef ::middleware::lxacmlContextSchema::AttributeType Attribute_type;
      typedef ::xsd::cxx::tree::traits< Attribute_type, wchar_t > Attribute_traits;

      const Attribute_type&
      Attribute () const;

      Attribute_type&
      Attribute ();

      void
      Attribute (const Attribute_type& x);

      void
      Attribute (::std::auto_ptr< Attribute_type > p);

      // Constructors.
      //
      ActionType ();

      ActionType (const Attribute_type&);

      ActionType (::std::auto_ptr< Attribute_type >&);

      ActionType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      ActionType (const ActionType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual ActionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ActionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Attribute_type > Attribute_;
    };

    class AttributeType: public ::xml_schema::type
    {
      public:
      // AttributeValue
      // 
      typedef ::middleware::lxacmlContextSchema::AttributeValueType AttributeValue_type;
      typedef ::xsd::cxx::tree::traits< AttributeValue_type, wchar_t > AttributeValue_traits;

      const AttributeValue_type&
      AttributeValue () const;

      AttributeValue_type&
      AttributeValue ();

      void
      AttributeValue (const AttributeValue_type& x);

      void
      AttributeValue (::std::auto_ptr< AttributeValue_type > p);

      // Issuer
      // 
      typedef ::xml_schema::string Issuer_type;
      typedef ::xsd::cxx::tree::optional< Issuer_type > Issuer_optional;
      typedef ::xsd::cxx::tree::traits< Issuer_type, wchar_t > Issuer_traits;

      const Issuer_optional&
      Issuer () const;

      Issuer_optional&
      Issuer ();

      void
      Issuer (const Issuer_type& x);

      void
      Issuer (const Issuer_optional& x);

      void
      Issuer (::std::auto_ptr< Issuer_type > p);

      // Constructors.
      //
      AttributeType ();

      AttributeType (const AttributeValue_type&);

      AttributeType (::std::auto_ptr< AttributeValue_type >&);

      AttributeType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      AttributeType (const AttributeType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual AttributeType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AttributeType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< AttributeValue_type > AttributeValue_;
      Issuer_optional Issuer_;
    };

    class ResponseType: public ::xml_schema::type
    {
      public:
      // Result
      // 
      typedef ::middleware::lxacmlContextSchema::ResultType Result_type;
      typedef ::xsd::cxx::tree::traits< Result_type, wchar_t > Result_traits;

      const Result_type&
      Result () const;

      Result_type&
      Result ();

      void
      Result (const Result_type& x);

      void
      Result (::std::auto_ptr< Result_type > p);

      // Constructors.
      //
      ResponseType ();

      ResponseType (const Result_type&);

      ResponseType (::std::auto_ptr< Result_type >&);

      ResponseType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      ResponseType (const ResponseType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual ResponseType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ResponseType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Result_type > Result_;
    };

    class ResultType: public ::xml_schema::type
    {
      public:
      // Decision
      // 
      typedef ::middleware::lxacmlContextSchema::DecisionType Decision_type;
      typedef ::xsd::cxx::tree::traits< Decision_type, wchar_t > Decision_traits;

      const Decision_type&
      Decision () const;

      Decision_type&
      Decision ();

      void
      Decision (const Decision_type& x);

      void
      Decision (::std::auto_ptr< Decision_type > p);

      // Status
      // 
      typedef ::middleware::lxacmlContextSchema::StatusType Status_type;
      typedef ::xsd::cxx::tree::optional< Status_type > Status_optional;
      typedef ::xsd::cxx::tree::traits< Status_type, wchar_t > Status_traits;

      const Status_optional&
      Status () const;

      Status_optional&
      Status ();

      void
      Status (const Status_type& x);

      void
      Status (const Status_optional& x);

      void
      Status (::std::auto_ptr< Status_type > p);

      // Obligations
      // 
      typedef ::middleware::lxacmlSchema::ObligationsType Obligations_type;
      typedef ::xsd::cxx::tree::traits< Obligations_type, wchar_t > Obligations_traits;

      const Obligations_type&
      Obligations () const;

      Obligations_type&
      Obligations ();

      void
      Obligations (const Obligations_type& x);

      void
      Obligations (::std::auto_ptr< Obligations_type > p);

      // Constructors.
      //
      ResultType ();

      ResultType (const Decision_type&,
                  const Obligations_type&);

      ResultType (const Decision_type&,
                  ::std::auto_ptr< Obligations_type >&);

      ResultType (::std::auto_ptr< Decision_type >&,
                  ::std::auto_ptr< Obligations_type >&);

      ResultType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      ResultType (const ResultType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual ResultType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ResultType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Decision_type > Decision_;
      Status_optional Status_;
      ::xsd::cxx::tree::one< Obligations_type > Obligations_;
    };

    class DecisionType: public ::xml_schema::string
    {
      public:
      enum value
      {
        Permit,
        Deny
      };

      DecisionType ();

      DecisionType (value v);

      DecisionType (const wchar_t* v);

      DecisionType (const ::std::wstring& v);

      DecisionType (const ::xml_schema::string& v);

      DecisionType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      DecisionType (const ::xercesc::DOMAttr& a,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      DecisionType (const ::std::wstring& s,
                    const ::xercesc::DOMElement* e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      DecisionType (const DecisionType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual DecisionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      DecisionType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_DecisionType_convert ();
      }

      protected:
      value
      _xsd_DecisionType_convert () const;

      public:
      static const wchar_t* const _xsd_DecisionType_literals_[2];
      static const value _xsd_DecisionType_indexes_[2];
    };

    class StatusType: public ::xml_schema::type
    {
      public:
      // StatusMessage
      // 
      typedef ::xml_schema::string StatusMessage_type;
      typedef ::xsd::cxx::tree::optional< StatusMessage_type > StatusMessage_optional;
      typedef ::xsd::cxx::tree::traits< StatusMessage_type, wchar_t > StatusMessage_traits;

      const StatusMessage_optional&
      StatusMessage () const;

      StatusMessage_optional&
      StatusMessage ();

      void
      StatusMessage (const StatusMessage_type& x);

      void
      StatusMessage (const StatusMessage_optional& x);

      void
      StatusMessage (::std::auto_ptr< StatusMessage_type > p);

      // Constructors.
      //
      StatusType ();

      StatusType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      StatusType (const StatusType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual StatusType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~StatusType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      StatusMessage_optional StatusMessage_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace middleware
{
  namespace lxacmlContextSchema
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::std::wstring& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::std::wstring& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::std::wstring& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             const ::std::wstring& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::std::wstring& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::std::wstring& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::std::wstring& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             const ::std::wstring& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::std::wstring& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::std::wstring& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::std::wstring& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::wstring& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::std::wstring& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::std::wstring& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::std::wstring& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               const ::std::wstring& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::std::wstring& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::std::wstring& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::std::wstring& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::std::wstring& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::std::wstring& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::std::wstring& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              const ::std::wstring& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::std::wstring& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::std::wstring& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::std::wstring& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              const ::std::wstring& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::wstring& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::wstring& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::wstring& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::wstring& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::wstring& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace middleware
{
  namespace lxacmlContextSchema
  {
    // Serialize to std::ostream.
    //

    void
    Request (::std::ostream& os,
             const ::middleware::lxacmlContextSchema::RequestType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Request (::std::ostream& os,
             const ::middleware::lxacmlContextSchema::RequestType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Request (::std::ostream& os,
             const ::middleware::lxacmlContextSchema::RequestType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Request (::xercesc::XMLFormatTarget& ft,
             const ::middleware::lxacmlContextSchema::RequestType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Request (::xercesc::XMLFormatTarget& ft,
             const ::middleware::lxacmlContextSchema::RequestType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Request (::xercesc::XMLFormatTarget& ft,
             const ::middleware::lxacmlContextSchema::RequestType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Request (::xercesc::DOMDocument& d,
             const ::middleware::lxacmlContextSchema::RequestType& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Request (const ::middleware::lxacmlContextSchema::RequestType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const RequestType&);

    // Serialize to std::ostream.
    //

    void
    Subject (::std::ostream& os,
             const ::middleware::lxacmlContextSchema::SubjectType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Subject (::std::ostream& os,
             const ::middleware::lxacmlContextSchema::SubjectType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Subject (::std::ostream& os,
             const ::middleware::lxacmlContextSchema::SubjectType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Subject (::xercesc::XMLFormatTarget& ft,
             const ::middleware::lxacmlContextSchema::SubjectType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Subject (::xercesc::XMLFormatTarget& ft,
             const ::middleware::lxacmlContextSchema::SubjectType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Subject (::xercesc::XMLFormatTarget& ft,
             const ::middleware::lxacmlContextSchema::SubjectType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Subject (::xercesc::DOMDocument& d,
             const ::middleware::lxacmlContextSchema::SubjectType& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Subject (const ::middleware::lxacmlContextSchema::SubjectType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SubjectType&);

    // Serialize to std::ostream.
    //

    void
    Resource (::std::ostream& os,
              const ::middleware::lxacmlContextSchema::ResourceType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Resource (::std::ostream& os,
              const ::middleware::lxacmlContextSchema::ResourceType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Resource (::std::ostream& os,
              const ::middleware::lxacmlContextSchema::ResourceType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Resource (::xercesc::XMLFormatTarget& ft,
              const ::middleware::lxacmlContextSchema::ResourceType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Resource (::xercesc::XMLFormatTarget& ft,
              const ::middleware::lxacmlContextSchema::ResourceType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Resource (::xercesc::XMLFormatTarget& ft,
              const ::middleware::lxacmlContextSchema::ResourceType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Resource (::xercesc::DOMDocument& d,
              const ::middleware::lxacmlContextSchema::ResourceType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Resource (const ::middleware::lxacmlContextSchema::ResourceType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ResourceType&);

    // Serialize to std::ostream.
    //

    void
    Action (::std::ostream& os,
            const ::middleware::lxacmlContextSchema::ActionType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Action (::std::ostream& os,
            const ::middleware::lxacmlContextSchema::ActionType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Action (::std::ostream& os,
            const ::middleware::lxacmlContextSchema::ActionType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Action (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlContextSchema::ActionType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Action (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlContextSchema::ActionType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Action (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlContextSchema::ActionType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Action (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlContextSchema::ActionType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Action (const ::middleware::lxacmlContextSchema::ActionType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ActionType&);

    // Serialize to std::ostream.
    //

    void
    Attribute (::std::ostream& os,
               const ::middleware::lxacmlContextSchema::AttributeType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Attribute (::std::ostream& os,
               const ::middleware::lxacmlContextSchema::AttributeType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Attribute (::std::ostream& os,
               const ::middleware::lxacmlContextSchema::AttributeType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Attribute (::xercesc::XMLFormatTarget& ft,
               const ::middleware::lxacmlContextSchema::AttributeType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Attribute (::xercesc::XMLFormatTarget& ft,
               const ::middleware::lxacmlContextSchema::AttributeType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Attribute (::xercesc::XMLFormatTarget& ft,
               const ::middleware::lxacmlContextSchema::AttributeType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Attribute (::xercesc::DOMDocument& d,
               const ::middleware::lxacmlContextSchema::AttributeType& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Attribute (const ::middleware::lxacmlContextSchema::AttributeType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AttributeType&);

    // Serialize to std::ostream.
    //

    void
    AttributeValue (::std::ostream& os,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeValue (::std::ostream& os,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeValue (::std::ostream& os,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AttributeValue (::xercesc::XMLFormatTarget& ft,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeValue (::xercesc::XMLFormatTarget& ft,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeValue (::xercesc::XMLFormatTarget& ft,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AttributeValue (::xercesc::DOMDocument& d,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeValue (const ::middleware::lxacmlContextSchema::AttributeValueType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    // Serialize to std::ostream.
    //

    void
    Response (::std::ostream& os,
              const ::middleware::lxacmlContextSchema::ResponseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Response (::std::ostream& os,
              const ::middleware::lxacmlContextSchema::ResponseType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Response (::std::ostream& os,
              const ::middleware::lxacmlContextSchema::ResponseType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Response (::xercesc::XMLFormatTarget& ft,
              const ::middleware::lxacmlContextSchema::ResponseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Response (::xercesc::XMLFormatTarget& ft,
              const ::middleware::lxacmlContextSchema::ResponseType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Response (::xercesc::XMLFormatTarget& ft,
              const ::middleware::lxacmlContextSchema::ResponseType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Response (::xercesc::DOMDocument& d,
              const ::middleware::lxacmlContextSchema::ResponseType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Response (const ::middleware::lxacmlContextSchema::ResponseType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ResponseType&);

    // Serialize to std::ostream.
    //

    void
    Result (::std::ostream& os,
            const ::middleware::lxacmlContextSchema::ResultType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Result (::std::ostream& os,
            const ::middleware::lxacmlContextSchema::ResultType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Result (::std::ostream& os,
            const ::middleware::lxacmlContextSchema::ResultType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Result (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlContextSchema::ResultType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Result (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlContextSchema::ResultType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Result (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlContextSchema::ResultType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Result (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlContextSchema::ResultType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Result (const ::middleware::lxacmlContextSchema::ResultType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ResultType&);

    // Serialize to std::ostream.
    //

    void
    Decision (::std::ostream& os,
              const ::middleware::lxacmlContextSchema::DecisionType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Decision (::std::ostream& os,
              const ::middleware::lxacmlContextSchema::DecisionType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Decision (::std::ostream& os,
              const ::middleware::lxacmlContextSchema::DecisionType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Decision (::xercesc::XMLFormatTarget& ft,
              const ::middleware::lxacmlContextSchema::DecisionType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Decision (::xercesc::XMLFormatTarget& ft,
              const ::middleware::lxacmlContextSchema::DecisionType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Decision (::xercesc::XMLFormatTarget& ft,
              const ::middleware::lxacmlContextSchema::DecisionType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Decision (::xercesc::DOMDocument& d,
              const ::middleware::lxacmlContextSchema::DecisionType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Decision (const ::middleware::lxacmlContextSchema::DecisionType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const DecisionType&);

    void
    operator<< (::xercesc::DOMAttr&, const DecisionType&);

    void
    operator<< (::xml_schema::list_stream&,
                const DecisionType&);

    // Serialize to std::ostream.
    //

    void
    Status (::std::ostream& os,
            const ::middleware::lxacmlContextSchema::StatusType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Status (::std::ostream& os,
            const ::middleware::lxacmlContextSchema::StatusType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Status (::std::ostream& os,
            const ::middleware::lxacmlContextSchema::StatusType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Status (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlContextSchema::StatusType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Status (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlContextSchema::StatusType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Status (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlContextSchema::StatusType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Status (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlContextSchema::StatusType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Status (const ::middleware::lxacmlContextSchema::StatusType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const StatusType&);

    // Serialize to std::ostream.
    //

    void
    StatusMessage (::std::ostream& os,
                   const ::xml_schema::string& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    StatusMessage (::std::ostream& os,
                   const ::xml_schema::string& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    StatusMessage (::std::ostream& os,
                   const ::xml_schema::string& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    StatusMessage (::xercesc::XMLFormatTarget& ft,
                   const ::xml_schema::string& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    StatusMessage (::xercesc::XMLFormatTarget& ft,
                   const ::xml_schema::string& x, 
                   ::xml_schema::error_handler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    void
    StatusMessage (::xercesc::XMLFormatTarget& ft,
                   const ::xml_schema::string& x, 
                   ::xercesc::DOMErrorHandler& eh,
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   const ::std::wstring& e = L"UTF-8",
                   ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    StatusMessage (::xercesc::DOMDocument& d,
                   const ::xml_schema::string& x,
                   ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StatusMessage (const ::xml_schema::string& x, 
                   const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                   ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
#include "saml2/xsd/xml-schema-custom-attributevaluetype.h"
//
// End epilogue.

#endif // CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_LXACML_SCHEMA_CONTEXT_HXX
