// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "saml2/bindings/delegated-schema-saml-protocol.hxx"

namespace middleware
{
  namespace DelegatedProtocolSchema
  {
    // RegisterPrincipalRequestType
    // 

    const RegisterPrincipalRequestType::principalAuthnIdentifier_type& RegisterPrincipalRequestType::
    principalAuthnIdentifier () const
    {
      return this->principalAuthnIdentifier_.get ();
    }

    RegisterPrincipalRequestType::principalAuthnIdentifier_type& RegisterPrincipalRequestType::
    principalAuthnIdentifier ()
    {
      return this->principalAuthnIdentifier_.get ();
    }

    void RegisterPrincipalRequestType::
    principalAuthnIdentifier (const principalAuthnIdentifier_type& x)
    {
      this->principalAuthnIdentifier_.set (x);
    }

    void RegisterPrincipalRequestType::
    principalAuthnIdentifier (::std::auto_ptr< principalAuthnIdentifier_type > x)
    {
      this->principalAuthnIdentifier_.set (x);
    }

    const RegisterPrincipalRequestType::Attribute_sequence& RegisterPrincipalRequestType::
    Attribute () const
    {
      return this->Attribute_;
    }

    RegisterPrincipalRequestType::Attribute_sequence& RegisterPrincipalRequestType::
    Attribute ()
    {
      return this->Attribute_;
    }

    void RegisterPrincipalRequestType::
    Attribute (const Attribute_sequence& s)
    {
      this->Attribute_ = s;
    }

    const RegisterPrincipalRequestType::EncryptedAttribute_sequence& RegisterPrincipalRequestType::
    EncryptedAttribute () const
    {
      return this->EncryptedAttribute_;
    }

    RegisterPrincipalRequestType::EncryptedAttribute_sequence& RegisterPrincipalRequestType::
    EncryptedAttribute ()
    {
      return this->EncryptedAttribute_;
    }

    void RegisterPrincipalRequestType::
    EncryptedAttribute (const EncryptedAttribute_sequence& s)
    {
      this->EncryptedAttribute_ = s;
    }

    const RegisterPrincipalRequestType::Source_type& RegisterPrincipalRequestType::
    Source () const
    {
      return this->Source_.get ();
    }

    RegisterPrincipalRequestType::Source_type& RegisterPrincipalRequestType::
    Source ()
    {
      return this->Source_.get ();
    }

    void RegisterPrincipalRequestType::
    Source (const Source_type& x)
    {
      this->Source_.set (x);
    }

    void RegisterPrincipalRequestType::
    Source (::std::auto_ptr< Source_type > x)
    {
      this->Source_.set (x);
    }


    // RegisterPrincipalResponseType
    // 

    const RegisterPrincipalResponseType::sessionIdentifier_optional& RegisterPrincipalResponseType::
    sessionIdentifier () const
    {
      return this->sessionIdentifier_;
    }

    RegisterPrincipalResponseType::sessionIdentifier_optional& RegisterPrincipalResponseType::
    sessionIdentifier ()
    {
      return this->sessionIdentifier_;
    }

    void RegisterPrincipalResponseType::
    sessionIdentifier (const sessionIdentifier_type& x)
    {
      this->sessionIdentifier_.set (x);
    }

    void RegisterPrincipalResponseType::
    sessionIdentifier (const sessionIdentifier_optional& x)
    {
      this->sessionIdentifier_ = x;
    }

    void RegisterPrincipalResponseType::
    sessionIdentifier (::std::auto_ptr< sessionIdentifier_type > x)
    {
      this->sessionIdentifier_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace DelegatedProtocolSchema
  {
    // RegisterPrincipalRequestType
    //

    RegisterPrincipalRequestType::
    RegisterPrincipalRequestType ()
    : ::saml2::protocol::RequestAbstractType (),
      principalAuthnIdentifier_ (::xml_schema::flags (), this),
      Attribute_ (::xml_schema::flags (), this),
      EncryptedAttribute_ (::xml_schema::flags (), this),
      Source_ (::xml_schema::flags (), this)
    {
    }

    RegisterPrincipalRequestType::
    RegisterPrincipalRequestType (const ID_type& ID,
                                  const Version_type& Version,
                                  const IssueInstant_type& IssueInstant,
                                  const principalAuthnIdentifier_type& principalAuthnIdentifier,
                                  const Source_type& Source)
    : ::saml2::protocol::RequestAbstractType (ID,
                                              Version,
                                              IssueInstant),
      principalAuthnIdentifier_ (principalAuthnIdentifier, ::xml_schema::flags (), this),
      Attribute_ (::xml_schema::flags (), this),
      EncryptedAttribute_ (::xml_schema::flags (), this),
      Source_ (Source, ::xml_schema::flags (), this)
    {
    }

    RegisterPrincipalRequestType::
    RegisterPrincipalRequestType (const ID_type& ID,
                                  const Version_type& Version,
                                  const IssueInstant_type& IssueInstant,
                                  ::std::auto_ptr< principalAuthnIdentifier_type >& principalAuthnIdentifier,
                                  const Source_type& Source)
    : ::saml2::protocol::RequestAbstractType (ID,
                                              Version,
                                              IssueInstant),
      principalAuthnIdentifier_ (principalAuthnIdentifier, ::xml_schema::flags (), this),
      Attribute_ (::xml_schema::flags (), this),
      EncryptedAttribute_ (::xml_schema::flags (), this),
      Source_ (Source, ::xml_schema::flags (), this)
    {
    }

    RegisterPrincipalRequestType::
    RegisterPrincipalRequestType (const RegisterPrincipalRequestType& x,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::saml2::protocol::RequestAbstractType (x, f, c),
      principalAuthnIdentifier_ (x.principalAuthnIdentifier_, f, this),
      Attribute_ (x.Attribute_, f, this),
      EncryptedAttribute_ (x.EncryptedAttribute_, f, this),
      Source_ (x.Source_, f, this)
    {
    }

    RegisterPrincipalRequestType::
    RegisterPrincipalRequestType (const ::xercesc::DOMElement& e,
                                  ::xml_schema::flags f,
                                  ::xml_schema::container* c)
    : ::saml2::protocol::RequestAbstractType (e, f | ::xml_schema::flags::base, c),
      principalAuthnIdentifier_ (f, this),
      Attribute_ (f, this),
      EncryptedAttribute_ (f, this),
      Source_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void RegisterPrincipalRequestType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::saml2::protocol::RequestAbstractType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // principalAuthnIdentifier
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"principalAuthnIdentifier",
              L"http://www.qut.com/middleware/DelegatedProtocolSchema",
              &::xsd::cxx::tree::factory_impl< principalAuthnIdentifier_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!principalAuthnIdentifier_.present ())
            {
              ::std::auto_ptr< principalAuthnIdentifier_type > r (
                dynamic_cast< principalAuthnIdentifier_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->principalAuthnIdentifier_.set (r);
              continue;
            }
          }
        }

        // Attribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Attribute",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              &::xsd::cxx::tree::factory_impl< Attribute_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< Attribute_type > r (
              dynamic_cast< Attribute_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->Attribute_.push_back (r);
            continue;
          }
        }

        // EncryptedAttribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"EncryptedAttribute",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              &::xsd::cxx::tree::factory_impl< EncryptedAttribute_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            ::std::auto_ptr< EncryptedAttribute_type > r (
              dynamic_cast< EncryptedAttribute_type* > (tmp.get ()));

            if (r.get ())
              tmp.release ();
            else
              throw ::xsd::cxx::tree::not_derived< wchar_t > ();

            this->EncryptedAttribute_.push_back (r);
            continue;
          }
        }

        break;
      }

      if (!principalAuthnIdentifier_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"principalAuthnIdentifier",
          L"http://www.qut.com/middleware/DelegatedProtocolSchema");
      }

      p.reset_attributes ();

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Source" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Source_type > r (
            Source_traits::create (i, f, this));

          this->Source_.set (r);
          continue;
        }
      }

      if (!Source_.present ())
      {
        throw ::xsd::cxx::tree::expected_attribute< wchar_t > (
          L"Source",
          L"");
      }
    }

    RegisterPrincipalRequestType* RegisterPrincipalRequestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RegisterPrincipalRequestType (*this, f, c);
    }

    RegisterPrincipalRequestType::
    ~RegisterPrincipalRequestType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RegisterPrincipalRequestType >
    _xsd_RegisterPrincipalRequestType_type_factory_init (
      L"RegisterPrincipalRequestType",
      L"http://www.qut.com/middleware/DelegatedProtocolSchema");

    // RegisterPrincipalResponseType
    //

    RegisterPrincipalResponseType::
    RegisterPrincipalResponseType ()
    : ::saml2::protocol::StatusResponseType (),
      sessionIdentifier_ (::xml_schema::flags (), this)
    {
    }

    RegisterPrincipalResponseType::
    RegisterPrincipalResponseType (const Status_type& Status,
                                   const ID_type& ID,
                                   const Version_type& Version,
                                   const IssueInstant_type& IssueInstant)
    : ::saml2::protocol::StatusResponseType (Status,
                                             ID,
                                             Version,
                                             IssueInstant),
      sessionIdentifier_ (::xml_schema::flags (), this)
    {
    }

    RegisterPrincipalResponseType::
    RegisterPrincipalResponseType (::std::auto_ptr< Status_type >& Status,
                                   const ID_type& ID,
                                   const Version_type& Version,
                                   const IssueInstant_type& IssueInstant)
    : ::saml2::protocol::StatusResponseType (Status,
                                             ID,
                                             Version,
                                             IssueInstant),
      sessionIdentifier_ (::xml_schema::flags (), this)
    {
    }

    RegisterPrincipalResponseType::
    RegisterPrincipalResponseType (const RegisterPrincipalResponseType& x,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::saml2::protocol::StatusResponseType (x, f, c),
      sessionIdentifier_ (x.sessionIdentifier_, f, this)
    {
    }

    RegisterPrincipalResponseType::
    RegisterPrincipalResponseType (const ::xercesc::DOMElement& e,
                                   ::xml_schema::flags f,
                                   ::xml_schema::container* c)
    : ::saml2::protocol::StatusResponseType (e, f | ::xml_schema::flags::base, c),
      sessionIdentifier_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void RegisterPrincipalResponseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      this->::saml2::protocol::StatusResponseType::parse (p, f);

      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // sessionIdentifier
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"sessionIdentifier",
              L"http://www.qut.com/middleware/DelegatedProtocolSchema",
              &::xsd::cxx::tree::factory_impl< sessionIdentifier_type >,
              false, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->sessionIdentifier_)
            {
              ::std::auto_ptr< sessionIdentifier_type > r (
                dynamic_cast< sessionIdentifier_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->sessionIdentifier_.set (r);
              continue;
            }
          }
        }

        break;
      }
    }

    RegisterPrincipalResponseType* RegisterPrincipalResponseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RegisterPrincipalResponseType (*this, f, c);
    }

    RegisterPrincipalResponseType::
    ~RegisterPrincipalResponseType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RegisterPrincipalResponseType >
    _xsd_RegisterPrincipalResponseType_type_factory_init (
      L"RegisterPrincipalResponseType",
      L"http://www.qut.com/middleware/DelegatedProtocolSchema");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace DelegatedProtocolSchema
  {
    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (const ::std::wstring& u,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType > r (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (const ::std::wstring& u,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType > r (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (const ::std::wstring& u,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType > r (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::std::istream& is,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::std::istream& is,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::std::istream& is,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::std::istream& is,
                              const ::std::wstring& sid,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::std::istream& is,
                              const ::std::wstring& sid,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::std::istream& is,
                              const ::std::wstring& sid,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::xercesc::InputSource& i,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType > r (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::xercesc::InputSource& i,
                              ::xml_schema::error_handler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType > r (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::xercesc::InputSource& i,
                              ::xercesc::DOMErrorHandler& h,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType > r (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType > r (
          ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"RegisterPrincipalRequest",
          L"http://www.qut.com/middleware/DelegatedProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType > r (
          dynamic_cast< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"RegisterPrincipalRequest",
        L"http://www.qut.com/middleware/DelegatedProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >
    RegisterPrincipalRequest (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                              ::xml_schema::flags f,
                              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"RegisterPrincipalRequest",
          L"http://www.qut.com/middleware/DelegatedProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType > r (
          dynamic_cast< ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"RegisterPrincipalRequest",
        L"http://www.qut.com/middleware/DelegatedProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (const ::std::wstring& u,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType > r (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (const ::std::wstring& u,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType > r (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (const ::std::wstring& u,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType > r (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::std::istream& is,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::std::istream& is,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::std::istream& is,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::std::istream& is,
                               const ::std::wstring& sid,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::std::istream& is,
                               const ::std::wstring& sid,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::std::istream& is,
                               const ::std::wstring& sid,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::xercesc::InputSource& i,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType > r (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::xercesc::InputSource& i,
                               ::xml_schema::error_handler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType > r (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::xercesc::InputSource& i,
                               ::xercesc::DOMErrorHandler& h,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType > r (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (const ::xercesc::DOMDocument& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType > r (
          ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"RegisterPrincipalResponse",
          L"http://www.qut.com/middleware/DelegatedProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType > r (
          dynamic_cast< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"RegisterPrincipalResponse",
        L"http://www.qut.com/middleware/DelegatedProtocolSchema");
    }

    ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >
    RegisterPrincipalResponse (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                               ::xml_schema::flags f,
                               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"RegisterPrincipalResponse",
          L"http://www.qut.com/middleware/DelegatedProtocolSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType > r (
          dynamic_cast< ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"RegisterPrincipalResponse",
        L"http://www.qut.com/middleware/DelegatedProtocolSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace DelegatedProtocolSchema
  {
    void
    RegisterPrincipalRequest (::std::ostream& o,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::wstring& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RegisterPrincipalRequest (::std::ostream& o,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::wstring& e,
                              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalRequest (::std::ostream& o,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::wstring& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalRequest (::xercesc::XMLFormatTarget& t,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::wstring& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RegisterPrincipalRequest (::xercesc::XMLFormatTarget& t,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              ::xml_schema::error_handler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::wstring& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalRequest (::xercesc::XMLFormatTarget& t,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              ::xercesc::DOMErrorHandler& h,
                              const ::xml_schema::namespace_infomap& m,
                              const ::std::wstring& e,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalRequest (::xercesc::DOMDocument& d,
                              const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType) == typeid (s))
      {
        if (n.name () == L"RegisterPrincipalRequest" &&
            n.namespace_ () == L"http://www.qut.com/middleware/DelegatedProtocolSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"RegisterPrincipalRequest",
            L"http://www.qut.com/middleware/DelegatedProtocolSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"RegisterPrincipalRequest",
          L"http://www.qut.com/middleware/DelegatedProtocolSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RegisterPrincipalRequest (const ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType& s,
                              const ::xml_schema::namespace_infomap& m,
                              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::DelegatedProtocolSchema::RegisterPrincipalRequestType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"RegisterPrincipalRequest",
            L"http://www.qut.com/middleware/DelegatedProtocolSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"RegisterPrincipalRequest",
            L"http://www.qut.com/middleware/DelegatedProtocolSchema",
            m, s, f));
        d = r;
      }

      ::middleware::DelegatedProtocolSchema::RegisterPrincipalRequest (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const RegisterPrincipalRequestType& i)
    {
      e << static_cast< const ::saml2::protocol::RequestAbstractType& > (i);

      // principalAuthnIdentifier
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const RegisterPrincipalRequestType::principalAuthnIdentifier_type& x (i.principalAuthnIdentifier ());
        if (typeid (RegisterPrincipalRequestType::principalAuthnIdentifier_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"principalAuthnIdentifier",
              L"http://www.qut.com/middleware/DelegatedProtocolSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"principalAuthnIdentifier",
            L"http://www.qut.com/middleware/DelegatedProtocolSchema",
            false, true, e, x);
      }

      // Attribute
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (RegisterPrincipalRequestType::Attribute_const_iterator
             b (i.Attribute ().begin ()), n (i.Attribute ().end ());
             b != n; ++b)
        {
          if (typeid (RegisterPrincipalRequestType::Attribute_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Attribute",
                L"urn:oasis:names:tc:SAML:2.0:assertion",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"Attribute",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true, true, e, *b);
        }
      }

      // EncryptedAttribute
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        for (RegisterPrincipalRequestType::EncryptedAttribute_const_iterator
             b (i.EncryptedAttribute ().begin ()), n (i.EncryptedAttribute ().end ());
             b != n; ++b)
        {
          if (typeid (RegisterPrincipalRequestType::EncryptedAttribute_type) == typeid (*b))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"EncryptedAttribute",
                L"urn:oasis:names:tc:SAML:2.0:assertion",
                e));

            s << *b;
          }
          else
            tsm.serialize (
              L"EncryptedAttribute",
              L"urn:oasis:names:tc:SAML:2.0:assertion",
              true, true, e, *b);
        }
      }

      // Source
      //
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Source",
            e));

        a << i.Source ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RegisterPrincipalRequestType >
    _xsd_RegisterPrincipalRequestType_type_serializer_init (
      L"RegisterPrincipalRequestType",
      L"http://www.qut.com/middleware/DelegatedProtocolSchema");


    void
    RegisterPrincipalResponse (::std::ostream& o,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::wstring& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RegisterPrincipalResponse (::std::ostream& o,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::wstring& e,
                               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalResponse (::std::ostream& o,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::wstring& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalResponse (::xercesc::XMLFormatTarget& t,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::wstring& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    RegisterPrincipalResponse (::xercesc::XMLFormatTarget& t,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               ::xml_schema::error_handler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::wstring& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalResponse (::xercesc::XMLFormatTarget& t,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               ::xercesc::DOMErrorHandler& h,
                               const ::xml_schema::namespace_infomap& m,
                               const ::std::wstring& e,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    RegisterPrincipalResponse (::xercesc::DOMDocument& d,
                               const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType) == typeid (s))
      {
        if (n.name () == L"RegisterPrincipalResponse" &&
            n.namespace_ () == L"http://www.qut.com/middleware/DelegatedProtocolSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"RegisterPrincipalResponse",
            L"http://www.qut.com/middleware/DelegatedProtocolSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"RegisterPrincipalResponse",
          L"http://www.qut.com/middleware/DelegatedProtocolSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    RegisterPrincipalResponse (const ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType& s,
                               const ::xml_schema::namespace_infomap& m,
                               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::DelegatedProtocolSchema::RegisterPrincipalResponseType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"RegisterPrincipalResponse",
            L"http://www.qut.com/middleware/DelegatedProtocolSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"RegisterPrincipalResponse",
            L"http://www.qut.com/middleware/DelegatedProtocolSchema",
            m, s, f));
        d = r;
      }

      ::middleware::DelegatedProtocolSchema::RegisterPrincipalResponse (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const RegisterPrincipalResponseType& i)
    {
      e << static_cast< const ::saml2::protocol::StatusResponseType& > (i);

      // sessionIdentifier
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.sessionIdentifier ())
        {
          const RegisterPrincipalResponseType::sessionIdentifier_type& x (*i.sessionIdentifier ());
          if (typeid (RegisterPrincipalResponseType::sessionIdentifier_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"sessionIdentifier",
                L"http://www.qut.com/middleware/DelegatedProtocolSchema",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"sessionIdentifier",
              L"http://www.qut.com/middleware/DelegatedProtocolSchema",
              false, true, e, x);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RegisterPrincipalResponseType >
    _xsd_RegisterPrincipalResponseType_type_serializer_init (
      L"RegisterPrincipalResponseType",
      L"http://www.qut.com/middleware/DelegatedProtocolSchema");
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

