// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SOAP_1_1_ENVELOPE_HXX
#define CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SOAP_1_1_ENVELOPE_HXX

// Begin prologue.
//
#include "saml2/SAML2Defs.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "saml2/xsd/xml-schema.hxx"

// Forward declarations.
//
namespace soap
{
  namespace v11
  {
    class Envelope;
    class Header;
    class Body;
    class encodingStyle;
    class Fault;
    class detail;
    class mustUnderstand;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

namespace soap
{
  namespace v11
  {
    class Envelope: public ::xml_schema::type
    {
      public:
      // Header
      // 
      typedef ::soap::v11::Header Header_type;
      typedef ::xsd::cxx::tree::optional< Header_type > Header_optional;
      typedef ::xsd::cxx::tree::traits< Header_type, wchar_t > Header_traits;

      const Header_optional&
      Header () const;

      Header_optional&
      Header ();

      void
      Header (const Header_type& x);

      void
      Header (const Header_optional& x);

      void
      Header (::std::auto_ptr< Header_type > p);

      // Body
      // 
      typedef ::soap::v11::Body Body_type;
      typedef ::xsd::cxx::tree::traits< Body_type, wchar_t > Body_traits;

      const Body_type&
      Body () const;

      Body_type&
      Body ();

      void
      Body (const Body_type& x);

      void
      Body (::std::auto_ptr< Body_type > p);

      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      Envelope ();

      Envelope (const Body_type&);

      Envelope (::std::auto_ptr< Body_type >&);

      Envelope (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      Envelope (const Envelope& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual Envelope*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Envelope ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      Header_optional Header_;
      ::xsd::cxx::tree::one< Body_type > Body_;
      any_sequence any_;
      any_attribute_set any_attribute_;
    };

    class Header: public ::xml_schema::type
    {
      public:
      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      Header ();

      Header (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      Header (const Header& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual Header*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Header ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
      any_attribute_set any_attribute_;
    };

    class Body: public ::xml_schema::type
    {
      public:
      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      Body ();

      Body (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      Body (const Body& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

      virtual Body*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Body ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
      any_attribute_set any_attribute_;
    };

    class encodingStyle: public ::xml_schema::simple_type,
      public ::xsd::cxx::tree::list< ::xml_schema::uri, wchar_t >
    {
      public:
      encodingStyle ();

      encodingStyle (size_type n, const ::xml_schema::uri& x);

      template < typename I >
      encodingStyle (const I& begin, const I& end)
      : ::xsd::cxx::tree::list< ::xml_schema::uri, wchar_t > (begin, end)
      {
      }

      encodingStyle (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      encodingStyle (const ::xercesc::DOMAttr& a,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      encodingStyle (const ::std::wstring& s,
                     const ::xercesc::DOMElement* e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      encodingStyle (const encodingStyle& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual encodingStyle*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~encodingStyle ();
    };

    class Fault: public ::xml_schema::type
    {
      public:
      // faultcode
      // 
      typedef ::xml_schema::qname faultcode_type;
      typedef ::xsd::cxx::tree::traits< faultcode_type, wchar_t > faultcode_traits;

      const faultcode_type&
      faultcode () const;

      faultcode_type&
      faultcode ();

      void
      faultcode (const faultcode_type& x);

      void
      faultcode (::std::auto_ptr< faultcode_type > p);

      // faultstring
      // 
      typedef ::xml_schema::string faultstring_type;
      typedef ::xsd::cxx::tree::traits< faultstring_type, wchar_t > faultstring_traits;

      const faultstring_type&
      faultstring () const;

      faultstring_type&
      faultstring ();

      void
      faultstring (const faultstring_type& x);

      void
      faultstring (::std::auto_ptr< faultstring_type > p);

      // faultactor
      // 
      typedef ::xml_schema::uri faultactor_type;
      typedef ::xsd::cxx::tree::optional< faultactor_type > faultactor_optional;
      typedef ::xsd::cxx::tree::traits< faultactor_type, wchar_t > faultactor_traits;

      const faultactor_optional&
      faultactor () const;

      faultactor_optional&
      faultactor ();

      void
      faultactor (const faultactor_type& x);

      void
      faultactor (const faultactor_optional& x);

      void
      faultactor (::std::auto_ptr< faultactor_type > p);

      // detail
      // 
      typedef ::soap::v11::detail detail_type;
      typedef ::xsd::cxx::tree::optional< detail_type > detail_optional;
      typedef ::xsd::cxx::tree::traits< detail_type, wchar_t > detail_traits;

      const detail_optional&
      detail () const;

      detail_optional&
      detail ();

      void
      detail (const detail_type& x);

      void
      detail (const detail_optional& x);

      void
      detail (::std::auto_ptr< detail_type > p);

      // Constructors.
      //
      Fault ();

      Fault (const faultcode_type&,
             const faultstring_type&);

      Fault (::std::auto_ptr< faultcode_type >&,
             ::std::auto_ptr< faultstring_type >&);

      Fault (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      Fault (const Fault& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

      virtual Fault*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~Fault ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< faultcode_type > faultcode_;
      ::xsd::cxx::tree::one< faultstring_type > faultstring_;
      faultactor_optional faultactor_;
      detail_optional detail_;
    };

    class detail: public ::xml_schema::type
    {
      public:
      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      detail ();

      detail (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      detail (const detail& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

      virtual detail*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~detail ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
      any_attribute_set any_attribute_;
    };

    class mustUnderstand: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::boolean, wchar_t, ::xml_schema::simple_type >
    {
      public:
      // Constructors.
      //
      mustUnderstand ();

      mustUnderstand (const ::xml_schema::boolean&);

      mustUnderstand (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      mustUnderstand (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      mustUnderstand (const ::std::wstring& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      mustUnderstand (const mustUnderstand& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual mustUnderstand*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~mustUnderstand ();
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace soap
{
  namespace v11
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (const ::std::wstring& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (const ::std::wstring& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (const ::std::wstring& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::std::istream& is,
               const ::std::wstring& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Envelope >
    Envelope_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (const ::std::wstring& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (const ::std::wstring& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (const ::std::wstring& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::std::istream& is,
             const ::std::wstring& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Header >
    Header_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (const ::std::wstring& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (const ::std::wstring& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (const ::std::wstring& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::std::istream& is,
           const ::std::wstring& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::std::istream& is,
           const ::std::wstring& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::std::istream& is,
           const ::std::wstring& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Body >
    Body_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::soap::v11::Fault >
    Fault_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace soap
{
  namespace v11
  {
    // Serialize to std::ostream.
    //

    void
    Envelope_ (::std::ostream& os,
               const ::soap::v11::Envelope& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Envelope_ (::std::ostream& os,
               const ::soap::v11::Envelope& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Envelope_ (::std::ostream& os,
               const ::soap::v11::Envelope& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Envelope_ (::xercesc::XMLFormatTarget& ft,
               const ::soap::v11::Envelope& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Envelope_ (::xercesc::XMLFormatTarget& ft,
               const ::soap::v11::Envelope& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Envelope_ (::xercesc::XMLFormatTarget& ft,
               const ::soap::v11::Envelope& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Envelope_ (::xercesc::DOMDocument& d,
               const ::soap::v11::Envelope& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Envelope_ (const ::soap::v11::Envelope& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const Envelope&);

    // Serialize to std::ostream.
    //

    void
    Header_ (::std::ostream& os,
             const ::soap::v11::Header& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Header_ (::std::ostream& os,
             const ::soap::v11::Header& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Header_ (::std::ostream& os,
             const ::soap::v11::Header& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Header_ (::xercesc::XMLFormatTarget& ft,
             const ::soap::v11::Header& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Header_ (::xercesc::XMLFormatTarget& ft,
             const ::soap::v11::Header& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Header_ (::xercesc::XMLFormatTarget& ft,
             const ::soap::v11::Header& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Header_ (::xercesc::DOMDocument& d,
             const ::soap::v11::Header& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Header_ (const ::soap::v11::Header& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const Header&);

    // Serialize to std::ostream.
    //

    void
    Body_ (::std::ostream& os,
           const ::soap::v11::Body& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    void
    Body_ (::std::ostream& os,
           const ::soap::v11::Body& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    void
    Body_ (::std::ostream& os,
           const ::soap::v11::Body& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Body_ (::xercesc::XMLFormatTarget& ft,
           const ::soap::v11::Body& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    void
    Body_ (::xercesc::XMLFormatTarget& ft,
           const ::soap::v11::Body& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    void
    Body_ (::xercesc::XMLFormatTarget& ft,
           const ::soap::v11::Body& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Body_ (::xercesc::DOMDocument& d,
           const ::soap::v11::Body& x,
           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Body_ (const ::soap::v11::Body& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const Body&);

    void
    operator<< (::xercesc::DOMElement&, const encodingStyle&);

    void
    operator<< (::xercesc::DOMAttr&, const encodingStyle&);

    void
    operator<< (::xml_schema::list_stream&,
                const encodingStyle&);

    // Serialize to std::ostream.
    //

    void
    Fault_ (::std::ostream& os,
            const ::soap::v11::Fault& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Fault_ (::std::ostream& os,
            const ::soap::v11::Fault& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Fault_ (::std::ostream& os,
            const ::soap::v11::Fault& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Fault_ (::xercesc::XMLFormatTarget& ft,
            const ::soap::v11::Fault& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Fault_ (::xercesc::XMLFormatTarget& ft,
            const ::soap::v11::Fault& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Fault_ (::xercesc::XMLFormatTarget& ft,
            const ::soap::v11::Fault& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Fault_ (::xercesc::DOMDocument& d,
            const ::soap::v11::Fault& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Fault_ (const ::soap::v11::Fault& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const Fault&);

    void
    operator<< (::xercesc::DOMElement&, const detail&);

    void
    operator<< (::xercesc::DOMElement&, const mustUnderstand&);

    void
    operator<< (::xercesc::DOMAttr&, const mustUnderstand&);

    void
    operator<< (::xml_schema::list_stream&,
                const mustUnderstand&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_SOAP_1_1_ENVELOPE_HXX
