// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_LXACML_SCHEMA_HXX
#define CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_LXACML_SCHEMA_HXX

// Begin prologue.
//
#include "saml2/SAML2Defs.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "saml2/xsd/xml-schema.hxx"

// Forward declarations.
//
namespace middleware
{
  namespace lxacmlSchema
  {
    class PolicySetType;
    class PolicyType;
    class RuleType;
    class TargetType;
    class ResourcesType;
    class ActionsType;
    class ResourceType;
    class ActionType;
    class ExpressionType;
    class ConditionType;
    class ApplyType;
    class AttributeDesignatorType;
    class SubjectAttributeDesignatorType;
    class AttributeValueType;
    class ObligationsType;
    class ObligationType;
    class EffectType;
    class AttributeAssignmentType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

namespace middleware
{
  namespace lxacmlSchema
  {
    class PolicySetType: public ::xml_schema::type
    {
      public:
      // Description
      // 
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::optional< Description_type > Description_optional;
      typedef ::xsd::cxx::tree::traits< Description_type, wchar_t > Description_traits;

      const Description_optional&
      Description () const;

      Description_optional&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (const Description_optional& x);

      void
      Description (::std::auto_ptr< Description_type > p);

      // Policy
      // 
      typedef ::middleware::lxacmlSchema::PolicyType Policy_type;
      typedef ::xsd::cxx::tree::sequence< Policy_type > Policy_sequence;
      typedef Policy_sequence::iterator Policy_iterator;
      typedef Policy_sequence::const_iterator Policy_const_iterator;
      typedef ::xsd::cxx::tree::traits< Policy_type, wchar_t > Policy_traits;

      const Policy_sequence&
      Policy () const;

      Policy_sequence&
      Policy ();

      void
      Policy (const Policy_sequence& s);

      // Constructors.
      //
      PolicySetType ();

      PolicySetType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      PolicySetType (const PolicySetType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual PolicySetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PolicySetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Description_optional Description_;
      Policy_sequence Policy_;
    };

    class PolicyType: public ::xml_schema::type
    {
      public:
      // Description
      // 
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::traits< Description_type, wchar_t > Description_traits;

      const Description_type&
      Description () const;

      Description_type&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (::std::auto_ptr< Description_type > p);

      // Target
      // 
      typedef ::middleware::lxacmlSchema::TargetType Target_type;
      typedef ::xsd::cxx::tree::traits< Target_type, wchar_t > Target_traits;

      const Target_type&
      Target () const;

      Target_type&
      Target ();

      void
      Target (const Target_type& x);

      void
      Target (::std::auto_ptr< Target_type > p);

      // Rule
      // 
      typedef ::middleware::lxacmlSchema::RuleType Rule_type;
      typedef ::xsd::cxx::tree::sequence< Rule_type > Rule_sequence;
      typedef Rule_sequence::iterator Rule_iterator;
      typedef Rule_sequence::const_iterator Rule_const_iterator;
      typedef ::xsd::cxx::tree::traits< Rule_type, wchar_t > Rule_traits;

      const Rule_sequence&
      Rule () const;

      Rule_sequence&
      Rule ();

      void
      Rule (const Rule_sequence& s);

      // PolicyId
      // 
      typedef ::xml_schema::uri PolicyId_type;
      typedef ::xsd::cxx::tree::traits< PolicyId_type, wchar_t > PolicyId_traits;

      const PolicyId_type&
      PolicyId () const;

      PolicyId_type&
      PolicyId ();

      void
      PolicyId (const PolicyId_type& x);

      void
      PolicyId (::std::auto_ptr< PolicyId_type > p);

      // Constructors.
      //
      PolicyType ();

      PolicyType (const Description_type&,
                  const Target_type&,
                  const PolicyId_type&);

      PolicyType (const Description_type&,
                  ::std::auto_ptr< Target_type >&,
                  const PolicyId_type&);

      PolicyType (::std::auto_ptr< Description_type >&,
                  ::std::auto_ptr< Target_type >&,
                  const PolicyId_type&);

      PolicyType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      PolicyType (const PolicyType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual PolicyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~PolicyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Description_type > Description_;
      ::xsd::cxx::tree::one< Target_type > Target_;
      Rule_sequence Rule_;
      ::xsd::cxx::tree::one< PolicyId_type > PolicyId_;
    };

    class RuleType: public ::xml_schema::type
    {
      public:
      // Description
      // 
      typedef ::xml_schema::string Description_type;
      typedef ::xsd::cxx::tree::traits< Description_type, wchar_t > Description_traits;

      const Description_type&
      Description () const;

      Description_type&
      Description ();

      void
      Description (const Description_type& x);

      void
      Description (::std::auto_ptr< Description_type > p);

      // Target
      // 
      typedef ::middleware::lxacmlSchema::TargetType Target_type;
      typedef ::xsd::cxx::tree::optional< Target_type > Target_optional;
      typedef ::xsd::cxx::tree::traits< Target_type, wchar_t > Target_traits;

      const Target_optional&
      Target () const;

      Target_optional&
      Target ();

      void
      Target (const Target_type& x);

      void
      Target (const Target_optional& x);

      void
      Target (::std::auto_ptr< Target_type > p);

      // Condition
      // 
      typedef ::middleware::lxacmlSchema::ConditionType Condition_type;
      typedef ::xsd::cxx::tree::optional< Condition_type > Condition_optional;
      typedef ::xsd::cxx::tree::traits< Condition_type, wchar_t > Condition_traits;

      const Condition_optional&
      Condition () const;

      Condition_optional&
      Condition ();

      void
      Condition (const Condition_type& x);

      void
      Condition (const Condition_optional& x);

      void
      Condition (::std::auto_ptr< Condition_type > p);

      // RuleId
      // 
      typedef ::xml_schema::string RuleId_type;
      typedef ::xsd::cxx::tree::traits< RuleId_type, wchar_t > RuleId_traits;

      const RuleId_type&
      RuleId () const;

      RuleId_type&
      RuleId ();

      void
      RuleId (const RuleId_type& x);

      void
      RuleId (::std::auto_ptr< RuleId_type > p);

      // Effect
      // 
      typedef ::middleware::lxacmlSchema::EffectType Effect_type;
      typedef ::xsd::cxx::tree::traits< Effect_type, wchar_t > Effect_traits;

      const Effect_type&
      Effect () const;

      Effect_type&
      Effect ();

      void
      Effect (const Effect_type& x);

      void
      Effect (::std::auto_ptr< Effect_type > p);

      // Constructors.
      //
      RuleType ();

      RuleType (const Description_type&,
                const RuleId_type&,
                const Effect_type&);

      RuleType (::std::auto_ptr< Description_type >&,
                const RuleId_type&,
                const Effect_type&);

      RuleType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      RuleType (const RuleType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

      virtual RuleType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~RuleType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Description_type > Description_;
      Target_optional Target_;
      Condition_optional Condition_;
      ::xsd::cxx::tree::one< RuleId_type > RuleId_;
      ::xsd::cxx::tree::one< Effect_type > Effect_;
    };

    class TargetType: public ::xml_schema::type
    {
      public:
      // Resources
      // 
      typedef ::middleware::lxacmlSchema::ResourcesType Resources_type;
      typedef ::xsd::cxx::tree::traits< Resources_type, wchar_t > Resources_traits;

      const Resources_type&
      Resources () const;

      Resources_type&
      Resources ();

      void
      Resources (const Resources_type& x);

      void
      Resources (::std::auto_ptr< Resources_type > p);

      // Actions
      // 
      typedef ::middleware::lxacmlSchema::ActionsType Actions_type;
      typedef ::xsd::cxx::tree::traits< Actions_type, wchar_t > Actions_traits;

      const Actions_type&
      Actions () const;

      Actions_type&
      Actions ();

      void
      Actions (const Actions_type& x);

      void
      Actions (::std::auto_ptr< Actions_type > p);

      // Constructors.
      //
      TargetType ();

      TargetType (const Resources_type&,
                  const Actions_type&);

      TargetType (::std::auto_ptr< Resources_type >&,
                  ::std::auto_ptr< Actions_type >&);

      TargetType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      TargetType (const TargetType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual TargetType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~TargetType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Resources_type > Resources_;
      ::xsd::cxx::tree::one< Actions_type > Actions_;
    };

    class ResourcesType: public ::xml_schema::type
    {
      public:
      // Resource
      // 
      typedef ::middleware::lxacmlSchema::ResourceType Resource_type;
      typedef ::xsd::cxx::tree::sequence< Resource_type > Resource_sequence;
      typedef Resource_sequence::iterator Resource_iterator;
      typedef Resource_sequence::const_iterator Resource_const_iterator;
      typedef ::xsd::cxx::tree::traits< Resource_type, wchar_t > Resource_traits;

      const Resource_sequence&
      Resource () const;

      Resource_sequence&
      Resource ();

      void
      Resource (const Resource_sequence& s);

      // Constructors.
      //
      ResourcesType ();

      ResourcesType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      ResourcesType (const ResourcesType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual ResourcesType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ResourcesType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Resource_sequence Resource_;
    };

    class ActionsType: public ::xml_schema::type
    {
      public:
      // Action
      // 
      typedef ::middleware::lxacmlSchema::ActionType Action_type;
      typedef ::xsd::cxx::tree::sequence< Action_type > Action_sequence;
      typedef Action_sequence::iterator Action_iterator;
      typedef Action_sequence::const_iterator Action_const_iterator;
      typedef ::xsd::cxx::tree::traits< Action_type, wchar_t > Action_traits;

      const Action_sequence&
      Action () const;

      Action_sequence&
      Action ();

      void
      Action (const Action_sequence& s);

      // Constructors.
      //
      ActionsType ();

      ActionsType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      ActionsType (const ActionsType& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

      virtual ActionsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ActionsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Action_sequence Action_;
    };

    class ResourceType: public ::xml_schema::type
    {
      public:
      // AttributeValue
      // 
      typedef ::middleware::lxacmlSchema::AttributeValueType AttributeValue_type;
      typedef ::xsd::cxx::tree::traits< AttributeValue_type, wchar_t > AttributeValue_traits;

      const AttributeValue_type&
      AttributeValue () const;

      AttributeValue_type&
      AttributeValue ();

      void
      AttributeValue (const AttributeValue_type& x);

      void
      AttributeValue (::std::auto_ptr< AttributeValue_type > p);

      // Constructors.
      //
      ResourceType ();

      ResourceType (const AttributeValue_type&);

      ResourceType (::std::auto_ptr< AttributeValue_type >&);

      ResourceType (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      ResourceType (const ResourceType& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

      virtual ResourceType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ResourceType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< AttributeValue_type > AttributeValue_;
    };

    class ActionType: public ::xml_schema::type
    {
      public:
      // AttributeValue
      // 
      typedef ::middleware::lxacmlSchema::AttributeValueType AttributeValue_type;
      typedef ::xsd::cxx::tree::traits< AttributeValue_type, wchar_t > AttributeValue_traits;

      const AttributeValue_type&
      AttributeValue () const;

      AttributeValue_type&
      AttributeValue ();

      void
      AttributeValue (const AttributeValue_type& x);

      void
      AttributeValue (::std::auto_ptr< AttributeValue_type > p);

      // Constructors.
      //
      ActionType ();

      ActionType (const AttributeValue_type&);

      ActionType (::std::auto_ptr< AttributeValue_type >&);

      ActionType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      ActionType (const ActionType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual ActionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ActionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< AttributeValue_type > AttributeValue_;
    };

    class ExpressionType: public ::xml_schema::type
    {
      public:
      // Constructors.
      //
      ExpressionType ();

      ExpressionType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ExpressionType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ExpressionType (const ::std::wstring& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ExpressionType (const ExpressionType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ExpressionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ExpressionType ();
    };

    class ConditionType: public ::middleware::lxacmlSchema::ExpressionType
    {
      public:
      // Expression
      // 
      typedef ::middleware::lxacmlSchema::ExpressionType Expression_type;
      typedef ::xsd::cxx::tree::traits< Expression_type, wchar_t > Expression_traits;

      const Expression_type&
      Expression () const;

      Expression_type&
      Expression ();

      void
      Expression (const Expression_type& x);

      void
      Expression (::std::auto_ptr< Expression_type > p);

      // Constructors.
      //
      ConditionType ();

      ConditionType (const Expression_type&);

      ConditionType (::std::auto_ptr< Expression_type >&);

      ConditionType (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      ConditionType (const ConditionType& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

      virtual ConditionType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ConditionType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Expression_type > Expression_;
    };

    class ApplyType: public ::middleware::lxacmlSchema::ExpressionType
    {
      public:
      // Expression
      // 
      typedef ::middleware::lxacmlSchema::ExpressionType Expression_type;
      typedef ::xsd::cxx::tree::sequence< Expression_type > Expression_sequence;
      typedef Expression_sequence::iterator Expression_iterator;
      typedef Expression_sequence::const_iterator Expression_const_iterator;
      typedef ::xsd::cxx::tree::traits< Expression_type, wchar_t > Expression_traits;

      const Expression_sequence&
      Expression () const;

      Expression_sequence&
      Expression ();

      void
      Expression (const Expression_sequence& s);

      // FunctionId
      // 
      typedef ::xml_schema::uri FunctionId_type;
      typedef ::xsd::cxx::tree::traits< FunctionId_type, wchar_t > FunctionId_traits;

      const FunctionId_type&
      FunctionId () const;

      FunctionId_type&
      FunctionId ();

      void
      FunctionId (const FunctionId_type& x);

      void
      FunctionId (::std::auto_ptr< FunctionId_type > p);

      // Constructors.
      //
      ApplyType ();

      ApplyType (const FunctionId_type&);

      ApplyType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      ApplyType (const ApplyType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

      virtual ApplyType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ApplyType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Expression_sequence Expression_;
      ::xsd::cxx::tree::one< FunctionId_type > FunctionId_;
    };

    class AttributeDesignatorType: public ::middleware::lxacmlSchema::ExpressionType
    {
      public:
      // AttributeId
      // 
      typedef ::xml_schema::uri AttributeId_type;
      typedef ::xsd::cxx::tree::traits< AttributeId_type, wchar_t > AttributeId_traits;

      const AttributeId_type&
      AttributeId () const;

      AttributeId_type&
      AttributeId ();

      void
      AttributeId (const AttributeId_type& x);

      void
      AttributeId (::std::auto_ptr< AttributeId_type > p);

      // Constructors.
      //
      AttributeDesignatorType ();

      AttributeDesignatorType (const AttributeId_type&);

      AttributeDesignatorType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      AttributeDesignatorType (const AttributeDesignatorType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual AttributeDesignatorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AttributeDesignatorType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< AttributeId_type > AttributeId_;
    };

    class SubjectAttributeDesignatorType: public ::middleware::lxacmlSchema::AttributeDesignatorType
    {
      public:
      // Constructors.
      //
      SubjectAttributeDesignatorType ();

      SubjectAttributeDesignatorType (const AttributeId_type&);

      SubjectAttributeDesignatorType (const ::xercesc::DOMElement& e,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      SubjectAttributeDesignatorType (const SubjectAttributeDesignatorType& x,
                                      ::xml_schema::flags f = 0,
                                      ::xml_schema::container* c = 0);

      virtual SubjectAttributeDesignatorType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~SubjectAttributeDesignatorType ();
    };

    class AttributeValueType: public ::middleware::lxacmlSchema::ExpressionType
    {
      public:
      // any
      // 
      typedef ::xsd::cxx::tree::element_sequence any_sequence;
      typedef any_sequence::iterator any_iterator;
      typedef any_sequence::const_iterator any_const_iterator;

      const any_sequence&
      any () const;

      any_sequence&
      any ();

      void
      any (const any_sequence& s);

      // any_attribute
      // 
      typedef ::xsd::cxx::tree::attribute_set< wchar_t > any_attribute_set;
      typedef any_attribute_set::iterator any_attribute_iterator;
      typedef any_attribute_set::const_iterator any_attribute_const_iterator;

      const any_attribute_set&
      any_attribute () const;

      any_attribute_set&
      any_attribute ();

      void
      any_attribute (const any_attribute_set& s);

      // DOMDocument for wildcard content.
      //
      const ::xercesc::DOMDocument&
      dom_document () const;

      ::xercesc::DOMDocument&
      dom_document ();

      // Constructors.
      //
      AttributeValueType ();

      AttributeValueType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      AttributeValueType (const AttributeValueType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

      virtual AttributeValueType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AttributeValueType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > dom_document_;

      any_sequence any_;
      any_attribute_set any_attribute_;
    };

    class ObligationsType: public ::xml_schema::type
    {
      public:
      // Obligation
      // 
      typedef ::middleware::lxacmlSchema::ObligationType Obligation_type;
      typedef ::xsd::cxx::tree::sequence< Obligation_type > Obligation_sequence;
      typedef Obligation_sequence::iterator Obligation_iterator;
      typedef Obligation_sequence::const_iterator Obligation_const_iterator;
      typedef ::xsd::cxx::tree::traits< Obligation_type, wchar_t > Obligation_traits;

      const Obligation_sequence&
      Obligation () const;

      Obligation_sequence&
      Obligation ();

      void
      Obligation (const Obligation_sequence& s);

      // Constructors.
      //
      ObligationsType ();

      ObligationsType (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      ObligationsType (const ObligationsType& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

      virtual ObligationsType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ObligationsType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Obligation_sequence Obligation_;
    };

    class ObligationType: public ::xml_schema::type
    {
      public:
      // AttributeAssignment
      // 
      typedef ::middleware::lxacmlSchema::AttributeAssignmentType AttributeAssignment_type;
      typedef ::xsd::cxx::tree::sequence< AttributeAssignment_type > AttributeAssignment_sequence;
      typedef AttributeAssignment_sequence::iterator AttributeAssignment_iterator;
      typedef AttributeAssignment_sequence::const_iterator AttributeAssignment_const_iterator;
      typedef ::xsd::cxx::tree::traits< AttributeAssignment_type, wchar_t > AttributeAssignment_traits;

      const AttributeAssignment_sequence&
      AttributeAssignment () const;

      AttributeAssignment_sequence&
      AttributeAssignment ();

      void
      AttributeAssignment (const AttributeAssignment_sequence& s);

      // ObligationId
      // 
      typedef ::xml_schema::uri ObligationId_type;
      typedef ::xsd::cxx::tree::traits< ObligationId_type, wchar_t > ObligationId_traits;

      const ObligationId_type&
      ObligationId () const;

      ObligationId_type&
      ObligationId ();

      void
      ObligationId (const ObligationId_type& x);

      void
      ObligationId (::std::auto_ptr< ObligationId_type > p);

      // FulfillOn
      // 
      typedef ::middleware::lxacmlSchema::EffectType FulfillOn_type;
      typedef ::xsd::cxx::tree::traits< FulfillOn_type, wchar_t > FulfillOn_traits;

      const FulfillOn_type&
      FulfillOn () const;

      FulfillOn_type&
      FulfillOn ();

      void
      FulfillOn (const FulfillOn_type& x);

      void
      FulfillOn (::std::auto_ptr< FulfillOn_type > p);

      // Constructors.
      //
      ObligationType ();

      ObligationType (const ObligationId_type&,
                      const FulfillOn_type&);

      ObligationType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      ObligationType (const ObligationType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

      virtual ObligationType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~ObligationType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      AttributeAssignment_sequence AttributeAssignment_;
      ::xsd::cxx::tree::one< ObligationId_type > ObligationId_;
      ::xsd::cxx::tree::one< FulfillOn_type > FulfillOn_;
    };

    class EffectType: public ::xml_schema::string
    {
      public:
      enum value
      {
        Permit,
        Deny
      };

      EffectType ();

      EffectType (value v);

      EffectType (const wchar_t* v);

      EffectType (const ::std::wstring& v);

      EffectType (const ::xml_schema::string& v);

      EffectType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      EffectType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      EffectType (const ::std::wstring& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      EffectType (const EffectType& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

      virtual EffectType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      EffectType&
      operator= (value v);

      virtual
      operator value () const
      {
        return _xsd_EffectType_convert ();
      }

      protected:
      value
      _xsd_EffectType_convert () const;

      public:
      static const wchar_t* const _xsd_EffectType_literals_[2];
      static const value _xsd_EffectType_indexes_[2];
    };

    class AttributeAssignmentType: public ::middleware::lxacmlSchema::AttributeValueType
    {
      public:
      // AttributeId
      // 
      typedef ::xml_schema::uri AttributeId_type;
      typedef ::xsd::cxx::tree::traits< AttributeId_type, wchar_t > AttributeId_traits;

      const AttributeId_type&
      AttributeId () const;

      AttributeId_type&
      AttributeId ();

      void
      AttributeId (const AttributeId_type& x);

      void
      AttributeId (::std::auto_ptr< AttributeId_type > p);

      // Constructors.
      //
      AttributeAssignmentType ();

      AttributeAssignmentType (const AttributeId_type&);

      AttributeAssignmentType (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      AttributeAssignmentType (const AttributeAssignmentType& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

      virtual AttributeAssignmentType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~AttributeAssignmentType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< AttributeId_type > AttributeId_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace middleware
{
  namespace lxacmlSchema
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::std::wstring& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::std::wstring& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::std::wstring& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::std::istream& is,
               const ::std::wstring& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicySetType >
    PolicySet (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::PolicyType >
    Policy (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::std::wstring& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::std::wstring& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::std::wstring& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          const ::std::wstring& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          const ::std::wstring& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::std::istream& is,
          const ::std::wstring& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::RuleType >
    Rule (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::TargetType >
    Target (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::std::wstring& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::std::wstring& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::std::wstring& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::std::istream& is,
               const ::std::wstring& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourcesType >
    Resources (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::std::wstring& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::std::wstring& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::std::wstring& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             const ::std::wstring& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::std::istream& is,
             const ::std::wstring& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionsType >
    Actions (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::std::wstring& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::std::wstring& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::std::wstring& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::wstring& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::wstring& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ResourceType >
    Resource (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::std::wstring& uri,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::std::wstring& uri,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::std::wstring& uri,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& id,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& id,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::xercesc::InputSource& is,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::xercesc::InputSource& is,
            ::xml_schema::error_handler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::xercesc::InputSource& is,
            ::xercesc::DOMErrorHandler& eh,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ActionType >
    Action (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f = 0,
            const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::std::wstring& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::std::wstring& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::std::wstring& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::std::istream& is,
                const ::std::wstring& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ExpressionType >
    Expression (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::std::wstring& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::std::wstring& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::std::wstring& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               const ::std::wstring& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::std::istream& is,
               const ::std::wstring& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ConditionType >
    Condition (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::std::wstring& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::std::wstring& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::std::wstring& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           const ::std::wstring& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           const ::std::wstring& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::std::istream& is,
           const ::std::wstring& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ApplyType >
    Apply (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::std::wstring& uri,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::std::wstring& uri,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::std::wstring& uri,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                const ::std::wstring& id,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                const ::std::wstring& id,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::std::istream& is,
                                const ::std::wstring& id,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::xercesc::InputSource& is,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::xercesc::InputSource& is,
                                ::xml_schema::error_handler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::xercesc::InputSource& is,
                                ::xercesc::DOMErrorHandler& eh,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (const ::xercesc::DOMDocument& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::SubjectAttributeDesignatorType >
    SubjectAttributeDesignator (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                ::xml_schema::flags f = 0,
                                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::std::wstring& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::std::wstring& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::std::wstring& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeValueType >
    AttributeValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::std::wstring& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::std::wstring& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::std::wstring& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::std::istream& is,
                 const ::std::wstring& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationsType >
    Obligations (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::std::wstring& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::std::wstring& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::std::wstring& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                const ::std::wstring& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::std::istream& is,
                const ::std::wstring& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::ObligationType >
    Obligation (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::std::wstring& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::std::wstring& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::std::wstring& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         const ::std::wstring& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::std::istream& is,
                         const ::std::wstring& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSchema::AttributeAssignmentType >
    AttributeAssignment (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::std::wstring& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::std::wstring& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::std::wstring& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 const ::std::wstring& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (::std::istream& is,
                 const ::std::wstring& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Description (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::xml_schema::string >
    Description (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::xml_schema::string >
    Description (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace middleware
{
  namespace lxacmlSchema
  {
    // Serialize to std::ostream.
    //

    void
    PolicySet (::std::ostream& os,
               const ::middleware::lxacmlSchema::PolicySetType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    PolicySet (::std::ostream& os,
               const ::middleware::lxacmlSchema::PolicySetType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    PolicySet (::std::ostream& os,
               const ::middleware::lxacmlSchema::PolicySetType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    PolicySet (::xercesc::XMLFormatTarget& ft,
               const ::middleware::lxacmlSchema::PolicySetType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    PolicySet (::xercesc::XMLFormatTarget& ft,
               const ::middleware::lxacmlSchema::PolicySetType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    PolicySet (::xercesc::XMLFormatTarget& ft,
               const ::middleware::lxacmlSchema::PolicySetType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    PolicySet (::xercesc::DOMDocument& d,
               const ::middleware::lxacmlSchema::PolicySetType& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    PolicySet (const ::middleware::lxacmlSchema::PolicySetType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const PolicySetType&);

    // Serialize to std::ostream.
    //

    void
    Policy (::std::ostream& os,
            const ::middleware::lxacmlSchema::PolicyType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Policy (::std::ostream& os,
            const ::middleware::lxacmlSchema::PolicyType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Policy (::std::ostream& os,
            const ::middleware::lxacmlSchema::PolicyType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Policy (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlSchema::PolicyType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Policy (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlSchema::PolicyType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Policy (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlSchema::PolicyType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Policy (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlSchema::PolicyType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Policy (const ::middleware::lxacmlSchema::PolicyType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const PolicyType&);

    // Serialize to std::ostream.
    //

    void
    Rule (::std::ostream& os,
          const ::middleware::lxacmlSchema::RuleType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::wstring& e = L"UTF-8",
          ::xml_schema::flags f = 0);

    void
    Rule (::std::ostream& os,
          const ::middleware::lxacmlSchema::RuleType& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::wstring& e = L"UTF-8",
          ::xml_schema::flags f = 0);

    void
    Rule (::std::ostream& os,
          const ::middleware::lxacmlSchema::RuleType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::wstring& e = L"UTF-8",
          ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Rule (::xercesc::XMLFormatTarget& ft,
          const ::middleware::lxacmlSchema::RuleType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::wstring& e = L"UTF-8",
          ::xml_schema::flags f = 0);

    void
    Rule (::xercesc::XMLFormatTarget& ft,
          const ::middleware::lxacmlSchema::RuleType& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::wstring& e = L"UTF-8",
          ::xml_schema::flags f = 0);

    void
    Rule (::xercesc::XMLFormatTarget& ft,
          const ::middleware::lxacmlSchema::RuleType& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::wstring& e = L"UTF-8",
          ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Rule (::xercesc::DOMDocument& d,
          const ::middleware::lxacmlSchema::RuleType& x,
          ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Rule (const ::middleware::lxacmlSchema::RuleType& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const RuleType&);

    // Serialize to std::ostream.
    //

    void
    Target (::std::ostream& os,
            const ::middleware::lxacmlSchema::TargetType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Target (::std::ostream& os,
            const ::middleware::lxacmlSchema::TargetType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Target (::std::ostream& os,
            const ::middleware::lxacmlSchema::TargetType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Target (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlSchema::TargetType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Target (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlSchema::TargetType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Target (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlSchema::TargetType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Target (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlSchema::TargetType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Target (const ::middleware::lxacmlSchema::TargetType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const TargetType&);

    // Serialize to std::ostream.
    //

    void
    Resources (::std::ostream& os,
               const ::middleware::lxacmlSchema::ResourcesType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Resources (::std::ostream& os,
               const ::middleware::lxacmlSchema::ResourcesType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Resources (::std::ostream& os,
               const ::middleware::lxacmlSchema::ResourcesType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Resources (::xercesc::XMLFormatTarget& ft,
               const ::middleware::lxacmlSchema::ResourcesType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Resources (::xercesc::XMLFormatTarget& ft,
               const ::middleware::lxacmlSchema::ResourcesType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Resources (::xercesc::XMLFormatTarget& ft,
               const ::middleware::lxacmlSchema::ResourcesType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Resources (::xercesc::DOMDocument& d,
               const ::middleware::lxacmlSchema::ResourcesType& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Resources (const ::middleware::lxacmlSchema::ResourcesType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ResourcesType&);

    // Serialize to std::ostream.
    //

    void
    Actions (::std::ostream& os,
             const ::middleware::lxacmlSchema::ActionsType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Actions (::std::ostream& os,
             const ::middleware::lxacmlSchema::ActionsType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Actions (::std::ostream& os,
             const ::middleware::lxacmlSchema::ActionsType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Actions (::xercesc::XMLFormatTarget& ft,
             const ::middleware::lxacmlSchema::ActionsType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Actions (::xercesc::XMLFormatTarget& ft,
             const ::middleware::lxacmlSchema::ActionsType& x, 
             ::xml_schema::error_handler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    void
    Actions (::xercesc::XMLFormatTarget& ft,
             const ::middleware::lxacmlSchema::ActionsType& x, 
             ::xercesc::DOMErrorHandler& eh,
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             const ::std::wstring& e = L"UTF-8",
             ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Actions (::xercesc::DOMDocument& d,
             const ::middleware::lxacmlSchema::ActionsType& x,
             ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Actions (const ::middleware::lxacmlSchema::ActionsType& x, 
             const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
             ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ActionsType&);

    // Serialize to std::ostream.
    //

    void
    Resource (::std::ostream& os,
              const ::middleware::lxacmlSchema::ResourceType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Resource (::std::ostream& os,
              const ::middleware::lxacmlSchema::ResourceType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Resource (::std::ostream& os,
              const ::middleware::lxacmlSchema::ResourceType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Resource (::xercesc::XMLFormatTarget& ft,
              const ::middleware::lxacmlSchema::ResourceType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Resource (::xercesc::XMLFormatTarget& ft,
              const ::middleware::lxacmlSchema::ResourceType& x, 
              ::xml_schema::error_handler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    void
    Resource (::xercesc::XMLFormatTarget& ft,
              const ::middleware::lxacmlSchema::ResourceType& x, 
              ::xercesc::DOMErrorHandler& eh,
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              const ::std::wstring& e = L"UTF-8",
              ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Resource (::xercesc::DOMDocument& d,
              const ::middleware::lxacmlSchema::ResourceType& x,
              ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Resource (const ::middleware::lxacmlSchema::ResourceType& x, 
              const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
              ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ResourceType&);

    // Serialize to std::ostream.
    //

    void
    Action (::std::ostream& os,
            const ::middleware::lxacmlSchema::ActionType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Action (::std::ostream& os,
            const ::middleware::lxacmlSchema::ActionType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Action (::std::ostream& os,
            const ::middleware::lxacmlSchema::ActionType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Action (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlSchema::ActionType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Action (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlSchema::ActionType& x, 
            ::xml_schema::error_handler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    void
    Action (::xercesc::XMLFormatTarget& ft,
            const ::middleware::lxacmlSchema::ActionType& x, 
            ::xercesc::DOMErrorHandler& eh,
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            const ::std::wstring& e = L"UTF-8",
            ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Action (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlSchema::ActionType& x,
            ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Action (const ::middleware::lxacmlSchema::ActionType& x, 
            const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
            ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ActionType&);

    // Serialize to std::ostream.
    //

    void
    Expression (::std::ostream& os,
                const ::middleware::lxacmlSchema::ExpressionType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Expression (::std::ostream& os,
                const ::middleware::lxacmlSchema::ExpressionType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Expression (::std::ostream& os,
                const ::middleware::lxacmlSchema::ExpressionType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Expression (::xercesc::XMLFormatTarget& ft,
                const ::middleware::lxacmlSchema::ExpressionType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Expression (::xercesc::XMLFormatTarget& ft,
                const ::middleware::lxacmlSchema::ExpressionType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Expression (::xercesc::XMLFormatTarget& ft,
                const ::middleware::lxacmlSchema::ExpressionType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Expression (::xercesc::DOMDocument& d,
                const ::middleware::lxacmlSchema::ExpressionType& x,
                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Expression (const ::middleware::lxacmlSchema::ExpressionType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ExpressionType&);

    void
    operator<< (::xercesc::DOMAttr&, const ExpressionType&);

    void
    operator<< (::xml_schema::list_stream&,
                const ExpressionType&);

    // Serialize to std::ostream.
    //

    void
    Condition (::std::ostream& os,
               const ::middleware::lxacmlSchema::ConditionType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Condition (::std::ostream& os,
               const ::middleware::lxacmlSchema::ConditionType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Condition (::std::ostream& os,
               const ::middleware::lxacmlSchema::ConditionType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Condition (::xercesc::XMLFormatTarget& ft,
               const ::middleware::lxacmlSchema::ConditionType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Condition (::xercesc::XMLFormatTarget& ft,
               const ::middleware::lxacmlSchema::ConditionType& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    void
    Condition (::xercesc::XMLFormatTarget& ft,
               const ::middleware::lxacmlSchema::ConditionType& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::wstring& e = L"UTF-8",
               ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Condition (::xercesc::DOMDocument& d,
               const ::middleware::lxacmlSchema::ConditionType& x,
               ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Condition (const ::middleware::lxacmlSchema::ConditionType& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ConditionType&);

    // Serialize to std::ostream.
    //

    void
    Apply (::std::ostream& os,
           const ::middleware::lxacmlSchema::ApplyType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    void
    Apply (::std::ostream& os,
           const ::middleware::lxacmlSchema::ApplyType& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    void
    Apply (::std::ostream& os,
           const ::middleware::lxacmlSchema::ApplyType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Apply (::xercesc::XMLFormatTarget& ft,
           const ::middleware::lxacmlSchema::ApplyType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    void
    Apply (::xercesc::XMLFormatTarget& ft,
           const ::middleware::lxacmlSchema::ApplyType& x, 
           ::xml_schema::error_handler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    void
    Apply (::xercesc::XMLFormatTarget& ft,
           const ::middleware::lxacmlSchema::ApplyType& x, 
           ::xercesc::DOMErrorHandler& eh,
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           const ::std::wstring& e = L"UTF-8",
           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Apply (::xercesc::DOMDocument& d,
           const ::middleware::lxacmlSchema::ApplyType& x,
           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Apply (const ::middleware::lxacmlSchema::ApplyType& x, 
           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
           ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ApplyType&);

    void
    operator<< (::xercesc::DOMElement&, const AttributeDesignatorType&);

    // Serialize to std::ostream.
    //

    void
    SubjectAttributeDesignator (::std::ostream& os,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::wstring& e = L"UTF-8",
                                ::xml_schema::flags f = 0);

    void
    SubjectAttributeDesignator (::std::ostream& os,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::wstring& e = L"UTF-8",
                                ::xml_schema::flags f = 0);

    void
    SubjectAttributeDesignator (::std::ostream& os,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::wstring& e = L"UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    SubjectAttributeDesignator (::xercesc::XMLFormatTarget& ft,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::wstring& e = L"UTF-8",
                                ::xml_schema::flags f = 0);

    void
    SubjectAttributeDesignator (::xercesc::XMLFormatTarget& ft,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& x, 
                                ::xml_schema::error_handler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::wstring& e = L"UTF-8",
                                ::xml_schema::flags f = 0);

    void
    SubjectAttributeDesignator (::xercesc::XMLFormatTarget& ft,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& x, 
                                ::xercesc::DOMErrorHandler& eh,
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                const ::std::wstring& e = L"UTF-8",
                                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    SubjectAttributeDesignator (::xercesc::DOMDocument& d,
                                const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& x,
                                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    SubjectAttributeDesignator (const ::middleware::lxacmlSchema::SubjectAttributeDesignatorType& x, 
                                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const SubjectAttributeDesignatorType&);

    // Serialize to std::ostream.
    //

    void
    AttributeValue (::std::ostream& os,
                    const ::middleware::lxacmlSchema::AttributeValueType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeValue (::std::ostream& os,
                    const ::middleware::lxacmlSchema::AttributeValueType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeValue (::std::ostream& os,
                    const ::middleware::lxacmlSchema::AttributeValueType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AttributeValue (::xercesc::XMLFormatTarget& ft,
                    const ::middleware::lxacmlSchema::AttributeValueType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeValue (::xercesc::XMLFormatTarget& ft,
                    const ::middleware::lxacmlSchema::AttributeValueType& x, 
                    ::xml_schema::error_handler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    void
    AttributeValue (::xercesc::XMLFormatTarget& ft,
                    const ::middleware::lxacmlSchema::AttributeValueType& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    const ::std::wstring& e = L"UTF-8",
                    ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AttributeValue (::xercesc::DOMDocument& d,
                    const ::middleware::lxacmlSchema::AttributeValueType& x,
                    ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeValue (const ::middleware::lxacmlSchema::AttributeValueType& x, 
                    const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                    ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AttributeValueType&);

    // Serialize to std::ostream.
    //

    void
    Obligations (::std::ostream& os,
                 const ::middleware::lxacmlSchema::ObligationsType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    Obligations (::std::ostream& os,
                 const ::middleware::lxacmlSchema::ObligationsType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    Obligations (::std::ostream& os,
                 const ::middleware::lxacmlSchema::ObligationsType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Obligations (::xercesc::XMLFormatTarget& ft,
                 const ::middleware::lxacmlSchema::ObligationsType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    Obligations (::xercesc::XMLFormatTarget& ft,
                 const ::middleware::lxacmlSchema::ObligationsType& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    Obligations (::xercesc::XMLFormatTarget& ft,
                 const ::middleware::lxacmlSchema::ObligationsType& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Obligations (::xercesc::DOMDocument& d,
                 const ::middleware::lxacmlSchema::ObligationsType& x,
                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Obligations (const ::middleware::lxacmlSchema::ObligationsType& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ObligationsType&);

    // Serialize to std::ostream.
    //

    void
    Obligation (::std::ostream& os,
                const ::middleware::lxacmlSchema::ObligationType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Obligation (::std::ostream& os,
                const ::middleware::lxacmlSchema::ObligationType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Obligation (::std::ostream& os,
                const ::middleware::lxacmlSchema::ObligationType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Obligation (::xercesc::XMLFormatTarget& ft,
                const ::middleware::lxacmlSchema::ObligationType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Obligation (::xercesc::XMLFormatTarget& ft,
                const ::middleware::lxacmlSchema::ObligationType& x, 
                ::xml_schema::error_handler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    void
    Obligation (::xercesc::XMLFormatTarget& ft,
                const ::middleware::lxacmlSchema::ObligationType& x, 
                ::xercesc::DOMErrorHandler& eh,
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                const ::std::wstring& e = L"UTF-8",
                ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Obligation (::xercesc::DOMDocument& d,
                const ::middleware::lxacmlSchema::ObligationType& x,
                ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Obligation (const ::middleware::lxacmlSchema::ObligationType& x, 
                const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const ObligationType&);

    void
    operator<< (::xercesc::DOMElement&, const EffectType&);

    void
    operator<< (::xercesc::DOMAttr&, const EffectType&);

    void
    operator<< (::xml_schema::list_stream&,
                const EffectType&);

    // Serialize to std::ostream.
    //

    void
    AttributeAssignment (::std::ostream& os,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    AttributeAssignment (::std::ostream& os,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    AttributeAssignment (::std::ostream& os,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    AttributeAssignment (::xercesc::XMLFormatTarget& ft,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    AttributeAssignment (::xercesc::XMLFormatTarget& ft,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& x, 
                         ::xml_schema::error_handler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    void
    AttributeAssignment (::xercesc::XMLFormatTarget& ft,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& x, 
                         ::xercesc::DOMErrorHandler& eh,
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         const ::std::wstring& e = L"UTF-8",
                         ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    AttributeAssignment (::xercesc::DOMDocument& d,
                         const ::middleware::lxacmlSchema::AttributeAssignmentType& x,
                         ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeAssignment (const ::middleware::lxacmlSchema::AttributeAssignmentType& x, 
                         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                         ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const AttributeAssignmentType&);

    // Serialize to std::ostream.
    //

    void
    Description (::std::ostream& os,
                 const ::xml_schema::string& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    Description (::std::ostream& os,
                 const ::xml_schema::string& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    Description (::std::ostream& os,
                 const ::xml_schema::string& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    Description (::xercesc::XMLFormatTarget& ft,
                 const ::xml_schema::string& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    Description (::xercesc::XMLFormatTarget& ft,
                 const ::xml_schema::string& x, 
                 ::xml_schema::error_handler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    void
    Description (::xercesc::XMLFormatTarget& ft,
                 const ::xml_schema::string& x, 
                 ::xercesc::DOMErrorHandler& eh,
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 const ::std::wstring& e = L"UTF-8",
                 ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    Description (::xercesc::DOMDocument& d,
                 const ::xml_schema::string& x,
                 ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Description (const ::xml_schema::string& x, 
                 const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                 ::xml_schema::flags f = 0);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_LXACML_SCHEMA_HXX
