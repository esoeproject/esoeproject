// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "saml2/bindings/lxacml-schema-context.hxx"

namespace middleware
{
  namespace lxacmlContextSchema
  {
    // RequestType
    // 

    const RequestType::Subject_type& RequestType::
    Subject () const
    {
      return this->Subject_.get ();
    }

    RequestType::Subject_type& RequestType::
    Subject ()
    {
      return this->Subject_.get ();
    }

    void RequestType::
    Subject (const Subject_type& x)
    {
      this->Subject_.set (x);
    }

    void RequestType::
    Subject (::std::auto_ptr< Subject_type > x)
    {
      this->Subject_.set (x);
    }

    const RequestType::Resource_type& RequestType::
    Resource () const
    {
      return this->Resource_.get ();
    }

    RequestType::Resource_type& RequestType::
    Resource ()
    {
      return this->Resource_.get ();
    }

    void RequestType::
    Resource (const Resource_type& x)
    {
      this->Resource_.set (x);
    }

    void RequestType::
    Resource (::std::auto_ptr< Resource_type > x)
    {
      this->Resource_.set (x);
    }

    const RequestType::Action_optional& RequestType::
    Action () const
    {
      return this->Action_;
    }

    RequestType::Action_optional& RequestType::
    Action ()
    {
      return this->Action_;
    }

    void RequestType::
    Action (const Action_type& x)
    {
      this->Action_.set (x);
    }

    void RequestType::
    Action (const Action_optional& x)
    {
      this->Action_ = x;
    }

    void RequestType::
    Action (::std::auto_ptr< Action_type > x)
    {
      this->Action_.set (x);
    }


    // SubjectType
    // 

    const SubjectType::Attribute_type& SubjectType::
    Attribute () const
    {
      return this->Attribute_.get ();
    }

    SubjectType::Attribute_type& SubjectType::
    Attribute ()
    {
      return this->Attribute_.get ();
    }

    void SubjectType::
    Attribute (const Attribute_type& x)
    {
      this->Attribute_.set (x);
    }

    void SubjectType::
    Attribute (::std::auto_ptr< Attribute_type > x)
    {
      this->Attribute_.set (x);
    }


    // ResourceType
    // 

    const ResourceType::Attribute_type& ResourceType::
    Attribute () const
    {
      return this->Attribute_.get ();
    }

    ResourceType::Attribute_type& ResourceType::
    Attribute ()
    {
      return this->Attribute_.get ();
    }

    void ResourceType::
    Attribute (const Attribute_type& x)
    {
      this->Attribute_.set (x);
    }

    void ResourceType::
    Attribute (::std::auto_ptr< Attribute_type > x)
    {
      this->Attribute_.set (x);
    }


    // ActionType
    // 

    const ActionType::Attribute_type& ActionType::
    Attribute () const
    {
      return this->Attribute_.get ();
    }

    ActionType::Attribute_type& ActionType::
    Attribute ()
    {
      return this->Attribute_.get ();
    }

    void ActionType::
    Attribute (const Attribute_type& x)
    {
      this->Attribute_.set (x);
    }

    void ActionType::
    Attribute (::std::auto_ptr< Attribute_type > x)
    {
      this->Attribute_.set (x);
    }


    // AttributeType
    // 

    const AttributeType::AttributeValue_type& AttributeType::
    AttributeValue () const
    {
      return this->AttributeValue_.get ();
    }

    AttributeType::AttributeValue_type& AttributeType::
    AttributeValue ()
    {
      return this->AttributeValue_.get ();
    }

    void AttributeType::
    AttributeValue (const AttributeValue_type& x)
    {
      this->AttributeValue_.set (x);
    }

    void AttributeType::
    AttributeValue (::std::auto_ptr< AttributeValue_type > x)
    {
      this->AttributeValue_.set (x);
    }

    const AttributeType::Issuer_optional& AttributeType::
    Issuer () const
    {
      return this->Issuer_;
    }

    AttributeType::Issuer_optional& AttributeType::
    Issuer ()
    {
      return this->Issuer_;
    }

    void AttributeType::
    Issuer (const Issuer_type& x)
    {
      this->Issuer_.set (x);
    }

    void AttributeType::
    Issuer (const Issuer_optional& x)
    {
      this->Issuer_ = x;
    }

    void AttributeType::
    Issuer (::std::auto_ptr< Issuer_type > x)
    {
      this->Issuer_.set (x);
    }


    // ResponseType
    // 

    const ResponseType::Result_type& ResponseType::
    Result () const
    {
      return this->Result_.get ();
    }

    ResponseType::Result_type& ResponseType::
    Result ()
    {
      return this->Result_.get ();
    }

    void ResponseType::
    Result (const Result_type& x)
    {
      this->Result_.set (x);
    }

    void ResponseType::
    Result (::std::auto_ptr< Result_type > x)
    {
      this->Result_.set (x);
    }


    // ResultType
    // 

    const ResultType::Decision_type& ResultType::
    Decision () const
    {
      return this->Decision_.get ();
    }

    ResultType::Decision_type& ResultType::
    Decision ()
    {
      return this->Decision_.get ();
    }

    void ResultType::
    Decision (const Decision_type& x)
    {
      this->Decision_.set (x);
    }

    void ResultType::
    Decision (::std::auto_ptr< Decision_type > x)
    {
      this->Decision_.set (x);
    }

    const ResultType::Status_optional& ResultType::
    Status () const
    {
      return this->Status_;
    }

    ResultType::Status_optional& ResultType::
    Status ()
    {
      return this->Status_;
    }

    void ResultType::
    Status (const Status_type& x)
    {
      this->Status_.set (x);
    }

    void ResultType::
    Status (const Status_optional& x)
    {
      this->Status_ = x;
    }

    void ResultType::
    Status (::std::auto_ptr< Status_type > x)
    {
      this->Status_.set (x);
    }

    const ResultType::Obligations_type& ResultType::
    Obligations () const
    {
      return this->Obligations_.get ();
    }

    ResultType::Obligations_type& ResultType::
    Obligations ()
    {
      return this->Obligations_.get ();
    }

    void ResultType::
    Obligations (const Obligations_type& x)
    {
      this->Obligations_.set (x);
    }

    void ResultType::
    Obligations (::std::auto_ptr< Obligations_type > x)
    {
      this->Obligations_.set (x);
    }


    // DecisionType
    // 

    DecisionType::
    DecisionType ()
    : ::xml_schema::string ()
    {
    }

    DecisionType::
    DecisionType (value v)
    : ::xml_schema::string (_xsd_DecisionType_literals_[v])
    {
    }

    DecisionType::
    DecisionType (const wchar_t* v)
    : ::xml_schema::string (v)
    {
    }

    DecisionType::
    DecisionType (const ::std::wstring& v)
    : ::xml_schema::string (v)
    {
    }

    DecisionType::
    DecisionType (const ::xml_schema::string& v)
    : ::xml_schema::string (v)
    {
    }

    DecisionType::
    DecisionType (const DecisionType& v,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (v, f, c)
    {
    }

    DecisionType& DecisionType::
    operator= (value v)
    {
      static_cast< ::xml_schema::string& > (*this) = 
      ::xml_schema::string (_xsd_DecisionType_literals_[v]);

      return *this;
    }


    // StatusType
    // 

    const StatusType::StatusMessage_optional& StatusType::
    StatusMessage () const
    {
      return this->StatusMessage_;
    }

    StatusType::StatusMessage_optional& StatusType::
    StatusMessage ()
    {
      return this->StatusMessage_;
    }

    void StatusType::
    StatusMessage (const StatusMessage_type& x)
    {
      this->StatusMessage_.set (x);
    }

    void StatusType::
    StatusMessage (const StatusMessage_optional& x)
    {
      this->StatusMessage_ = x;
    }

    void StatusType::
    StatusMessage (::std::auto_ptr< StatusMessage_type > x)
    {
      this->StatusMessage_.set (x);
    }
  }
}

#include <xsd/cxx/xml/dom/wildcard-source.hxx>

#include <xsd/cxx/xml/dom/parsing-source.hxx>

#include <xsd/cxx/tree/type-factory-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_factory_plate< 0, wchar_t >
  type_factory_plate_init;
}

namespace middleware
{
  namespace lxacmlContextSchema
  {
    // RequestType
    //

    RequestType::
    RequestType ()
    : ::xml_schema::type (),
      Subject_ (::xml_schema::flags (), this),
      Resource_ (::xml_schema::flags (), this),
      Action_ (::xml_schema::flags (), this)
    {
    }

    RequestType::
    RequestType (const Subject_type& Subject,
                 const Resource_type& Resource)
    : ::xml_schema::type (),
      Subject_ (Subject, ::xml_schema::flags (), this),
      Resource_ (Resource, ::xml_schema::flags (), this),
      Action_ (::xml_schema::flags (), this)
    {
    }

    RequestType::
    RequestType (::std::auto_ptr< Subject_type >& Subject,
                 ::std::auto_ptr< Resource_type >& Resource)
    : ::xml_schema::type (),
      Subject_ (Subject, ::xml_schema::flags (), this),
      Resource_ (Resource, ::xml_schema::flags (), this),
      Action_ (::xml_schema::flags (), this)
    {
    }

    RequestType::
    RequestType (const RequestType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Subject_ (x.Subject_, f, this),
      Resource_ (x.Resource_, f, this),
      Action_ (x.Action_, f, this)
    {
    }

    RequestType::
    RequestType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Subject_ (f, this),
      Resource_ (f, this),
      Action_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void RequestType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Subject
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Subject",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< Subject_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Subject_.present ())
            {
              ::std::auto_ptr< Subject_type > r (
                dynamic_cast< Subject_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Subject_.set (r);
              continue;
            }
          }
        }

        // Resource
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Resource",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< Resource_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Resource_.present ())
            {
              ::std::auto_ptr< Resource_type > r (
                dynamic_cast< Resource_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Resource_.set (r);
              continue;
            }
          }
        }

        // Action
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Action",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< Action_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Action_)
            {
              ::std::auto_ptr< Action_type > r (
                dynamic_cast< Action_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Action_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Subject_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Subject",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }

      if (!Resource_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Resource",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }
    }

    RequestType* RequestType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class RequestType (*this, f, c);
    }

    RequestType::
    ~RequestType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, RequestType >
    _xsd_RequestType_type_factory_init (
      L"RequestType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");

    // SubjectType
    //

    SubjectType::
    SubjectType ()
    : ::xml_schema::type (),
      Attribute_ (::xml_schema::flags (), this)
    {
    }

    SubjectType::
    SubjectType (const Attribute_type& Attribute)
    : ::xml_schema::type (),
      Attribute_ (Attribute, ::xml_schema::flags (), this)
    {
    }

    SubjectType::
    SubjectType (::std::auto_ptr< Attribute_type >& Attribute)
    : ::xml_schema::type (),
      Attribute_ (Attribute, ::xml_schema::flags (), this)
    {
    }

    SubjectType::
    SubjectType (const SubjectType& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attribute_ (x.Attribute_, f, this)
    {
    }

    SubjectType::
    SubjectType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attribute_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void SubjectType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Attribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Attribute",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< Attribute_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Attribute_.present ())
            {
              ::std::auto_ptr< Attribute_type > r (
                dynamic_cast< Attribute_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Attribute_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Attribute_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Attribute",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }
    }

    SubjectType* SubjectType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class SubjectType (*this, f, c);
    }

    SubjectType::
    ~SubjectType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, SubjectType >
    _xsd_SubjectType_type_factory_init (
      L"SubjectType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");

    // ResourceType
    //

    ResourceType::
    ResourceType ()
    : ::xml_schema::type (),
      Attribute_ (::xml_schema::flags (), this)
    {
    }

    ResourceType::
    ResourceType (const Attribute_type& Attribute)
    : ::xml_schema::type (),
      Attribute_ (Attribute, ::xml_schema::flags (), this)
    {
    }

    ResourceType::
    ResourceType (::std::auto_ptr< Attribute_type >& Attribute)
    : ::xml_schema::type (),
      Attribute_ (Attribute, ::xml_schema::flags (), this)
    {
    }

    ResourceType::
    ResourceType (const ResourceType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attribute_ (x.Attribute_, f, this)
    {
    }

    ResourceType::
    ResourceType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attribute_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ResourceType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Attribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Attribute",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< Attribute_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Attribute_.present ())
            {
              ::std::auto_ptr< Attribute_type > r (
                dynamic_cast< Attribute_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Attribute_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Attribute_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Attribute",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }
    }

    ResourceType* ResourceType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ResourceType (*this, f, c);
    }

    ResourceType::
    ~ResourceType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ResourceType >
    _xsd_ResourceType_type_factory_init (
      L"ResourceType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");

    // ActionType
    //

    ActionType::
    ActionType ()
    : ::xml_schema::type (),
      Attribute_ (::xml_schema::flags (), this)
    {
    }

    ActionType::
    ActionType (const Attribute_type& Attribute)
    : ::xml_schema::type (),
      Attribute_ (Attribute, ::xml_schema::flags (), this)
    {
    }

    ActionType::
    ActionType (::std::auto_ptr< Attribute_type >& Attribute)
    : ::xml_schema::type (),
      Attribute_ (Attribute, ::xml_schema::flags (), this)
    {
    }

    ActionType::
    ActionType (const ActionType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Attribute_ (x.Attribute_, f, this)
    {
    }

    ActionType::
    ActionType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Attribute_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ActionType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Attribute
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Attribute",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< Attribute_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Attribute_.present ())
            {
              ::std::auto_ptr< Attribute_type > r (
                dynamic_cast< Attribute_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Attribute_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Attribute_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Attribute",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }
    }

    ActionType* ActionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ActionType (*this, f, c);
    }

    ActionType::
    ~ActionType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ActionType >
    _xsd_ActionType_type_factory_init (
      L"ActionType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");

    // AttributeType
    //

    AttributeType::
    AttributeType ()
    : ::xml_schema::type (),
      AttributeValue_ (::xml_schema::flags (), this),
      Issuer_ (::xml_schema::flags (), this)
    {
    }

    AttributeType::
    AttributeType (const AttributeValue_type& AttributeValue)
    : ::xml_schema::type (),
      AttributeValue_ (AttributeValue, ::xml_schema::flags (), this),
      Issuer_ (::xml_schema::flags (), this)
    {
    }

    AttributeType::
    AttributeType (::std::auto_ptr< AttributeValue_type >& AttributeValue)
    : ::xml_schema::type (),
      AttributeValue_ (AttributeValue, ::xml_schema::flags (), this),
      Issuer_ (::xml_schema::flags (), this)
    {
    }

    AttributeType::
    AttributeType (const AttributeType& x,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      AttributeValue_ (x.AttributeValue_, f, this),
      Issuer_ (x.Issuer_, f, this)
    {
    }

    AttributeType::
    AttributeType (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f,
                   ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      AttributeValue_ (f, this),
      Issuer_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, true);
        this->parse (p, f);
      }
    }

    void AttributeType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // AttributeValue
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"AttributeValue",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< AttributeValue_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!AttributeValue_.present ())
            {
              ::std::auto_ptr< AttributeValue_type > r (
                dynamic_cast< AttributeValue_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->AttributeValue_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!AttributeValue_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }

      while (p.more_attributes ())
      {
        const ::xercesc::DOMAttr& i (p.next_attribute ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        if (n.name () == L"Issuer" && n.namespace_ ().empty ())
        {
          ::std::auto_ptr< Issuer_type > r (
            Issuer_traits::create (i, f, this));

          this->Issuer_.set (r);
          continue;
        }
      }
    }

    AttributeType* AttributeType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class AttributeType (*this, f, c);
    }

    AttributeType::
    ~AttributeType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, AttributeType >
    _xsd_AttributeType_type_factory_init (
      L"AttributeType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");

    // ResponseType
    //

    ResponseType::
    ResponseType ()
    : ::xml_schema::type (),
      Result_ (::xml_schema::flags (), this)
    {
    }

    ResponseType::
    ResponseType (const Result_type& Result)
    : ::xml_schema::type (),
      Result_ (Result, ::xml_schema::flags (), this)
    {
    }

    ResponseType::
    ResponseType (::std::auto_ptr< Result_type >& Result)
    : ::xml_schema::type (),
      Result_ (Result, ::xml_schema::flags (), this)
    {
    }

    ResponseType::
    ResponseType (const ResponseType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Result_ (x.Result_, f, this)
    {
    }

    ResponseType::
    ResponseType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Result_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ResponseType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Result
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Result",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< Result_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Result_.present ())
            {
              ::std::auto_ptr< Result_type > r (
                dynamic_cast< Result_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Result_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Result_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Result",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }
    }

    ResponseType* ResponseType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ResponseType (*this, f, c);
    }

    ResponseType::
    ~ResponseType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ResponseType >
    _xsd_ResponseType_type_factory_init (
      L"ResponseType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");

    // ResultType
    //

    ResultType::
    ResultType ()
    : ::xml_schema::type (),
      Decision_ (::xml_schema::flags (), this),
      Status_ (::xml_schema::flags (), this),
      Obligations_ (::xml_schema::flags (), this)
    {
    }

    ResultType::
    ResultType (const Decision_type& Decision,
                const Obligations_type& Obligations)
    : ::xml_schema::type (),
      Decision_ (Decision, ::xml_schema::flags (), this),
      Status_ (::xml_schema::flags (), this),
      Obligations_ (Obligations, ::xml_schema::flags (), this)
    {
    }

    ResultType::
    ResultType (const Decision_type& Decision,
                ::std::auto_ptr< Obligations_type >& Obligations)
    : ::xml_schema::type (),
      Decision_ (Decision, ::xml_schema::flags (), this),
      Status_ (::xml_schema::flags (), this),
      Obligations_ (Obligations, ::xml_schema::flags (), this)
    {
    }

    ResultType::
    ResultType (::std::auto_ptr< Decision_type >& Decision,
                ::std::auto_ptr< Obligations_type >& Obligations)
    : ::xml_schema::type (),
      Decision_ (Decision, ::xml_schema::flags (), this),
      Status_ (::xml_schema::flags (), this),
      Obligations_ (Obligations, ::xml_schema::flags (), this)
    {
    }

    ResultType::
    ResultType (const ResultType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      Decision_ (x.Decision_, f, this),
      Status_ (x.Status_, f, this),
      Obligations_ (x.Obligations_, f, this)
    {
    }

    ResultType::
    ResultType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      Decision_ (f, this),
      Status_ (f, this),
      Obligations_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void ResultType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // Decision
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Decision",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< Decision_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Decision_.present ())
            {
              ::std::auto_ptr< Decision_type > r (
                dynamic_cast< Decision_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Decision_.set (r);
              continue;
            }
          }
        }

        // Status
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Status",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< Status_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->Status_)
            {
              ::std::auto_ptr< Status_type > r (
                dynamic_cast< Status_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Status_.set (r);
              continue;
            }
          }
        }

        // Obligations
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"Obligations",
              L"http://www.qut.com/middleware/lxacmlSchema",
              &::xsd::cxx::tree::factory_impl< Obligations_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!Obligations_.present ())
            {
              ::std::auto_ptr< Obligations_type > r (
                dynamic_cast< Obligations_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->Obligations_.set (r);
              continue;
            }
          }
        }

        break;
      }

      if (!Decision_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Decision",
          L"http://www.qut.com/middleware/lxacmlContextSchema");
      }

      if (!Obligations_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< wchar_t > (
          L"Obligations",
          L"http://www.qut.com/middleware/lxacmlSchema");
      }
    }

    ResultType* ResultType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class ResultType (*this, f, c);
    }

    ResultType::
    ~ResultType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, ResultType >
    _xsd_ResultType_type_factory_init (
      L"ResultType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");

    // DecisionType
    //

    DecisionType::
    DecisionType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (e, f, c)
    {
      _xsd_DecisionType_convert ();
    }

    DecisionType::
    DecisionType (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (a, f, c)
    {
      _xsd_DecisionType_convert ();
    }

    DecisionType::
    DecisionType (const ::std::wstring& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
    : ::xml_schema::string (s, e, f, c)
    {
      _xsd_DecisionType_convert ();
    }

    DecisionType* DecisionType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class DecisionType (*this, f, c);
    }

    DecisionType::value DecisionType::
    _xsd_DecisionType_convert () const
    {
      ::xsd::cxx::tree::enum_comparator< wchar_t > c (_xsd_DecisionType_literals_);
      const value* i (::std::lower_bound (
                        _xsd_DecisionType_indexes_,
                        _xsd_DecisionType_indexes_ + 2,
                        *this,
                        c));

      if (i == _xsd_DecisionType_indexes_ + 2 || _xsd_DecisionType_literals_[*i] != *this)
      {
        throw ::xsd::cxx::tree::unexpected_enumerator < wchar_t > (*this);
      }

      return *i;
    }

    const wchar_t* const DecisionType::
    _xsd_DecisionType_literals_[2] =
    {
      L"Permit",
      L"Deny"
    };

    const DecisionType::value DecisionType::
    _xsd_DecisionType_indexes_[2] =
    {
      ::middleware::lxacmlContextSchema::DecisionType::Deny,
      ::middleware::lxacmlContextSchema::DecisionType::Permit
    };

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, DecisionType >
    _xsd_DecisionType_type_factory_init (
      L"DecisionType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");

    // StatusType
    //

    StatusType::
    StatusType ()
    : ::xml_schema::type (),
      StatusMessage_ (::xml_schema::flags (), this)
    {
    }

    StatusType::
    StatusType (const StatusType& x,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (x, f, c),
      StatusMessage_ (x.StatusMessage_, f, this)
    {
    }

    StatusType::
    StatusType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f,
                ::xml_schema::container* c)
    : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
      StatusMessage_ (f, this)
    {
      if ((f & ::xml_schema::flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< wchar_t > p (e, true, false);
        this->parse (p, f);
      }
    }

    void StatusType::
    parse (::xsd::cxx::xml::dom::parser< wchar_t >& p,
           ::xml_schema::flags f)
    {
      for (; p.more_elements (); p.next_element ())
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< wchar_t > n (
          ::xsd::cxx::xml::dom::name< wchar_t > (i));

        // StatusMessage
        //
        {
          ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
            ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

          ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
            tfm.create (
              L"StatusMessage",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              &::xsd::cxx::tree::factory_impl< StatusMessage_type >,
              true, true, i, n, f, this));

          if (tmp.get () != 0)
          {
            if (!this->StatusMessage_)
            {
              ::std::auto_ptr< StatusMessage_type > r (
                dynamic_cast< StatusMessage_type* > (tmp.get ()));

              if (r.get ())
                tmp.release ();
              else
                throw ::xsd::cxx::tree::not_derived< wchar_t > ();

              this->StatusMessage_.set (r);
              continue;
            }
          }
        }

        break;
      }
    }

    StatusType* StatusType::
    _clone (::xml_schema::flags f,
            ::xml_schema::container* c) const
    {
      return new class StatusType (*this, f, c);
    }

    StatusType::
    ~StatusType ()
    {
    }

    static
    const ::xsd::cxx::tree::type_factory_initializer< 0, wchar_t, StatusType >
    _xsd_StatusType_type_factory_init (
      L"StatusType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace middleware
{
  namespace lxacmlContextSchema
  {
    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::std::wstring& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType > r (
        ::middleware::lxacmlContextSchema::Request (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::std::wstring& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType > r (
        ::middleware::lxacmlContextSchema::Request (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::std::wstring& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType > r (
        ::middleware::lxacmlContextSchema::Request (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Request (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Request (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Request (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             const ::std::wstring& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Request (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             const ::std::wstring& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Request (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::std::istream& is,
             const ::std::wstring& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Request (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType > r (
        ::middleware::lxacmlContextSchema::Request (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType > r (
        ::middleware::lxacmlContextSchema::Request (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType > r (
        ::middleware::lxacmlContextSchema::Request (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType > r (
          ::middleware::lxacmlContextSchema::Request (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Request",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::RequestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::RequestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Request",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType >
    Request (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Request",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::RequestType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::RequestType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::RequestType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Request",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::std::wstring& u,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType > r (
        ::middleware::lxacmlContextSchema::Subject (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::std::wstring& u,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType > r (
        ::middleware::lxacmlContextSchema::Subject (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::std::wstring& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType > r (
        ::middleware::lxacmlContextSchema::Subject (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Subject (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Subject (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Subject (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             const ::std::wstring& sid,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Subject (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             const ::std::wstring& sid,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Subject (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::std::istream& is,
             const ::std::wstring& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Subject (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::xercesc::InputSource& i,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType > r (
        ::middleware::lxacmlContextSchema::Subject (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::xercesc::InputSource& i,
             ::xml_schema::error_handler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType > r (
        ::middleware::lxacmlContextSchema::Subject (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType > r (
        ::middleware::lxacmlContextSchema::Subject (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType > r (
          ::middleware::lxacmlContextSchema::Subject (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Subject",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::SubjectType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::SubjectType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Subject",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType >
    Subject (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
             ::xml_schema::flags f,
             const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Subject",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::SubjectType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::SubjectType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::SubjectType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Subject",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::std::wstring& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType > r (
        ::middleware::lxacmlContextSchema::Resource (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::std::wstring& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType > r (
        ::middleware::lxacmlContextSchema::Resource (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::std::wstring& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType > r (
        ::middleware::lxacmlContextSchema::Resource (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Resource (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Resource (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Resource (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Resource (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Resource (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::std::istream& is,
              const ::std::wstring& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Resource (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType > r (
        ::middleware::lxacmlContextSchema::Resource (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType > r (
        ::middleware::lxacmlContextSchema::Resource (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType > r (
        ::middleware::lxacmlContextSchema::Resource (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType > r (
          ::middleware::lxacmlContextSchema::Resource (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Resource",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::ResourceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::ResourceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Resource",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType >
    Resource (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Resource",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::ResourceType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResourceType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::ResourceType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Resource",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::std::wstring& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType > r (
        ::middleware::lxacmlContextSchema::Action (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::std::wstring& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType > r (
        ::middleware::lxacmlContextSchema::Action (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::std::wstring& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType > r (
        ::middleware::lxacmlContextSchema::Action (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Action (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Action (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Action (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Action (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Action (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::std::istream& is,
            const ::std::wstring& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Action (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType > r (
        ::middleware::lxacmlContextSchema::Action (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType > r (
        ::middleware::lxacmlContextSchema::Action (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType > r (
        ::middleware::lxacmlContextSchema::Action (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType > r (
          ::middleware::lxacmlContextSchema::Action (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Action",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::ActionType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::ActionType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Action",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType >
    Action (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Action",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::ActionType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::ActionType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::ActionType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Action",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::std::wstring& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType > r (
        ::middleware::lxacmlContextSchema::Attribute (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::std::wstring& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType > r (
        ::middleware::lxacmlContextSchema::Attribute (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::std::wstring& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType > r (
        ::middleware::lxacmlContextSchema::Attribute (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Attribute (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Attribute (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Attribute (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Attribute (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               const ::std::wstring& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Attribute (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::std::istream& is,
               const ::std::wstring& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Attribute (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType > r (
        ::middleware::lxacmlContextSchema::Attribute (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType > r (
        ::middleware::lxacmlContextSchema::Attribute (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType > r (
        ::middleware::lxacmlContextSchema::Attribute (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType > r (
          ::middleware::lxacmlContextSchema::Attribute (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Attribute",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::AttributeType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::AttributeType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Attribute",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType >
    Attribute (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Attribute",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::AttributeType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::AttributeType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Attribute",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::std::wstring& u,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType > r (
        ::middleware::lxacmlContextSchema::AttributeValue (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::std::wstring& u,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType > r (
        ::middleware::lxacmlContextSchema::AttributeValue (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::std::wstring& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType > r (
        ::middleware::lxacmlContextSchema::AttributeValue (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::AttributeValue (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::AttributeValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::AttributeValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& sid,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::AttributeValue (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& sid,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::AttributeValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::std::istream& is,
                    const ::std::wstring& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::AttributeValue (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::xercesc::InputSource& i,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType > r (
        ::middleware::lxacmlContextSchema::AttributeValue (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::xercesc::InputSource& i,
                    ::xml_schema::error_handler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType > r (
        ::middleware::lxacmlContextSchema::AttributeValue (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType > r (
        ::middleware::lxacmlContextSchema::AttributeValue (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType > r (
          ::middleware::lxacmlContextSchema::AttributeValue (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::AttributeValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::AttributeValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"AttributeValue",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType >
    AttributeValue (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f,
                    const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::AttributeValueType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::AttributeValueType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::AttributeValueType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"AttributeValue",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::std::wstring& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType > r (
        ::middleware::lxacmlContextSchema::Response (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::std::wstring& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType > r (
        ::middleware::lxacmlContextSchema::Response (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::std::wstring& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType > r (
        ::middleware::lxacmlContextSchema::Response (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Response (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Response (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Response (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Response (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Response (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::std::istream& is,
              const ::std::wstring& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Response (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType > r (
        ::middleware::lxacmlContextSchema::Response (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType > r (
        ::middleware::lxacmlContextSchema::Response (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType > r (
        ::middleware::lxacmlContextSchema::Response (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType > r (
          ::middleware::lxacmlContextSchema::Response (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Response",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::ResponseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::ResponseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Response",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType >
    Response (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Response",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::ResponseType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResponseType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::ResponseType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Response",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::std::wstring& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType > r (
        ::middleware::lxacmlContextSchema::Result (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::std::wstring& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType > r (
        ::middleware::lxacmlContextSchema::Result (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::std::wstring& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType > r (
        ::middleware::lxacmlContextSchema::Result (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Result (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Result (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Result (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Result (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Result (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::std::istream& is,
            const ::std::wstring& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Result (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType > r (
        ::middleware::lxacmlContextSchema::Result (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType > r (
        ::middleware::lxacmlContextSchema::Result (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType > r (
        ::middleware::lxacmlContextSchema::Result (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType > r (
          ::middleware::lxacmlContextSchema::Result (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Result",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::ResultType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::ResultType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Result",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType >
    Result (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Result",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::ResultType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::ResultType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::ResultType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Result",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::std::wstring& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType > r (
        ::middleware::lxacmlContextSchema::Decision (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::std::wstring& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType > r (
        ::middleware::lxacmlContextSchema::Decision (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::std::wstring& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType > r (
        ::middleware::lxacmlContextSchema::Decision (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Decision (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Decision (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Decision (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Decision (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              const ::std::wstring& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Decision (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::std::istream& is,
              const ::std::wstring& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Decision (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType > r (
        ::middleware::lxacmlContextSchema::Decision (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType > r (
        ::middleware::lxacmlContextSchema::Decision (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType > r (
        ::middleware::lxacmlContextSchema::Decision (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType > r (
          ::middleware::lxacmlContextSchema::Decision (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Decision",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::DecisionType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::DecisionType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Decision",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType >
    Decision (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Decision",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::DecisionType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::DecisionType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::DecisionType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Decision",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::std::wstring& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType > r (
        ::middleware::lxacmlContextSchema::Status (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::std::wstring& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType > r (
        ::middleware::lxacmlContextSchema::Status (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::std::wstring& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType > r (
        ::middleware::lxacmlContextSchema::Status (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Status (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Status (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::Status (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Status (isrc, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            const ::std::wstring& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Status (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::std::istream& is,
            const ::std::wstring& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::Status (isrc, h, f, p);
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType > r (
        ::middleware::lxacmlContextSchema::Status (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType > r (
        ::middleware::lxacmlContextSchema::Status (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType > r (
        ::middleware::lxacmlContextSchema::Status (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (const ::xercesc::DOMDocument& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType > r (
          ::middleware::lxacmlContextSchema::Status (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Status",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::StatusType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::StatusType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Status",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType >
    Status (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"Status",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::middleware::lxacmlContextSchema::StatusType >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::middleware::lxacmlContextSchema::StatusType > r (
          dynamic_cast< ::middleware::lxacmlContextSchema::StatusType* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"Status",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::wstring& u,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::middleware::lxacmlContextSchema::StatusMessage (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::wstring& u,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::middleware::lxacmlContextSchema::StatusMessage (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::std::wstring& u,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::middleware::lxacmlContextSchema::StatusMessage (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::StatusMessage (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::StatusMessage (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::middleware::lxacmlContextSchema::StatusMessage (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::wstring& sid,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::StatusMessage (isrc, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::wstring& sid,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0,
        (f & ::xml_schema::flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::StatusMessage (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::std::istream& is,
                   const ::std::wstring& sid,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::middleware::lxacmlContextSchema::StatusMessage (isrc, h, f, p);
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::xercesc::InputSource& i,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< wchar_t > > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::middleware::lxacmlContextSchema::StatusMessage (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::xercesc::InputSource& i,
                   ::xml_schema::error_handler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::middleware::lxacmlContextSchema::StatusMessage (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::xercesc::InputSource& i,
                   ::xercesc::DOMErrorHandler& h,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< wchar_t > (i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< wchar_t > ();

      ::std::auto_ptr< ::xml_schema::string > r (
        ::middleware::lxacmlContextSchema::StatusMessage (
          d, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties& p)
    {
      if (f & ::xml_schema::flags::keep_dom)
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
          static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

        ::std::auto_ptr< ::xml_schema::string > r (
          ::middleware::lxacmlContextSchema::StatusMessage (
            c, f | ::xml_schema::flags::own_dom, p));

        return r;
      }

      const ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"StatusMessage",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::string >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {
        ::std::auto_ptr< ::xml_schema::string > r (
          dynamic_cast< ::xml_schema::string* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"StatusMessage",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }

    ::std::auto_ptr< ::xml_schema::string >
    StatusMessage (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                   ::xml_schema::flags f,
                   const ::xml_schema::properties&)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::flags::keep_dom) &&
         !(f & ::xml_schema::flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (f & ::xml_schema::flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      ::xsd::cxx::tree::type_factory_map< wchar_t >& tfm (
        ::xsd::cxx::tree::type_factory_map_instance< 0, wchar_t > ());

      ::std::auto_ptr< ::xsd::cxx::tree::type > tmp (
        tfm.create (
          L"StatusMessage",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          &::xsd::cxx::tree::factory_impl< ::xml_schema::string >,
          true, true, e, n, f, 0));

      if (tmp.get () != 0)
      {

        ::std::auto_ptr< ::xml_schema::string > r (
          dynamic_cast< ::xml_schema::string* > (tmp.get ()));

        if (r.get ())
          tmp.release ();
        else
          throw ::xsd::cxx::tree::not_derived< wchar_t > ();

        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
        n.name (),
        n.namespace_ (),
        L"StatusMessage",
        L"http://www.qut.com/middleware/lxacmlContextSchema");
    }
  }
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

#include <xsd/cxx/tree/type-serializer-map.hxx>

namespace _xsd
{
  static
  const ::xsd::cxx::tree::type_serializer_plate< 0, wchar_t >
  type_serializer_plate_init;
}

namespace middleware
{
  namespace lxacmlContextSchema
  {
    void
    Request (::std::ostream& o,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Request (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Request (::std::ostream& o,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Request (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Request (::std::ostream& o,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Request (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Request (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Request (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Request (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Request (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Request (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Request (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Request (::xercesc::DOMDocument& d,
             const ::middleware::lxacmlContextSchema::RequestType& s,
             ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlContextSchema::RequestType) == typeid (s))
      {
        if (n.name () == L"Request" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlContextSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Request",
            L"http://www.qut.com/middleware/lxacmlContextSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Request",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Request (const ::middleware::lxacmlContextSchema::RequestType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlContextSchema::RequestType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Request",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Request",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlContextSchema::Request (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const RequestType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Subject
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const RequestType::Subject_type& x (i.Subject ());
        if (typeid (RequestType::Subject_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Subject",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Subject",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true, true, e, x);
      }

      // Resource
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const RequestType::Resource_type& x (i.Resource ());
        if (typeid (RequestType::Resource_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Resource",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Resource",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true, true, e, x);
      }

      // Action
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Action ())
        {
          const RequestType::Action_type& x (*i.Action ());
          if (typeid (RequestType::Action_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Action",
                L"http://www.qut.com/middleware/lxacmlContextSchema",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"Action",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true, true, e, x);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, RequestType >
    _xsd_RequestType_type_serializer_init (
      L"RequestType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Subject (::std::ostream& o,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Subject (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Subject (::std::ostream& o,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Subject (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Subject (::std::ostream& o,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Subject (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Subject (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Subject (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Subject (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             ::xml_schema::error_handler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Subject (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Subject (::xercesc::XMLFormatTarget& t,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::namespace_infomap& m,
             const ::std::wstring& e,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Subject (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Subject (::xercesc::DOMDocument& d,
             const ::middleware::lxacmlContextSchema::SubjectType& s,
             ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlContextSchema::SubjectType) == typeid (s))
      {
        if (n.name () == L"Subject" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlContextSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Subject",
            L"http://www.qut.com/middleware/lxacmlContextSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Subject",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Subject (const ::middleware::lxacmlContextSchema::SubjectType& s,
             const ::xml_schema::namespace_infomap& m,
             ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlContextSchema::SubjectType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Subject",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Subject",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlContextSchema::Subject (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const SubjectType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attribute
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const SubjectType::Attribute_type& x (i.Attribute ());
        if (typeid (SubjectType::Attribute_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Attribute",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Attribute",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true, true, e, x);
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, SubjectType >
    _xsd_SubjectType_type_serializer_init (
      L"SubjectType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Resource (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Resource (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Resource (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Resource (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Resource (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Resource (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Resource (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Resource (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Resource (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Resource (::xercesc::DOMDocument& d,
              const ::middleware::lxacmlContextSchema::ResourceType& s,
              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlContextSchema::ResourceType) == typeid (s))
      {
        if (n.name () == L"Resource" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlContextSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Resource",
            L"http://www.qut.com/middleware/lxacmlContextSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Resource",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Resource (const ::middleware::lxacmlContextSchema::ResourceType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlContextSchema::ResourceType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Resource",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Resource",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlContextSchema::Resource (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ResourceType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attribute
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ResourceType::Attribute_type& x (i.Attribute ());
        if (typeid (ResourceType::Attribute_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Attribute",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Attribute",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true, true, e, x);
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ResourceType >
    _xsd_ResourceType_type_serializer_init (
      L"ResourceType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Action (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Action (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Action (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Action (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Action (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Action (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Action (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Action (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Action (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Action (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlContextSchema::ActionType& s,
            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlContextSchema::ActionType) == typeid (s))
      {
        if (n.name () == L"Action" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlContextSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Action",
            L"http://www.qut.com/middleware/lxacmlContextSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Action",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Action (const ::middleware::lxacmlContextSchema::ActionType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlContextSchema::ActionType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Action",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Action",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlContextSchema::Action (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ActionType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Attribute
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ActionType::Attribute_type& x (i.Attribute ());
        if (typeid (ActionType::Attribute_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Attribute",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Attribute",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true, true, e, x);
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ActionType >
    _xsd_ActionType_type_serializer_init (
      L"ActionType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Attribute (::std::ostream& o,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Attribute (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Attribute (::std::ostream& o,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Attribute (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Attribute (::std::ostream& o,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Attribute (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Attribute (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Attribute (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Attribute (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Attribute (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Attribute (::xercesc::XMLFormatTarget& t,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::wstring& e,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Attribute (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Attribute (::xercesc::DOMDocument& d,
               const ::middleware::lxacmlContextSchema::AttributeType& s,
               ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlContextSchema::AttributeType) == typeid (s))
      {
        if (n.name () == L"Attribute" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlContextSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Attribute",
            L"http://www.qut.com/middleware/lxacmlContextSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Attribute",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Attribute (const ::middleware::lxacmlContextSchema::AttributeType& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlContextSchema::AttributeType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Attribute",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Attribute",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlContextSchema::Attribute (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const AttributeType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // AttributeValue
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const AttributeType::AttributeValue_type& x (i.AttributeValue ());
        if (typeid (AttributeType::AttributeValue_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"AttributeValue",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"AttributeValue",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true, true, e, x);
      }

      // Issuer
      //
      if (i.Issuer ())
      {
        ::xercesc::DOMAttr& a (
          ::xsd::cxx::xml::dom::create_attribute (
            L"Issuer",
            e));

        a << *i.Issuer ();
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, AttributeType >
    _xsd_AttributeType_type_serializer_init (
      L"AttributeType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    AttributeValue (::std::ostream& o,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::AttributeValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeValue (::std::ostream& o,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::AttributeValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::std::ostream& o,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::AttributeValue (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::xercesc::XMLFormatTarget& t,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::AttributeValue (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    AttributeValue (::xercesc::XMLFormatTarget& t,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    ::xml_schema::error_handler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::AttributeValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::xercesc::XMLFormatTarget& t,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::namespace_infomap& m,
                    const ::std::wstring& e,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::AttributeValue (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    AttributeValue (::xercesc::DOMDocument& d,
                    const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlContextSchema::AttributeValueType) == typeid (s))
      {
        if (n.name () == L"AttributeValue" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlContextSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"AttributeValue",
            L"http://www.qut.com/middleware/lxacmlContextSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"AttributeValue",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    AttributeValue (const ::middleware::lxacmlContextSchema::AttributeValueType& s,
                    const ::xml_schema::namespace_infomap& m,
                    ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlContextSchema::AttributeValueType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"AttributeValue",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"AttributeValue",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlContextSchema::AttributeValue (*d, s, f);
      return d;
    }

    void
    Response (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Response (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Response (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Response (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Response (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Response (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Response (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Response (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Response (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Response (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Response (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Response (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Response (::xercesc::DOMDocument& d,
              const ::middleware::lxacmlContextSchema::ResponseType& s,
              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlContextSchema::ResponseType) == typeid (s))
      {
        if (n.name () == L"Response" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlContextSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Response",
            L"http://www.qut.com/middleware/lxacmlContextSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Response",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Response (const ::middleware::lxacmlContextSchema::ResponseType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlContextSchema::ResponseType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Response",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Response",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlContextSchema::Response (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ResponseType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Result
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ResponseType::Result_type& x (i.Result ());
        if (typeid (ResponseType::Result_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Result",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Result",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true, true, e, x);
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ResponseType >
    _xsd_ResponseType_type_serializer_init (
      L"ResponseType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Result (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Result (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Result (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Result (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Result (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Result (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Result (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Result (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Result (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Result (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Result (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Result (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Result (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlContextSchema::ResultType& s,
            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlContextSchema::ResultType) == typeid (s))
      {
        if (n.name () == L"Result" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlContextSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Result",
            L"http://www.qut.com/middleware/lxacmlContextSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Result",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Result (const ::middleware::lxacmlContextSchema::ResultType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlContextSchema::ResultType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Result",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Result",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlContextSchema::Result (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const ResultType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // Decision
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ResultType::Decision_type& x (i.Decision ());
        if (typeid (ResultType::Decision_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Decision",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Decision",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            true, true, e, x);
      }

      // Status
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.Status ())
        {
          const ResultType::Status_type& x (*i.Status ());
          if (typeid (ResultType::Status_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"Status",
                L"http://www.qut.com/middleware/lxacmlContextSchema",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"Status",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true, true, e, x);
        }
      }

      // Obligations
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        const ResultType::Obligations_type& x (i.Obligations ());
        if (typeid (ResultType::Obligations_type) == typeid (x))
        {
          ::xercesc::DOMElement& s (
            ::xsd::cxx::xml::dom::create_element (
              L"Obligations",
              L"http://www.qut.com/middleware/lxacmlSchema",
              e));

          s << x;
        }
        else
          tsm.serialize (
            L"Obligations",
            L"http://www.qut.com/middleware/lxacmlSchema",
            true, true, e, x);
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, ResultType >
    _xsd_ResultType_type_serializer_init (
      L"ResultType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Decision (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Decision (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Decision (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Decision (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Decision (::std::ostream& o,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Decision (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Decision (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Decision (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Decision (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Decision (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Decision (::xercesc::XMLFormatTarget& t,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::wstring& e,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Decision (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Decision (::xercesc::DOMDocument& d,
              const ::middleware::lxacmlContextSchema::DecisionType& s,
              ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlContextSchema::DecisionType) == typeid (s))
      {
        if (n.name () == L"Decision" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlContextSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Decision",
            L"http://www.qut.com/middleware/lxacmlContextSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Decision",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Decision (const ::middleware::lxacmlContextSchema::DecisionType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlContextSchema::DecisionType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Decision",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Decision",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlContextSchema::Decision (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const DecisionType& i)
    {
      e << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xercesc::DOMAttr& a, const DecisionType& i)
    {
      a << static_cast< const ::xml_schema::string& > (i);
    }

    void
    operator<< (::xml_schema::list_stream& l,
                const DecisionType& i)
    {
      l << static_cast< const ::xml_schema::string& > (i);
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, DecisionType >
    _xsd_DecisionType_type_serializer_init (
      L"DecisionType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    Status (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Status (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Status (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Status (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Status (::std::ostream& o,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Status (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Status (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Status (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    Status (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Status (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Status (::xercesc::XMLFormatTarget& t,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::wstring& e,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::Status (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    Status (::xercesc::DOMDocument& d,
            const ::middleware::lxacmlContextSchema::StatusType& s,
            ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::middleware::lxacmlContextSchema::StatusType) == typeid (s))
      {
        if (n.name () == L"Status" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlContextSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"Status",
            L"http://www.qut.com/middleware/lxacmlContextSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"Status",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    Status (const ::middleware::lxacmlContextSchema::StatusType& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::middleware::lxacmlContextSchema::StatusType) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"Status",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"Status",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlContextSchema::Status (*d, s, f);
      return d;
    }

    void
    operator<< (::xercesc::DOMElement& e, const StatusType& i)
    {
      e << static_cast< const ::xml_schema::type& > (i);

      // StatusMessage
      //
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        if (i.StatusMessage ())
        {
          const StatusType::StatusMessage_type& x (*i.StatusMessage ());
          if (typeid (StatusType::StatusMessage_type) == typeid (x))
          {
            ::xercesc::DOMElement& s (
              ::xsd::cxx::xml::dom::create_element (
                L"StatusMessage",
                L"http://www.qut.com/middleware/lxacmlContextSchema",
                e));

            s << x;
          }
          else
            tsm.serialize (
              L"StatusMessage",
              L"http://www.qut.com/middleware/lxacmlContextSchema",
              true, true, e, x);
        }
      }
    }

    static
    const ::xsd::cxx::tree::type_serializer_initializer< 0, wchar_t, StatusType >
    _xsd_StatusType_type_serializer_init (
      L"StatusType",
      L"http://www.qut.com/middleware/lxacmlContextSchema");


    void
    StatusMessage (::std::ostream& o,
                   const ::xml_schema::string& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::StatusMessage (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    StatusMessage (::std::ostream& o,
                   const ::xml_schema::string& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::flags::dont_initialize) == 0);

      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::StatusMessage (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusMessage (::std::ostream& o,
                   const ::xml_schema::string& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::StatusMessage (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusMessage (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::string& s,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::StatusMessage (s, m, f));

      ::xsd::cxx::tree::error_handler< wchar_t > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< wchar_t > > ();
      }
    }

    void
    StatusMessage (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::string& s,
                   ::xml_schema::error_handler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::StatusMessage (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusMessage (::xercesc::XMLFormatTarget& t,
                   const ::xml_schema::string& s,
                   ::xercesc::DOMErrorHandler& h,
                   const ::xml_schema::namespace_infomap& m,
                   const ::std::wstring& e,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
        ::middleware::lxacmlContextSchema::StatusMessage (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< wchar_t > ();
      }
    }

    void
    StatusMessage (::xercesc::DOMDocument& d,
                   const ::xml_schema::string& s,
                   ::xml_schema::flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< wchar_t > n (
        ::xsd::cxx::xml::dom::name< wchar_t > (e));

      if (typeid (::xml_schema::string) == typeid (s))
      {
        if (n.name () == L"StatusMessage" &&
            n.namespace_ () == L"http://www.qut.com/middleware/lxacmlContextSchema")
        {
          e << s;
        }
        else
        {
          throw ::xsd::cxx::tree::unexpected_element < wchar_t > (
            n.name (),
            n.namespace_ (),
            L"StatusMessage",
            L"http://www.qut.com/middleware/lxacmlContextSchema");
        }
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        tsm.serialize (
          L"StatusMessage",
          L"http://www.qut.com/middleware/lxacmlContextSchema",
          e, n, s);
      }
    }

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    StatusMessage (const ::xml_schema::string& s,
                   const ::xml_schema::namespace_infomap& m,
                   ::xml_schema::flags f)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d;

      if (typeid (::xml_schema::string) == typeid (s))
      {
        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          ::xsd::cxx::xml::dom::serialize< wchar_t > (
            L"StatusMessage",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, f));
        d = r;
      }
      else
      {
        ::xsd::cxx::tree::type_serializer_map< wchar_t >& tsm (
          ::xsd::cxx::tree::type_serializer_map_instance< 0, wchar_t > ());

        ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > r (
          tsm.serialize (
            L"StatusMessage",
            L"http://www.qut.com/middleware/lxacmlContextSchema",
            m, s, f));
        d = r;
      }

      ::middleware::lxacmlContextSchema::StatusMessage (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

