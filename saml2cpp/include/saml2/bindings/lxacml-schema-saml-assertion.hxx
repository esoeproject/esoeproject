// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_LXACML_SCHEMA_SAML_ASSERTION_HXX
#define CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_LXACML_SCHEMA_SAML_ASSERTION_HXX

// Begin prologue.
//
#include "saml2/SAML2Defs.h"
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3020000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_WCHAR
#define XSD_USE_WCHAR
#endif

#ifndef XSD_CXX_TREE_USE_WCHAR
#define XSD_CXX_TREE_USE_WCHAR
#endif

#include "saml2/xsd/xml-schema.hxx"

// Forward declarations.
//
namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    class LXACMLAuthzDecisionStatementType;
    class LXACMLPolicyStatementType;
  }
}


#include <memory>    // std::auto_ptr
#include <algorithm> // std::binary_search

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include <xsd/cxx/tree/containers-wildcard.hxx>

#include "saml-schema-assertion-2.0.hxx"

#include "saml-schema-protocol-2.0.hxx"

#include "lxacml-schema.hxx"

#include "lxacml-schema-context.hxx"

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    class LXACMLAuthzDecisionStatementType: public ::saml2::assertion::StatementAbstractType
    {
      public:
      // Response
      // 
      typedef ::middleware::lxacmlContextSchema::ResponseType Response_type;
      typedef ::xsd::cxx::tree::traits< Response_type, wchar_t > Response_traits;

      const Response_type&
      Response () const;

      Response_type&
      Response ();

      void
      Response (const Response_type& x);

      void
      Response (::std::auto_ptr< Response_type > p);

      // Request
      // 
      typedef ::middleware::lxacmlContextSchema::RequestType Request_type;
      typedef ::xsd::cxx::tree::optional< Request_type > Request_optional;
      typedef ::xsd::cxx::tree::traits< Request_type, wchar_t > Request_traits;

      const Request_optional&
      Request () const;

      Request_optional&
      Request ();

      void
      Request (const Request_type& x);

      void
      Request (const Request_optional& x);

      void
      Request (::std::auto_ptr< Request_type > p);

      // Constructors.
      //
      LXACMLAuthzDecisionStatementType ();

      LXACMLAuthzDecisionStatementType (const Response_type&);

      LXACMLAuthzDecisionStatementType (::std::auto_ptr< Response_type >&);

      LXACMLAuthzDecisionStatementType (const ::xercesc::DOMElement& e,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      LXACMLAuthzDecisionStatementType (const LXACMLAuthzDecisionStatementType& x,
                                        ::xml_schema::flags f = 0,
                                        ::xml_schema::container* c = 0);

      virtual LXACMLAuthzDecisionStatementType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LXACMLAuthzDecisionStatementType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      ::xsd::cxx::tree::one< Response_type > Response_;
      Request_optional Request_;
    };

    class LXACMLPolicyStatementType: public ::saml2::assertion::StatementAbstractType
    {
      public:
      // Policy
      // 
      typedef ::middleware::lxacmlSchema::PolicyType Policy_type;
      typedef ::xsd::cxx::tree::sequence< Policy_type > Policy_sequence;
      typedef Policy_sequence::iterator Policy_iterator;
      typedef Policy_sequence::const_iterator Policy_const_iterator;
      typedef ::xsd::cxx::tree::traits< Policy_type, wchar_t > Policy_traits;

      const Policy_sequence&
      Policy () const;

      Policy_sequence&
      Policy ();

      void
      Policy (const Policy_sequence& s);

      // PolicySet
      // 
      typedef ::middleware::lxacmlSchema::PolicySetType PolicySet_type;
      typedef ::xsd::cxx::tree::sequence< PolicySet_type > PolicySet_sequence;
      typedef PolicySet_sequence::iterator PolicySet_iterator;
      typedef PolicySet_sequence::const_iterator PolicySet_const_iterator;
      typedef ::xsd::cxx::tree::traits< PolicySet_type, wchar_t > PolicySet_traits;

      const PolicySet_sequence&
      PolicySet () const;

      PolicySet_sequence&
      PolicySet ();

      void
      PolicySet (const PolicySet_sequence& s);

      // Constructors.
      //
      LXACMLPolicyStatementType ();

      LXACMLPolicyStatementType (const ::xercesc::DOMElement& e,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      LXACMLPolicyStatementType (const LXACMLPolicyStatementType& x,
                                 ::xml_schema::flags f = 0,
                                 ::xml_schema::container* c = 0);

      virtual LXACMLPolicyStatementType*
      _clone (::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0) const;

      virtual 
      ~LXACMLPolicyStatementType ();

      // Implementation.
      //
      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< wchar_t >&,
             ::xml_schema::flags);

      protected:
      Policy_sequence Policy_;
      PolicySet_sequence PolicySet_;
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::std::wstring& uri,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::std::wstring& uri,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::std::wstring& uri,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  const ::std::wstring& id,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  const ::std::wstring& id,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::std::istream& is,
                                  const ::std::wstring& id,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::xercesc::InputSource& is,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::xercesc::InputSource& is,
                                  ::xml_schema::error_handler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::xercesc::InputSource& is,
                                  ::xercesc::DOMErrorHandler& eh,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (const ::xercesc::DOMDocument& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType >
    LXACMLAuthzDecisionStatement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                                  ::xml_schema::flags f = 0,
                                  const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse a URI or a local file.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::std::wstring& uri,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::std::wstring& uri,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::std::wstring& uri,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse std::istream.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           const ::std::wstring& id,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           const ::std::wstring& id,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::std::istream& is,
                           const ::std::wstring& id,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::InputSource.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::xercesc::InputSource& is,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::xercesc::InputSource& is,
                           ::xml_schema::error_handler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::xercesc::InputSource& is,
                           ::xercesc::DOMErrorHandler& eh,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    // Parse xercesc::DOMDocument.
    //

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (const ::xercesc::DOMDocument& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());

    ::std::auto_ptr< ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType >
    LXACMLPolicyStatement (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                           ::xml_schema::flags f = 0,
                           const ::xml_schema::properties& p = ::xml_schema::properties ());
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace middleware
{
  namespace lxacmlSAMLAssertionSchema
  {
    // Serialize to std::ostream.
    //

    void
    LXACMLAuthzDecisionStatement (::std::ostream& os,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::wstring& e = L"UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    LXACMLAuthzDecisionStatement (::std::ostream& os,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::wstring& e = L"UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    LXACMLAuthzDecisionStatement (::std::ostream& os,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::wstring& e = L"UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LXACMLAuthzDecisionStatement (::xercesc::XMLFormatTarget& ft,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::wstring& e = L"UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    LXACMLAuthzDecisionStatement (::xercesc::XMLFormatTarget& ft,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& x, 
                                  ::xml_schema::error_handler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::wstring& e = L"UTF-8",
                                  ::xml_schema::flags f = 0);

    void
    LXACMLAuthzDecisionStatement (::xercesc::XMLFormatTarget& ft,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& x, 
                                  ::xercesc::DOMErrorHandler& eh,
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  const ::std::wstring& e = L"UTF-8",
                                  ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LXACMLAuthzDecisionStatement (::xercesc::DOMDocument& d,
                                  const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& x,
                                  ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LXACMLAuthzDecisionStatement (const ::middleware::lxacmlSAMLAssertionSchema::LXACMLAuthzDecisionStatementType& x, 
                                  const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                                  ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const LXACMLAuthzDecisionStatementType&);

    // Serialize to std::ostream.
    //

    void
    LXACMLPolicyStatement (::std::ostream& os,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    LXACMLPolicyStatement (::std::ostream& os,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    LXACMLPolicyStatement (::std::ostream& os,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to xercesc::XMLFormatTarget.
    //

    void
    LXACMLPolicyStatement (::xercesc::XMLFormatTarget& ft,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    LXACMLPolicyStatement (::xercesc::XMLFormatTarget& ft,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& x, 
                           ::xml_schema::error_handler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    void
    LXACMLPolicyStatement (::xercesc::XMLFormatTarget& ft,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& x, 
                           ::xercesc::DOMErrorHandler& eh,
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           const ::std::wstring& e = L"UTF-8",
                           ::xml_schema::flags f = 0);

    // Serialize to an existing xercesc::DOMDocument.
    //

    void
    LXACMLPolicyStatement (::xercesc::DOMDocument& d,
                           const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& x,
                           ::xml_schema::flags f = 0);

    // Serialize to a new xercesc::DOMDocument.
    //

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
    LXACMLPolicyStatement (const ::middleware::lxacmlSAMLAssertionSchema::LXACMLPolicyStatementType& x, 
                           const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
                           ::xml_schema::flags f = 0);

    void
    operator<< (::xercesc::DOMElement&, const LXACMLPolicyStatementType&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX_HOME_KAURM_DEV_WORKSPACE_TEMPESOEPROJ_ESOEPROJECT_SAML2CPP_SCHEMA_LXACML_SCHEMA_SAML_ASSERTION_HXX
